/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SourcerepoRepositoryIamBindingLister helps list SourcerepoRepositoryIamBindings.
type SourcerepoRepositoryIamBindingLister interface {
	// List lists all SourcerepoRepositoryIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SourcerepoRepositoryIamBinding, err error)
	// SourcerepoRepositoryIamBindings returns an object that can list and get SourcerepoRepositoryIamBindings.
	SourcerepoRepositoryIamBindings(namespace string) SourcerepoRepositoryIamBindingNamespaceLister
	SourcerepoRepositoryIamBindingListerExpansion
}

// sourcerepoRepositoryIamBindingLister implements the SourcerepoRepositoryIamBindingLister interface.
type sourcerepoRepositoryIamBindingLister struct {
	indexer cache.Indexer
}

// NewSourcerepoRepositoryIamBindingLister returns a new SourcerepoRepositoryIamBindingLister.
func NewSourcerepoRepositoryIamBindingLister(indexer cache.Indexer) SourcerepoRepositoryIamBindingLister {
	return &sourcerepoRepositoryIamBindingLister{indexer: indexer}
}

// List lists all SourcerepoRepositoryIamBindings in the indexer.
func (s *sourcerepoRepositoryIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.SourcerepoRepositoryIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourcerepoRepositoryIamBinding))
	})
	return ret, err
}

// SourcerepoRepositoryIamBindings returns an object that can list and get SourcerepoRepositoryIamBindings.
func (s *sourcerepoRepositoryIamBindingLister) SourcerepoRepositoryIamBindings(namespace string) SourcerepoRepositoryIamBindingNamespaceLister {
	return sourcerepoRepositoryIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SourcerepoRepositoryIamBindingNamespaceLister helps list and get SourcerepoRepositoryIamBindings.
type SourcerepoRepositoryIamBindingNamespaceLister interface {
	// List lists all SourcerepoRepositoryIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SourcerepoRepositoryIamBinding, err error)
	// Get retrieves the SourcerepoRepositoryIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SourcerepoRepositoryIamBinding, error)
	SourcerepoRepositoryIamBindingNamespaceListerExpansion
}

// sourcerepoRepositoryIamBindingNamespaceLister implements the SourcerepoRepositoryIamBindingNamespaceLister
// interface.
type sourcerepoRepositoryIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SourcerepoRepositoryIamBindings in the indexer for a given namespace.
func (s sourcerepoRepositoryIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SourcerepoRepositoryIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourcerepoRepositoryIamBinding))
	})
	return ret, err
}

// Get retrieves the SourcerepoRepositoryIamBinding from the indexer for a given namespace and name.
func (s sourcerepoRepositoryIamBindingNamespaceLister) Get(name string) (*v1alpha1.SourcerepoRepositoryIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sourcereporepositoryiambinding"), name)
	}
	return obj.(*v1alpha1.SourcerepoRepositoryIamBinding), nil
}
