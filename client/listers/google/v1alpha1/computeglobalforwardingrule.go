/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeGlobalForwardingRuleLister helps list ComputeGlobalForwardingRules.
type ComputeGlobalForwardingRuleLister interface {
	// List lists all ComputeGlobalForwardingRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeGlobalForwardingRule, err error)
	// ComputeGlobalForwardingRules returns an object that can list and get ComputeGlobalForwardingRules.
	ComputeGlobalForwardingRules(namespace string) ComputeGlobalForwardingRuleNamespaceLister
	ComputeGlobalForwardingRuleListerExpansion
}

// computeGlobalForwardingRuleLister implements the ComputeGlobalForwardingRuleLister interface.
type computeGlobalForwardingRuleLister struct {
	indexer cache.Indexer
}

// NewComputeGlobalForwardingRuleLister returns a new ComputeGlobalForwardingRuleLister.
func NewComputeGlobalForwardingRuleLister(indexer cache.Indexer) ComputeGlobalForwardingRuleLister {
	return &computeGlobalForwardingRuleLister{indexer: indexer}
}

// List lists all ComputeGlobalForwardingRules in the indexer.
func (s *computeGlobalForwardingRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeGlobalForwardingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeGlobalForwardingRule))
	})
	return ret, err
}

// ComputeGlobalForwardingRules returns an object that can list and get ComputeGlobalForwardingRules.
func (s *computeGlobalForwardingRuleLister) ComputeGlobalForwardingRules(namespace string) ComputeGlobalForwardingRuleNamespaceLister {
	return computeGlobalForwardingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeGlobalForwardingRuleNamespaceLister helps list and get ComputeGlobalForwardingRules.
type ComputeGlobalForwardingRuleNamespaceLister interface {
	// List lists all ComputeGlobalForwardingRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeGlobalForwardingRule, err error)
	// Get retrieves the ComputeGlobalForwardingRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeGlobalForwardingRule, error)
	ComputeGlobalForwardingRuleNamespaceListerExpansion
}

// computeGlobalForwardingRuleNamespaceLister implements the ComputeGlobalForwardingRuleNamespaceLister
// interface.
type computeGlobalForwardingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeGlobalForwardingRules in the indexer for a given namespace.
func (s computeGlobalForwardingRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeGlobalForwardingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeGlobalForwardingRule))
	})
	return ret, err
}

// Get retrieves the ComputeGlobalForwardingRule from the indexer for a given namespace and name.
func (s computeGlobalForwardingRuleNamespaceLister) Get(name string) (*v1alpha1.ComputeGlobalForwardingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computeglobalforwardingrule"), name)
	}
	return obj.(*v1alpha1.ComputeGlobalForwardingRule), nil
}
