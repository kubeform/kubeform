/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// SpannerInstanceIamMemberLister helps list SpannerInstanceIamMembers.
type SpannerInstanceIamMemberLister interface {
	// List lists all SpannerInstanceIamMembers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamMember, err error)
	// SpannerInstanceIamMembers returns an object that can list and get SpannerInstanceIamMembers.
	SpannerInstanceIamMembers(namespace string) SpannerInstanceIamMemberNamespaceLister
	SpannerInstanceIamMemberListerExpansion
}

// spannerInstanceIamMemberLister implements the SpannerInstanceIamMemberLister interface.
type spannerInstanceIamMemberLister struct {
	indexer cache.Indexer
}

// NewSpannerInstanceIamMemberLister returns a new SpannerInstanceIamMemberLister.
func NewSpannerInstanceIamMemberLister(indexer cache.Indexer) SpannerInstanceIamMemberLister {
	return &spannerInstanceIamMemberLister{indexer: indexer}
}

// List lists all SpannerInstanceIamMembers in the indexer.
func (s *spannerInstanceIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerInstanceIamMember))
	})
	return ret, err
}

// SpannerInstanceIamMembers returns an object that can list and get SpannerInstanceIamMembers.
func (s *spannerInstanceIamMemberLister) SpannerInstanceIamMembers(namespace string) SpannerInstanceIamMemberNamespaceLister {
	return spannerInstanceIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpannerInstanceIamMemberNamespaceLister helps list and get SpannerInstanceIamMembers.
type SpannerInstanceIamMemberNamespaceLister interface {
	// List lists all SpannerInstanceIamMembers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamMember, err error)
	// Get retrieves the SpannerInstanceIamMember from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpannerInstanceIamMember, error)
	SpannerInstanceIamMemberNamespaceListerExpansion
}

// spannerInstanceIamMemberNamespaceLister implements the SpannerInstanceIamMemberNamespaceLister
// interface.
type spannerInstanceIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpannerInstanceIamMembers in the indexer for a given namespace.
func (s spannerInstanceIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerInstanceIamMember))
	})
	return ret, err
}

// Get retrieves the SpannerInstanceIamMember from the indexer for a given namespace and name.
func (s spannerInstanceIamMemberNamespaceLister) Get(name string) (*v1alpha1.SpannerInstanceIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("spannerinstanceiammember"), name)
	}
	return obj.(*v1alpha1.SpannerInstanceIamMember), nil
}
