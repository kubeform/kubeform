/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IapAppEngineVersionIamPolicyLister helps list IapAppEngineVersionIamPolicies.
type IapAppEngineVersionIamPolicyLister interface {
	// List lists all IapAppEngineVersionIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IapAppEngineVersionIamPolicy, err error)
	// IapAppEngineVersionIamPolicies returns an object that can list and get IapAppEngineVersionIamPolicies.
	IapAppEngineVersionIamPolicies(namespace string) IapAppEngineVersionIamPolicyNamespaceLister
	IapAppEngineVersionIamPolicyListerExpansion
}

// iapAppEngineVersionIamPolicyLister implements the IapAppEngineVersionIamPolicyLister interface.
type iapAppEngineVersionIamPolicyLister struct {
	indexer cache.Indexer
}

// NewIapAppEngineVersionIamPolicyLister returns a new IapAppEngineVersionIamPolicyLister.
func NewIapAppEngineVersionIamPolicyLister(indexer cache.Indexer) IapAppEngineVersionIamPolicyLister {
	return &iapAppEngineVersionIamPolicyLister{indexer: indexer}
}

// List lists all IapAppEngineVersionIamPolicies in the indexer.
func (s *iapAppEngineVersionIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.IapAppEngineVersionIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IapAppEngineVersionIamPolicy))
	})
	return ret, err
}

// IapAppEngineVersionIamPolicies returns an object that can list and get IapAppEngineVersionIamPolicies.
func (s *iapAppEngineVersionIamPolicyLister) IapAppEngineVersionIamPolicies(namespace string) IapAppEngineVersionIamPolicyNamespaceLister {
	return iapAppEngineVersionIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IapAppEngineVersionIamPolicyNamespaceLister helps list and get IapAppEngineVersionIamPolicies.
type IapAppEngineVersionIamPolicyNamespaceLister interface {
	// List lists all IapAppEngineVersionIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IapAppEngineVersionIamPolicy, err error)
	// Get retrieves the IapAppEngineVersionIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IapAppEngineVersionIamPolicy, error)
	IapAppEngineVersionIamPolicyNamespaceListerExpansion
}

// iapAppEngineVersionIamPolicyNamespaceLister implements the IapAppEngineVersionIamPolicyNamespaceLister
// interface.
type iapAppEngineVersionIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IapAppEngineVersionIamPolicies in the indexer for a given namespace.
func (s iapAppEngineVersionIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IapAppEngineVersionIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IapAppEngineVersionIamPolicy))
	})
	return ret, err
}

// Get retrieves the IapAppEngineVersionIamPolicy from the indexer for a given namespace and name.
func (s iapAppEngineVersionIamPolicyNamespaceLister) Get(name string) (*v1alpha1.IapAppEngineVersionIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iapappengineversioniampolicy"), name)
	}
	return obj.(*v1alpha1.IapAppEngineVersionIamPolicy), nil
}
