/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectIamAuditConfigLister helps list ProjectIamAuditConfigs.
type ProjectIamAuditConfigLister interface {
	// List lists all ProjectIamAuditConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectIamAuditConfig, err error)
	// ProjectIamAuditConfigs returns an object that can list and get ProjectIamAuditConfigs.
	ProjectIamAuditConfigs(namespace string) ProjectIamAuditConfigNamespaceLister
	ProjectIamAuditConfigListerExpansion
}

// projectIamAuditConfigLister implements the ProjectIamAuditConfigLister interface.
type projectIamAuditConfigLister struct {
	indexer cache.Indexer
}

// NewProjectIamAuditConfigLister returns a new ProjectIamAuditConfigLister.
func NewProjectIamAuditConfigLister(indexer cache.Indexer) ProjectIamAuditConfigLister {
	return &projectIamAuditConfigLister{indexer: indexer}
}

// List lists all ProjectIamAuditConfigs in the indexer.
func (s *projectIamAuditConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectIamAuditConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectIamAuditConfig))
	})
	return ret, err
}

// ProjectIamAuditConfigs returns an object that can list and get ProjectIamAuditConfigs.
func (s *projectIamAuditConfigLister) ProjectIamAuditConfigs(namespace string) ProjectIamAuditConfigNamespaceLister {
	return projectIamAuditConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectIamAuditConfigNamespaceLister helps list and get ProjectIamAuditConfigs.
type ProjectIamAuditConfigNamespaceLister interface {
	// List lists all ProjectIamAuditConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectIamAuditConfig, err error)
	// Get retrieves the ProjectIamAuditConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ProjectIamAuditConfig, error)
	ProjectIamAuditConfigNamespaceListerExpansion
}

// projectIamAuditConfigNamespaceLister implements the ProjectIamAuditConfigNamespaceLister
// interface.
type projectIamAuditConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectIamAuditConfigs in the indexer for a given namespace.
func (s projectIamAuditConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectIamAuditConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectIamAuditConfig))
	})
	return ret, err
}

// Get retrieves the ProjectIamAuditConfig from the indexer for a given namespace and name.
func (s projectIamAuditConfigNamespaceLister) Get(name string) (*v1alpha1.ProjectIamAuditConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectiamauditconfig"), name)
	}
	return obj.(*v1alpha1.ProjectIamAuditConfig), nil
}
