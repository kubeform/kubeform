/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitoringNotificationChannelLister helps list MonitoringNotificationChannels.
type MonitoringNotificationChannelLister interface {
	// List lists all MonitoringNotificationChannels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MonitoringNotificationChannel, err error)
	// MonitoringNotificationChannels returns an object that can list and get MonitoringNotificationChannels.
	MonitoringNotificationChannels(namespace string) MonitoringNotificationChannelNamespaceLister
	MonitoringNotificationChannelListerExpansion
}

// monitoringNotificationChannelLister implements the MonitoringNotificationChannelLister interface.
type monitoringNotificationChannelLister struct {
	indexer cache.Indexer
}

// NewMonitoringNotificationChannelLister returns a new MonitoringNotificationChannelLister.
func NewMonitoringNotificationChannelLister(indexer cache.Indexer) MonitoringNotificationChannelLister {
	return &monitoringNotificationChannelLister{indexer: indexer}
}

// List lists all MonitoringNotificationChannels in the indexer.
func (s *monitoringNotificationChannelLister) List(selector labels.Selector) (ret []*v1alpha1.MonitoringNotificationChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitoringNotificationChannel))
	})
	return ret, err
}

// MonitoringNotificationChannels returns an object that can list and get MonitoringNotificationChannels.
func (s *monitoringNotificationChannelLister) MonitoringNotificationChannels(namespace string) MonitoringNotificationChannelNamespaceLister {
	return monitoringNotificationChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitoringNotificationChannelNamespaceLister helps list and get MonitoringNotificationChannels.
type MonitoringNotificationChannelNamespaceLister interface {
	// List lists all MonitoringNotificationChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MonitoringNotificationChannel, err error)
	// Get retrieves the MonitoringNotificationChannel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MonitoringNotificationChannel, error)
	MonitoringNotificationChannelNamespaceListerExpansion
}

// monitoringNotificationChannelNamespaceLister implements the MonitoringNotificationChannelNamespaceLister
// interface.
type monitoringNotificationChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitoringNotificationChannels in the indexer for a given namespace.
func (s monitoringNotificationChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitoringNotificationChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitoringNotificationChannel))
	})
	return ret, err
}

// Get retrieves the MonitoringNotificationChannel from the indexer for a given namespace and name.
func (s monitoringNotificationChannelNamespaceLister) Get(name string) (*v1alpha1.MonitoringNotificationChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitoringnotificationchannel"), name)
	}
	return obj.(*v1alpha1.MonitoringNotificationChannel), nil
}
