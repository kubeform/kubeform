/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// LoggingOrganizationExclusionLister helps list LoggingOrganizationExclusions.
type LoggingOrganizationExclusionLister interface {
	// List lists all LoggingOrganizationExclusions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingOrganizationExclusion, err error)
	// LoggingOrganizationExclusions returns an object that can list and get LoggingOrganizationExclusions.
	LoggingOrganizationExclusions(namespace string) LoggingOrganizationExclusionNamespaceLister
	LoggingOrganizationExclusionListerExpansion
}

// loggingOrganizationExclusionLister implements the LoggingOrganizationExclusionLister interface.
type loggingOrganizationExclusionLister struct {
	indexer cache.Indexer
}

// NewLoggingOrganizationExclusionLister returns a new LoggingOrganizationExclusionLister.
func NewLoggingOrganizationExclusionLister(indexer cache.Indexer) LoggingOrganizationExclusionLister {
	return &loggingOrganizationExclusionLister{indexer: indexer}
}

// List lists all LoggingOrganizationExclusions in the indexer.
func (s *loggingOrganizationExclusionLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingOrganizationExclusion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingOrganizationExclusion))
	})
	return ret, err
}

// LoggingOrganizationExclusions returns an object that can list and get LoggingOrganizationExclusions.
func (s *loggingOrganizationExclusionLister) LoggingOrganizationExclusions(namespace string) LoggingOrganizationExclusionNamespaceLister {
	return loggingOrganizationExclusionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoggingOrganizationExclusionNamespaceLister helps list and get LoggingOrganizationExclusions.
type LoggingOrganizationExclusionNamespaceLister interface {
	// List lists all LoggingOrganizationExclusions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingOrganizationExclusion, err error)
	// Get retrieves the LoggingOrganizationExclusion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LoggingOrganizationExclusion, error)
	LoggingOrganizationExclusionNamespaceListerExpansion
}

// loggingOrganizationExclusionNamespaceLister implements the LoggingOrganizationExclusionNamespaceLister
// interface.
type loggingOrganizationExclusionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoggingOrganizationExclusions in the indexer for a given namespace.
func (s loggingOrganizationExclusionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingOrganizationExclusion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingOrganizationExclusion))
	})
	return ret, err
}

// Get retrieves the LoggingOrganizationExclusion from the indexer for a given namespace and name.
func (s loggingOrganizationExclusionNamespaceLister) Get(name string) (*v1alpha1.LoggingOrganizationExclusion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loggingorganizationexclusion"), name)
	}
	return obj.(*v1alpha1.LoggingOrganizationExclusion), nil
}
