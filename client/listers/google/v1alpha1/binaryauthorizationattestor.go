/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BinaryAuthorizationAttestorLister helps list BinaryAuthorizationAttestors.
type BinaryAuthorizationAttestorLister interface {
	// List lists all BinaryAuthorizationAttestors in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestor, err error)
	// BinaryAuthorizationAttestors returns an object that can list and get BinaryAuthorizationAttestors.
	BinaryAuthorizationAttestors(namespace string) BinaryAuthorizationAttestorNamespaceLister
	BinaryAuthorizationAttestorListerExpansion
}

// binaryAuthorizationAttestorLister implements the BinaryAuthorizationAttestorLister interface.
type binaryAuthorizationAttestorLister struct {
	indexer cache.Indexer
}

// NewBinaryAuthorizationAttestorLister returns a new BinaryAuthorizationAttestorLister.
func NewBinaryAuthorizationAttestorLister(indexer cache.Indexer) BinaryAuthorizationAttestorLister {
	return &binaryAuthorizationAttestorLister{indexer: indexer}
}

// List lists all BinaryAuthorizationAttestors in the indexer.
func (s *binaryAuthorizationAttestorLister) List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BinaryAuthorizationAttestor))
	})
	return ret, err
}

// BinaryAuthorizationAttestors returns an object that can list and get BinaryAuthorizationAttestors.
func (s *binaryAuthorizationAttestorLister) BinaryAuthorizationAttestors(namespace string) BinaryAuthorizationAttestorNamespaceLister {
	return binaryAuthorizationAttestorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BinaryAuthorizationAttestorNamespaceLister helps list and get BinaryAuthorizationAttestors.
type BinaryAuthorizationAttestorNamespaceLister interface {
	// List lists all BinaryAuthorizationAttestors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestor, err error)
	// Get retrieves the BinaryAuthorizationAttestor from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BinaryAuthorizationAttestor, error)
	BinaryAuthorizationAttestorNamespaceListerExpansion
}

// binaryAuthorizationAttestorNamespaceLister implements the BinaryAuthorizationAttestorNamespaceLister
// interface.
type binaryAuthorizationAttestorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BinaryAuthorizationAttestors in the indexer for a given namespace.
func (s binaryAuthorizationAttestorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BinaryAuthorizationAttestor))
	})
	return ret, err
}

// Get retrieves the BinaryAuthorizationAttestor from the indexer for a given namespace and name.
func (s binaryAuthorizationAttestorNamespaceLister) Get(name string) (*v1alpha1.BinaryAuthorizationAttestor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("binaryauthorizationattestor"), name)
	}
	return obj.(*v1alpha1.BinaryAuthorizationAttestor), nil
}
