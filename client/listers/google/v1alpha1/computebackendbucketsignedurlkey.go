/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeBackendBucketSignedURLKeyLister helps list ComputeBackendBucketSignedURLKeys.
type ComputeBackendBucketSignedURLKeyLister interface {
	// List lists all ComputeBackendBucketSignedURLKeys in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeBackendBucketSignedURLKey, err error)
	// ComputeBackendBucketSignedURLKeys returns an object that can list and get ComputeBackendBucketSignedURLKeys.
	ComputeBackendBucketSignedURLKeys(namespace string) ComputeBackendBucketSignedURLKeyNamespaceLister
	ComputeBackendBucketSignedURLKeyListerExpansion
}

// computeBackendBucketSignedURLKeyLister implements the ComputeBackendBucketSignedURLKeyLister interface.
type computeBackendBucketSignedURLKeyLister struct {
	indexer cache.Indexer
}

// NewComputeBackendBucketSignedURLKeyLister returns a new ComputeBackendBucketSignedURLKeyLister.
func NewComputeBackendBucketSignedURLKeyLister(indexer cache.Indexer) ComputeBackendBucketSignedURLKeyLister {
	return &computeBackendBucketSignedURLKeyLister{indexer: indexer}
}

// List lists all ComputeBackendBucketSignedURLKeys in the indexer.
func (s *computeBackendBucketSignedURLKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeBackendBucketSignedURLKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeBackendBucketSignedURLKey))
	})
	return ret, err
}

// ComputeBackendBucketSignedURLKeys returns an object that can list and get ComputeBackendBucketSignedURLKeys.
func (s *computeBackendBucketSignedURLKeyLister) ComputeBackendBucketSignedURLKeys(namespace string) ComputeBackendBucketSignedURLKeyNamespaceLister {
	return computeBackendBucketSignedURLKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeBackendBucketSignedURLKeyNamespaceLister helps list and get ComputeBackendBucketSignedURLKeys.
type ComputeBackendBucketSignedURLKeyNamespaceLister interface {
	// List lists all ComputeBackendBucketSignedURLKeys in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeBackendBucketSignedURLKey, err error)
	// Get retrieves the ComputeBackendBucketSignedURLKey from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeBackendBucketSignedURLKey, error)
	ComputeBackendBucketSignedURLKeyNamespaceListerExpansion
}

// computeBackendBucketSignedURLKeyNamespaceLister implements the ComputeBackendBucketSignedURLKeyNamespaceLister
// interface.
type computeBackendBucketSignedURLKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeBackendBucketSignedURLKeys in the indexer for a given namespace.
func (s computeBackendBucketSignedURLKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeBackendBucketSignedURLKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeBackendBucketSignedURLKey))
	})
	return ret, err
}

// Get retrieves the ComputeBackendBucketSignedURLKey from the indexer for a given namespace and name.
func (s computeBackendBucketSignedURLKeyNamespaceLister) Get(name string) (*v1alpha1.ComputeBackendBucketSignedURLKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computebackendbucketsignedurlkey"), name)
	}
	return obj.(*v1alpha1.ComputeBackendBucketSignedURLKey), nil
}
