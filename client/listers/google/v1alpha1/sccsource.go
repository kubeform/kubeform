/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SccSourceLister helps list SccSources.
type SccSourceLister interface {
	// List lists all SccSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SccSource, err error)
	// SccSources returns an object that can list and get SccSources.
	SccSources(namespace string) SccSourceNamespaceLister
	SccSourceListerExpansion
}

// sccSourceLister implements the SccSourceLister interface.
type sccSourceLister struct {
	indexer cache.Indexer
}

// NewSccSourceLister returns a new SccSourceLister.
func NewSccSourceLister(indexer cache.Indexer) SccSourceLister {
	return &sccSourceLister{indexer: indexer}
}

// List lists all SccSources in the indexer.
func (s *sccSourceLister) List(selector labels.Selector) (ret []*v1alpha1.SccSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SccSource))
	})
	return ret, err
}

// SccSources returns an object that can list and get SccSources.
func (s *sccSourceLister) SccSources(namespace string) SccSourceNamespaceLister {
	return sccSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SccSourceNamespaceLister helps list and get SccSources.
type SccSourceNamespaceLister interface {
	// List lists all SccSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SccSource, err error)
	// Get retrieves the SccSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SccSource, error)
	SccSourceNamespaceListerExpansion
}

// sccSourceNamespaceLister implements the SccSourceNamespaceLister
// interface.
type sccSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SccSources in the indexer for a given namespace.
func (s sccSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SccSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SccSource))
	})
	return ret, err
}

// Get retrieves the SccSource from the indexer for a given namespace and name.
func (s sccSourceNamespaceLister) Get(name string) (*v1alpha1.SccSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sccsource"), name)
	}
	return obj.(*v1alpha1.SccSource), nil
}
