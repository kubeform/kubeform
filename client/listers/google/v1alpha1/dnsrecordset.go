/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// DnsRecordSetLister helps list DnsRecordSets.
type DnsRecordSetLister interface {
	// List lists all DnsRecordSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DnsRecordSet, err error)
	// DnsRecordSets returns an object that can list and get DnsRecordSets.
	DnsRecordSets(namespace string) DnsRecordSetNamespaceLister
	DnsRecordSetListerExpansion
}

// dnsRecordSetLister implements the DnsRecordSetLister interface.
type dnsRecordSetLister struct {
	indexer cache.Indexer
}

// NewDnsRecordSetLister returns a new DnsRecordSetLister.
func NewDnsRecordSetLister(indexer cache.Indexer) DnsRecordSetLister {
	return &dnsRecordSetLister{indexer: indexer}
}

// List lists all DnsRecordSets in the indexer.
func (s *dnsRecordSetLister) List(selector labels.Selector) (ret []*v1alpha1.DnsRecordSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsRecordSet))
	})
	return ret, err
}

// DnsRecordSets returns an object that can list and get DnsRecordSets.
func (s *dnsRecordSetLister) DnsRecordSets(namespace string) DnsRecordSetNamespaceLister {
	return dnsRecordSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsRecordSetNamespaceLister helps list and get DnsRecordSets.
type DnsRecordSetNamespaceLister interface {
	// List lists all DnsRecordSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DnsRecordSet, err error)
	// Get retrieves the DnsRecordSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DnsRecordSet, error)
	DnsRecordSetNamespaceListerExpansion
}

// dnsRecordSetNamespaceLister implements the DnsRecordSetNamespaceLister
// interface.
type dnsRecordSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsRecordSets in the indexer for a given namespace.
func (s dnsRecordSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DnsRecordSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsRecordSet))
	})
	return ret, err
}

// Get retrieves the DnsRecordSet from the indexer for a given namespace and name.
func (s dnsRecordSetNamespaceLister) Get(name string) (*v1alpha1.DnsRecordSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnsrecordset"), name)
	}
	return obj.(*v1alpha1.DnsRecordSet), nil
}
