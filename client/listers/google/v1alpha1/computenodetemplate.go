/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeNodeTemplateLister helps list ComputeNodeTemplates.
type ComputeNodeTemplateLister interface {
	// List lists all ComputeNodeTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeTemplate, err error)
	// ComputeNodeTemplates returns an object that can list and get ComputeNodeTemplates.
	ComputeNodeTemplates(namespace string) ComputeNodeTemplateNamespaceLister
	ComputeNodeTemplateListerExpansion
}

// computeNodeTemplateLister implements the ComputeNodeTemplateLister interface.
type computeNodeTemplateLister struct {
	indexer cache.Indexer
}

// NewComputeNodeTemplateLister returns a new ComputeNodeTemplateLister.
func NewComputeNodeTemplateLister(indexer cache.Indexer) ComputeNodeTemplateLister {
	return &computeNodeTemplateLister{indexer: indexer}
}

// List lists all ComputeNodeTemplates in the indexer.
func (s *computeNodeTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeNodeTemplate))
	})
	return ret, err
}

// ComputeNodeTemplates returns an object that can list and get ComputeNodeTemplates.
func (s *computeNodeTemplateLister) ComputeNodeTemplates(namespace string) ComputeNodeTemplateNamespaceLister {
	return computeNodeTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeNodeTemplateNamespaceLister helps list and get ComputeNodeTemplates.
type ComputeNodeTemplateNamespaceLister interface {
	// List lists all ComputeNodeTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeTemplate, err error)
	// Get retrieves the ComputeNodeTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeNodeTemplate, error)
	ComputeNodeTemplateNamespaceListerExpansion
}

// computeNodeTemplateNamespaceLister implements the ComputeNodeTemplateNamespaceLister
// interface.
type computeNodeTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeNodeTemplates in the indexer for a given namespace.
func (s computeNodeTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeNodeTemplate))
	})
	return ret, err
}

// Get retrieves the ComputeNodeTemplate from the indexer for a given namespace and name.
func (s computeNodeTemplateNamespaceLister) Get(name string) (*v1alpha1.ComputeNodeTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computenodetemplate"), name)
	}
	return obj.(*v1alpha1.ComputeNodeTemplate), nil
}
