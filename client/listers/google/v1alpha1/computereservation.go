/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeReservationLister helps list ComputeReservations.
type ComputeReservationLister interface {
	// List lists all ComputeReservations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeReservation, err error)
	// ComputeReservations returns an object that can list and get ComputeReservations.
	ComputeReservations(namespace string) ComputeReservationNamespaceLister
	ComputeReservationListerExpansion
}

// computeReservationLister implements the ComputeReservationLister interface.
type computeReservationLister struct {
	indexer cache.Indexer
}

// NewComputeReservationLister returns a new ComputeReservationLister.
func NewComputeReservationLister(indexer cache.Indexer) ComputeReservationLister {
	return &computeReservationLister{indexer: indexer}
}

// List lists all ComputeReservations in the indexer.
func (s *computeReservationLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeReservation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeReservation))
	})
	return ret, err
}

// ComputeReservations returns an object that can list and get ComputeReservations.
func (s *computeReservationLister) ComputeReservations(namespace string) ComputeReservationNamespaceLister {
	return computeReservationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeReservationNamespaceLister helps list and get ComputeReservations.
type ComputeReservationNamespaceLister interface {
	// List lists all ComputeReservations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeReservation, err error)
	// Get retrieves the ComputeReservation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeReservation, error)
	ComputeReservationNamespaceListerExpansion
}

// computeReservationNamespaceLister implements the ComputeReservationNamespaceLister
// interface.
type computeReservationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeReservations in the indexer for a given namespace.
func (s computeReservationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeReservation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeReservation))
	})
	return ret, err
}

// Get retrieves the ComputeReservation from the indexer for a given namespace and name.
func (s computeReservationNamespaceLister) Get(name string) (*v1alpha1.ComputeReservation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computereservation"), name)
	}
	return obj.(*v1alpha1.ComputeReservation), nil
}
