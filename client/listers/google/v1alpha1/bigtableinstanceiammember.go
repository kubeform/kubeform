/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BigtableInstanceIamMemberLister helps list BigtableInstanceIamMembers.
type BigtableInstanceIamMemberLister interface {
	// List lists all BigtableInstanceIamMembers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BigtableInstanceIamMember, err error)
	// BigtableInstanceIamMembers returns an object that can list and get BigtableInstanceIamMembers.
	BigtableInstanceIamMembers(namespace string) BigtableInstanceIamMemberNamespaceLister
	BigtableInstanceIamMemberListerExpansion
}

// bigtableInstanceIamMemberLister implements the BigtableInstanceIamMemberLister interface.
type bigtableInstanceIamMemberLister struct {
	indexer cache.Indexer
}

// NewBigtableInstanceIamMemberLister returns a new BigtableInstanceIamMemberLister.
func NewBigtableInstanceIamMemberLister(indexer cache.Indexer) BigtableInstanceIamMemberLister {
	return &bigtableInstanceIamMemberLister{indexer: indexer}
}

// List lists all BigtableInstanceIamMembers in the indexer.
func (s *bigtableInstanceIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.BigtableInstanceIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BigtableInstanceIamMember))
	})
	return ret, err
}

// BigtableInstanceIamMembers returns an object that can list and get BigtableInstanceIamMembers.
func (s *bigtableInstanceIamMemberLister) BigtableInstanceIamMembers(namespace string) BigtableInstanceIamMemberNamespaceLister {
	return bigtableInstanceIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BigtableInstanceIamMemberNamespaceLister helps list and get BigtableInstanceIamMembers.
type BigtableInstanceIamMemberNamespaceLister interface {
	// List lists all BigtableInstanceIamMembers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BigtableInstanceIamMember, err error)
	// Get retrieves the BigtableInstanceIamMember from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BigtableInstanceIamMember, error)
	BigtableInstanceIamMemberNamespaceListerExpansion
}

// bigtableInstanceIamMemberNamespaceLister implements the BigtableInstanceIamMemberNamespaceLister
// interface.
type bigtableInstanceIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BigtableInstanceIamMembers in the indexer for a given namespace.
func (s bigtableInstanceIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BigtableInstanceIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BigtableInstanceIamMember))
	})
	return ret, err
}

// Get retrieves the BigtableInstanceIamMember from the indexer for a given namespace and name.
func (s bigtableInstanceIamMemberNamespaceLister) Get(name string) (*v1alpha1.BigtableInstanceIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bigtableinstanceiammember"), name)
	}
	return obj.(*v1alpha1.BigtableInstanceIamMember), nil
}
