/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeRouterPeerLister helps list ComputeRouterPeers.
type ComputeRouterPeerLister interface {
	// List lists all ComputeRouterPeers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeRouterPeer, err error)
	// ComputeRouterPeers returns an object that can list and get ComputeRouterPeers.
	ComputeRouterPeers(namespace string) ComputeRouterPeerNamespaceLister
	ComputeRouterPeerListerExpansion
}

// computeRouterPeerLister implements the ComputeRouterPeerLister interface.
type computeRouterPeerLister struct {
	indexer cache.Indexer
}

// NewComputeRouterPeerLister returns a new ComputeRouterPeerLister.
func NewComputeRouterPeerLister(indexer cache.Indexer) ComputeRouterPeerLister {
	return &computeRouterPeerLister{indexer: indexer}
}

// List lists all ComputeRouterPeers in the indexer.
func (s *computeRouterPeerLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeRouterPeer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeRouterPeer))
	})
	return ret, err
}

// ComputeRouterPeers returns an object that can list and get ComputeRouterPeers.
func (s *computeRouterPeerLister) ComputeRouterPeers(namespace string) ComputeRouterPeerNamespaceLister {
	return computeRouterPeerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeRouterPeerNamespaceLister helps list and get ComputeRouterPeers.
type ComputeRouterPeerNamespaceLister interface {
	// List lists all ComputeRouterPeers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeRouterPeer, err error)
	// Get retrieves the ComputeRouterPeer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeRouterPeer, error)
	ComputeRouterPeerNamespaceListerExpansion
}

// computeRouterPeerNamespaceLister implements the ComputeRouterPeerNamespaceLister
// interface.
type computeRouterPeerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeRouterPeers in the indexer for a given namespace.
func (s computeRouterPeerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeRouterPeer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeRouterPeer))
	})
	return ret, err
}

// Get retrieves the ComputeRouterPeer from the indexer for a given namespace and name.
func (s computeRouterPeerNamespaceLister) Get(name string) (*v1alpha1.ComputeRouterPeer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computerouterpeer"), name)
	}
	return obj.(*v1alpha1.ComputeRouterPeer), nil
}
