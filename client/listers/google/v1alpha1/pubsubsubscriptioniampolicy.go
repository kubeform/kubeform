/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PubsubSubscriptionIamPolicyLister helps list PubsubSubscriptionIamPolicies.
type PubsubSubscriptionIamPolicyLister interface {
	// List lists all PubsubSubscriptionIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubSubscriptionIamPolicy, err error)
	// PubsubSubscriptionIamPolicies returns an object that can list and get PubsubSubscriptionIamPolicies.
	PubsubSubscriptionIamPolicies(namespace string) PubsubSubscriptionIamPolicyNamespaceLister
	PubsubSubscriptionIamPolicyListerExpansion
}

// pubsubSubscriptionIamPolicyLister implements the PubsubSubscriptionIamPolicyLister interface.
type pubsubSubscriptionIamPolicyLister struct {
	indexer cache.Indexer
}

// NewPubsubSubscriptionIamPolicyLister returns a new PubsubSubscriptionIamPolicyLister.
func NewPubsubSubscriptionIamPolicyLister(indexer cache.Indexer) PubsubSubscriptionIamPolicyLister {
	return &pubsubSubscriptionIamPolicyLister{indexer: indexer}
}

// List lists all PubsubSubscriptionIamPolicies in the indexer.
func (s *pubsubSubscriptionIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubSubscriptionIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubSubscriptionIamPolicy))
	})
	return ret, err
}

// PubsubSubscriptionIamPolicies returns an object that can list and get PubsubSubscriptionIamPolicies.
func (s *pubsubSubscriptionIamPolicyLister) PubsubSubscriptionIamPolicies(namespace string) PubsubSubscriptionIamPolicyNamespaceLister {
	return pubsubSubscriptionIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PubsubSubscriptionIamPolicyNamespaceLister helps list and get PubsubSubscriptionIamPolicies.
type PubsubSubscriptionIamPolicyNamespaceLister interface {
	// List lists all PubsubSubscriptionIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubSubscriptionIamPolicy, err error)
	// Get retrieves the PubsubSubscriptionIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PubsubSubscriptionIamPolicy, error)
	PubsubSubscriptionIamPolicyNamespaceListerExpansion
}

// pubsubSubscriptionIamPolicyNamespaceLister implements the PubsubSubscriptionIamPolicyNamespaceLister
// interface.
type pubsubSubscriptionIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PubsubSubscriptionIamPolicies in the indexer for a given namespace.
func (s pubsubSubscriptionIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubSubscriptionIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubSubscriptionIamPolicy))
	})
	return ret, err
}

// Get retrieves the PubsubSubscriptionIamPolicy from the indexer for a given namespace and name.
func (s pubsubSubscriptionIamPolicyNamespaceLister) Get(name string) (*v1alpha1.PubsubSubscriptionIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pubsubsubscriptioniampolicy"), name)
	}
	return obj.(*v1alpha1.PubsubSubscriptionIamPolicy), nil
}
