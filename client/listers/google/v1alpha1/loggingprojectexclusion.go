/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// LoggingProjectExclusionLister helps list LoggingProjectExclusions.
type LoggingProjectExclusionLister interface {
	// List lists all LoggingProjectExclusions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectExclusion, err error)
	// LoggingProjectExclusions returns an object that can list and get LoggingProjectExclusions.
	LoggingProjectExclusions(namespace string) LoggingProjectExclusionNamespaceLister
	LoggingProjectExclusionListerExpansion
}

// loggingProjectExclusionLister implements the LoggingProjectExclusionLister interface.
type loggingProjectExclusionLister struct {
	indexer cache.Indexer
}

// NewLoggingProjectExclusionLister returns a new LoggingProjectExclusionLister.
func NewLoggingProjectExclusionLister(indexer cache.Indexer) LoggingProjectExclusionLister {
	return &loggingProjectExclusionLister{indexer: indexer}
}

// List lists all LoggingProjectExclusions in the indexer.
func (s *loggingProjectExclusionLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectExclusion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingProjectExclusion))
	})
	return ret, err
}

// LoggingProjectExclusions returns an object that can list and get LoggingProjectExclusions.
func (s *loggingProjectExclusionLister) LoggingProjectExclusions(namespace string) LoggingProjectExclusionNamespaceLister {
	return loggingProjectExclusionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoggingProjectExclusionNamespaceLister helps list and get LoggingProjectExclusions.
type LoggingProjectExclusionNamespaceLister interface {
	// List lists all LoggingProjectExclusions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectExclusion, err error)
	// Get retrieves the LoggingProjectExclusion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LoggingProjectExclusion, error)
	LoggingProjectExclusionNamespaceListerExpansion
}

// loggingProjectExclusionNamespaceLister implements the LoggingProjectExclusionNamespaceLister
// interface.
type loggingProjectExclusionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoggingProjectExclusions in the indexer for a given namespace.
func (s loggingProjectExclusionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectExclusion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingProjectExclusion))
	})
	return ret, err
}

// Get retrieves the LoggingProjectExclusion from the indexer for a given namespace and name.
func (s loggingProjectExclusionNamespaceLister) Get(name string) (*v1alpha1.LoggingProjectExclusion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loggingprojectexclusion"), name)
	}
	return obj.(*v1alpha1.LoggingProjectExclusion), nil
}
