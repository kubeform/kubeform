/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContainerNodePoolLister helps list ContainerNodePools.
type ContainerNodePoolLister interface {
	// List lists all ContainerNodePools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerNodePool, err error)
	// ContainerNodePools returns an object that can list and get ContainerNodePools.
	ContainerNodePools(namespace string) ContainerNodePoolNamespaceLister
	ContainerNodePoolListerExpansion
}

// containerNodePoolLister implements the ContainerNodePoolLister interface.
type containerNodePoolLister struct {
	indexer cache.Indexer
}

// NewContainerNodePoolLister returns a new ContainerNodePoolLister.
func NewContainerNodePoolLister(indexer cache.Indexer) ContainerNodePoolLister {
	return &containerNodePoolLister{indexer: indexer}
}

// List lists all ContainerNodePools in the indexer.
func (s *containerNodePoolLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerNodePool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerNodePool))
	})
	return ret, err
}

// ContainerNodePools returns an object that can list and get ContainerNodePools.
func (s *containerNodePoolLister) ContainerNodePools(namespace string) ContainerNodePoolNamespaceLister {
	return containerNodePoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContainerNodePoolNamespaceLister helps list and get ContainerNodePools.
type ContainerNodePoolNamespaceLister interface {
	// List lists all ContainerNodePools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerNodePool, err error)
	// Get retrieves the ContainerNodePool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ContainerNodePool, error)
	ContainerNodePoolNamespaceListerExpansion
}

// containerNodePoolNamespaceLister implements the ContainerNodePoolNamespaceLister
// interface.
type containerNodePoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContainerNodePools in the indexer for a given namespace.
func (s containerNodePoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerNodePool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerNodePool))
	})
	return ret, err
}

// Get retrieves the ContainerNodePool from the indexer for a given namespace and name.
func (s containerNodePoolNamespaceLister) Get(name string) (*v1alpha1.ContainerNodePool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("containernodepool"), name)
	}
	return obj.(*v1alpha1.ContainerNodePool), nil
}
