/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceAccountIamBindingLister helps list ServiceAccountIamBindings.
type ServiceAccountIamBindingLister interface {
	// List lists all ServiceAccountIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceAccountIamBinding, err error)
	// ServiceAccountIamBindings returns an object that can list and get ServiceAccountIamBindings.
	ServiceAccountIamBindings(namespace string) ServiceAccountIamBindingNamespaceLister
	ServiceAccountIamBindingListerExpansion
}

// serviceAccountIamBindingLister implements the ServiceAccountIamBindingLister interface.
type serviceAccountIamBindingLister struct {
	indexer cache.Indexer
}

// NewServiceAccountIamBindingLister returns a new ServiceAccountIamBindingLister.
func NewServiceAccountIamBindingLister(indexer cache.Indexer) ServiceAccountIamBindingLister {
	return &serviceAccountIamBindingLister{indexer: indexer}
}

// List lists all ServiceAccountIamBindings in the indexer.
func (s *serviceAccountIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceAccountIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceAccountIamBinding))
	})
	return ret, err
}

// ServiceAccountIamBindings returns an object that can list and get ServiceAccountIamBindings.
func (s *serviceAccountIamBindingLister) ServiceAccountIamBindings(namespace string) ServiceAccountIamBindingNamespaceLister {
	return serviceAccountIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceAccountIamBindingNamespaceLister helps list and get ServiceAccountIamBindings.
type ServiceAccountIamBindingNamespaceLister interface {
	// List lists all ServiceAccountIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceAccountIamBinding, err error)
	// Get retrieves the ServiceAccountIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServiceAccountIamBinding, error)
	ServiceAccountIamBindingNamespaceListerExpansion
}

// serviceAccountIamBindingNamespaceLister implements the ServiceAccountIamBindingNamespaceLister
// interface.
type serviceAccountIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceAccountIamBindings in the indexer for a given namespace.
func (s serviceAccountIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceAccountIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceAccountIamBinding))
	})
	return ret, err
}

// Get retrieves the ServiceAccountIamBinding from the indexer for a given namespace and name.
func (s serviceAccountIamBindingNamespaceLister) Get(name string) (*v1alpha1.ServiceAccountIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceaccountiambinding"), name)
	}
	return obj.(*v1alpha1.ServiceAccountIamBinding), nil
}
