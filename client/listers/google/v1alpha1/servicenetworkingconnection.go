/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceNetworkingConnectionLister helps list ServiceNetworkingConnections.
type ServiceNetworkingConnectionLister interface {
	// List lists all ServiceNetworkingConnections in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceNetworkingConnection, err error)
	// ServiceNetworkingConnections returns an object that can list and get ServiceNetworkingConnections.
	ServiceNetworkingConnections(namespace string) ServiceNetworkingConnectionNamespaceLister
	ServiceNetworkingConnectionListerExpansion
}

// serviceNetworkingConnectionLister implements the ServiceNetworkingConnectionLister interface.
type serviceNetworkingConnectionLister struct {
	indexer cache.Indexer
}

// NewServiceNetworkingConnectionLister returns a new ServiceNetworkingConnectionLister.
func NewServiceNetworkingConnectionLister(indexer cache.Indexer) ServiceNetworkingConnectionLister {
	return &serviceNetworkingConnectionLister{indexer: indexer}
}

// List lists all ServiceNetworkingConnections in the indexer.
func (s *serviceNetworkingConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceNetworkingConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceNetworkingConnection))
	})
	return ret, err
}

// ServiceNetworkingConnections returns an object that can list and get ServiceNetworkingConnections.
func (s *serviceNetworkingConnectionLister) ServiceNetworkingConnections(namespace string) ServiceNetworkingConnectionNamespaceLister {
	return serviceNetworkingConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceNetworkingConnectionNamespaceLister helps list and get ServiceNetworkingConnections.
type ServiceNetworkingConnectionNamespaceLister interface {
	// List lists all ServiceNetworkingConnections in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceNetworkingConnection, err error)
	// Get retrieves the ServiceNetworkingConnection from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServiceNetworkingConnection, error)
	ServiceNetworkingConnectionNamespaceListerExpansion
}

// serviceNetworkingConnectionNamespaceLister implements the ServiceNetworkingConnectionNamespaceLister
// interface.
type serviceNetworkingConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceNetworkingConnections in the indexer for a given namespace.
func (s serviceNetworkingConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceNetworkingConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceNetworkingConnection))
	})
	return ret, err
}

// Get retrieves the ServiceNetworkingConnection from the indexer for a given namespace and name.
func (s serviceNetworkingConnectionNamespaceLister) Get(name string) (*v1alpha1.ServiceNetworkingConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicenetworkingconnection"), name)
	}
	return obj.(*v1alpha1.ServiceNetworkingConnection), nil
}
