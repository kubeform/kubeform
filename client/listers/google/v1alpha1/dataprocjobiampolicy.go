/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataprocJobIamPolicyLister helps list DataprocJobIamPolicies.
type DataprocJobIamPolicyLister interface {
	// List lists all DataprocJobIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataprocJobIamPolicy, err error)
	// DataprocJobIamPolicies returns an object that can list and get DataprocJobIamPolicies.
	DataprocJobIamPolicies(namespace string) DataprocJobIamPolicyNamespaceLister
	DataprocJobIamPolicyListerExpansion
}

// dataprocJobIamPolicyLister implements the DataprocJobIamPolicyLister interface.
type dataprocJobIamPolicyLister struct {
	indexer cache.Indexer
}

// NewDataprocJobIamPolicyLister returns a new DataprocJobIamPolicyLister.
func NewDataprocJobIamPolicyLister(indexer cache.Indexer) DataprocJobIamPolicyLister {
	return &dataprocJobIamPolicyLister{indexer: indexer}
}

// List lists all DataprocJobIamPolicies in the indexer.
func (s *dataprocJobIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.DataprocJobIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataprocJobIamPolicy))
	})
	return ret, err
}

// DataprocJobIamPolicies returns an object that can list and get DataprocJobIamPolicies.
func (s *dataprocJobIamPolicyLister) DataprocJobIamPolicies(namespace string) DataprocJobIamPolicyNamespaceLister {
	return dataprocJobIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataprocJobIamPolicyNamespaceLister helps list and get DataprocJobIamPolicies.
type DataprocJobIamPolicyNamespaceLister interface {
	// List lists all DataprocJobIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataprocJobIamPolicy, err error)
	// Get retrieves the DataprocJobIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataprocJobIamPolicy, error)
	DataprocJobIamPolicyNamespaceListerExpansion
}

// dataprocJobIamPolicyNamespaceLister implements the DataprocJobIamPolicyNamespaceLister
// interface.
type dataprocJobIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataprocJobIamPolicies in the indexer for a given namespace.
func (s dataprocJobIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataprocJobIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataprocJobIamPolicy))
	})
	return ret, err
}

// Get retrieves the DataprocJobIamPolicy from the indexer for a given namespace and name.
func (s dataprocJobIamPolicyNamespaceLister) Get(name string) (*v1alpha1.DataprocJobIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataprocjobiampolicy"), name)
	}
	return obj.(*v1alpha1.DataprocJobIamPolicy), nil
}
