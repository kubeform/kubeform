/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// RuntimeconfigConfigLister helps list RuntimeconfigConfigs.
type RuntimeconfigConfigLister interface {
	// List lists all RuntimeconfigConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RuntimeconfigConfig, err error)
	// RuntimeconfigConfigs returns an object that can list and get RuntimeconfigConfigs.
	RuntimeconfigConfigs(namespace string) RuntimeconfigConfigNamespaceLister
	RuntimeconfigConfigListerExpansion
}

// runtimeconfigConfigLister implements the RuntimeconfigConfigLister interface.
type runtimeconfigConfigLister struct {
	indexer cache.Indexer
}

// NewRuntimeconfigConfigLister returns a new RuntimeconfigConfigLister.
func NewRuntimeconfigConfigLister(indexer cache.Indexer) RuntimeconfigConfigLister {
	return &runtimeconfigConfigLister{indexer: indexer}
}

// List lists all RuntimeconfigConfigs in the indexer.
func (s *runtimeconfigConfigLister) List(selector labels.Selector) (ret []*v1alpha1.RuntimeconfigConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuntimeconfigConfig))
	})
	return ret, err
}

// RuntimeconfigConfigs returns an object that can list and get RuntimeconfigConfigs.
func (s *runtimeconfigConfigLister) RuntimeconfigConfigs(namespace string) RuntimeconfigConfigNamespaceLister {
	return runtimeconfigConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RuntimeconfigConfigNamespaceLister helps list and get RuntimeconfigConfigs.
type RuntimeconfigConfigNamespaceLister interface {
	// List lists all RuntimeconfigConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RuntimeconfigConfig, err error)
	// Get retrieves the RuntimeconfigConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RuntimeconfigConfig, error)
	RuntimeconfigConfigNamespaceListerExpansion
}

// runtimeconfigConfigNamespaceLister implements the RuntimeconfigConfigNamespaceLister
// interface.
type runtimeconfigConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RuntimeconfigConfigs in the indexer for a given namespace.
func (s runtimeconfigConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RuntimeconfigConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuntimeconfigConfig))
	})
	return ret, err
}

// Get retrieves the RuntimeconfigConfig from the indexer for a given namespace and name.
func (s runtimeconfigConfigNamespaceLister) Get(name string) (*v1alpha1.RuntimeconfigConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runtimeconfigconfig"), name)
	}
	return obj.(*v1alpha1.RuntimeconfigConfig), nil
}
