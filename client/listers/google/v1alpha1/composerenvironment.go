/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComposerEnvironmentLister helps list ComposerEnvironments.
type ComposerEnvironmentLister interface {
	// List lists all ComposerEnvironments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComposerEnvironment, err error)
	// ComposerEnvironments returns an object that can list and get ComposerEnvironments.
	ComposerEnvironments(namespace string) ComposerEnvironmentNamespaceLister
	ComposerEnvironmentListerExpansion
}

// composerEnvironmentLister implements the ComposerEnvironmentLister interface.
type composerEnvironmentLister struct {
	indexer cache.Indexer
}

// NewComposerEnvironmentLister returns a new ComposerEnvironmentLister.
func NewComposerEnvironmentLister(indexer cache.Indexer) ComposerEnvironmentLister {
	return &composerEnvironmentLister{indexer: indexer}
}

// List lists all ComposerEnvironments in the indexer.
func (s *composerEnvironmentLister) List(selector labels.Selector) (ret []*v1alpha1.ComposerEnvironment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComposerEnvironment))
	})
	return ret, err
}

// ComposerEnvironments returns an object that can list and get ComposerEnvironments.
func (s *composerEnvironmentLister) ComposerEnvironments(namespace string) ComposerEnvironmentNamespaceLister {
	return composerEnvironmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComposerEnvironmentNamespaceLister helps list and get ComposerEnvironments.
type ComposerEnvironmentNamespaceLister interface {
	// List lists all ComposerEnvironments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComposerEnvironment, err error)
	// Get retrieves the ComposerEnvironment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComposerEnvironment, error)
	ComposerEnvironmentNamespaceListerExpansion
}

// composerEnvironmentNamespaceLister implements the ComposerEnvironmentNamespaceLister
// interface.
type composerEnvironmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComposerEnvironments in the indexer for a given namespace.
func (s composerEnvironmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComposerEnvironment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComposerEnvironment))
	})
	return ret, err
}

// Get retrieves the ComposerEnvironment from the indexer for a given namespace and name.
func (s composerEnvironmentNamespaceLister) Get(name string) (*v1alpha1.ComposerEnvironment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("composerenvironment"), name)
	}
	return obj.(*v1alpha1.ComposerEnvironment), nil
}
