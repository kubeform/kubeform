/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// ComputeTargetPoolLister helps list ComputeTargetPools.
type ComputeTargetPoolLister interface {
	// List lists all ComputeTargetPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetPool, err error)
	// ComputeTargetPools returns an object that can list and get ComputeTargetPools.
	ComputeTargetPools(namespace string) ComputeTargetPoolNamespaceLister
	ComputeTargetPoolListerExpansion
}

// computeTargetPoolLister implements the ComputeTargetPoolLister interface.
type computeTargetPoolLister struct {
	indexer cache.Indexer
}

// NewComputeTargetPoolLister returns a new ComputeTargetPoolLister.
func NewComputeTargetPoolLister(indexer cache.Indexer) ComputeTargetPoolLister {
	return &computeTargetPoolLister{indexer: indexer}
}

// List lists all ComputeTargetPools in the indexer.
func (s *computeTargetPoolLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeTargetPool))
	})
	return ret, err
}

// ComputeTargetPools returns an object that can list and get ComputeTargetPools.
func (s *computeTargetPoolLister) ComputeTargetPools(namespace string) ComputeTargetPoolNamespaceLister {
	return computeTargetPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeTargetPoolNamespaceLister helps list and get ComputeTargetPools.
type ComputeTargetPoolNamespaceLister interface {
	// List lists all ComputeTargetPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetPool, err error)
	// Get retrieves the ComputeTargetPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeTargetPool, error)
	ComputeTargetPoolNamespaceListerExpansion
}

// computeTargetPoolNamespaceLister implements the ComputeTargetPoolNamespaceLister
// interface.
type computeTargetPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeTargetPools in the indexer for a given namespace.
func (s computeTargetPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeTargetPool))
	})
	return ret, err
}

// Get retrieves the ComputeTargetPool from the indexer for a given namespace and name.
func (s computeTargetPoolNamespaceLister) Get(name string) (*v1alpha1.ComputeTargetPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computetargetpool"), name)
	}
	return obj.(*v1alpha1.ComputeTargetPool), nil
}
