/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IapWebTypeComputeIamPolicyLister helps list IapWebTypeComputeIamPolicies.
type IapWebTypeComputeIamPolicyLister interface {
	// List lists all IapWebTypeComputeIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamPolicy, err error)
	// IapWebTypeComputeIamPolicies returns an object that can list and get IapWebTypeComputeIamPolicies.
	IapWebTypeComputeIamPolicies(namespace string) IapWebTypeComputeIamPolicyNamespaceLister
	IapWebTypeComputeIamPolicyListerExpansion
}

// iapWebTypeComputeIamPolicyLister implements the IapWebTypeComputeIamPolicyLister interface.
type iapWebTypeComputeIamPolicyLister struct {
	indexer cache.Indexer
}

// NewIapWebTypeComputeIamPolicyLister returns a new IapWebTypeComputeIamPolicyLister.
func NewIapWebTypeComputeIamPolicyLister(indexer cache.Indexer) IapWebTypeComputeIamPolicyLister {
	return &iapWebTypeComputeIamPolicyLister{indexer: indexer}
}

// List lists all IapWebTypeComputeIamPolicies in the indexer.
func (s *iapWebTypeComputeIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IapWebTypeComputeIamPolicy))
	})
	return ret, err
}

// IapWebTypeComputeIamPolicies returns an object that can list and get IapWebTypeComputeIamPolicies.
func (s *iapWebTypeComputeIamPolicyLister) IapWebTypeComputeIamPolicies(namespace string) IapWebTypeComputeIamPolicyNamespaceLister {
	return iapWebTypeComputeIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IapWebTypeComputeIamPolicyNamespaceLister helps list and get IapWebTypeComputeIamPolicies.
type IapWebTypeComputeIamPolicyNamespaceLister interface {
	// List lists all IapWebTypeComputeIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamPolicy, err error)
	// Get retrieves the IapWebTypeComputeIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IapWebTypeComputeIamPolicy, error)
	IapWebTypeComputeIamPolicyNamespaceListerExpansion
}

// iapWebTypeComputeIamPolicyNamespaceLister implements the IapWebTypeComputeIamPolicyNamespaceLister
// interface.
type iapWebTypeComputeIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IapWebTypeComputeIamPolicies in the indexer for a given namespace.
func (s iapWebTypeComputeIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IapWebTypeComputeIamPolicy))
	})
	return ret, err
}

// Get retrieves the IapWebTypeComputeIamPolicy from the indexer for a given namespace and name.
func (s iapWebTypeComputeIamPolicyNamespaceLister) Get(name string) (*v1alpha1.IapWebTypeComputeIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iapwebtypecomputeiampolicy"), name)
	}
	return obj.(*v1alpha1.IapWebTypeComputeIamPolicy), nil
}
