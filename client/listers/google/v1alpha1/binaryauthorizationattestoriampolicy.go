/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BinaryAuthorizationAttestorIamPolicyLister helps list BinaryAuthorizationAttestorIamPolicies.
type BinaryAuthorizationAttestorIamPolicyLister interface {
	// List lists all BinaryAuthorizationAttestorIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamPolicy, err error)
	// BinaryAuthorizationAttestorIamPolicies returns an object that can list and get BinaryAuthorizationAttestorIamPolicies.
	BinaryAuthorizationAttestorIamPolicies(namespace string) BinaryAuthorizationAttestorIamPolicyNamespaceLister
	BinaryAuthorizationAttestorIamPolicyListerExpansion
}

// binaryAuthorizationAttestorIamPolicyLister implements the BinaryAuthorizationAttestorIamPolicyLister interface.
type binaryAuthorizationAttestorIamPolicyLister struct {
	indexer cache.Indexer
}

// NewBinaryAuthorizationAttestorIamPolicyLister returns a new BinaryAuthorizationAttestorIamPolicyLister.
func NewBinaryAuthorizationAttestorIamPolicyLister(indexer cache.Indexer) BinaryAuthorizationAttestorIamPolicyLister {
	return &binaryAuthorizationAttestorIamPolicyLister{indexer: indexer}
}

// List lists all BinaryAuthorizationAttestorIamPolicies in the indexer.
func (s *binaryAuthorizationAttestorIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BinaryAuthorizationAttestorIamPolicy))
	})
	return ret, err
}

// BinaryAuthorizationAttestorIamPolicies returns an object that can list and get BinaryAuthorizationAttestorIamPolicies.
func (s *binaryAuthorizationAttestorIamPolicyLister) BinaryAuthorizationAttestorIamPolicies(namespace string) BinaryAuthorizationAttestorIamPolicyNamespaceLister {
	return binaryAuthorizationAttestorIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BinaryAuthorizationAttestorIamPolicyNamespaceLister helps list and get BinaryAuthorizationAttestorIamPolicies.
type BinaryAuthorizationAttestorIamPolicyNamespaceLister interface {
	// List lists all BinaryAuthorizationAttestorIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamPolicy, err error)
	// Get retrieves the BinaryAuthorizationAttestorIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BinaryAuthorizationAttestorIamPolicy, error)
	BinaryAuthorizationAttestorIamPolicyNamespaceListerExpansion
}

// binaryAuthorizationAttestorIamPolicyNamespaceLister implements the BinaryAuthorizationAttestorIamPolicyNamespaceLister
// interface.
type binaryAuthorizationAttestorIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BinaryAuthorizationAttestorIamPolicies in the indexer for a given namespace.
func (s binaryAuthorizationAttestorIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BinaryAuthorizationAttestorIamPolicy))
	})
	return ret, err
}

// Get retrieves the BinaryAuthorizationAttestorIamPolicy from the indexer for a given namespace and name.
func (s binaryAuthorizationAttestorIamPolicyNamespaceLister) Get(name string) (*v1alpha1.BinaryAuthorizationAttestorIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("binaryauthorizationattestoriampolicy"), name)
	}
	return obj.(*v1alpha1.BinaryAuthorizationAttestorIamPolicy), nil
}
