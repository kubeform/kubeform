/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BinaryAuthorizationAttestorIamBindingLister helps list BinaryAuthorizationAttestorIamBindings.
type BinaryAuthorizationAttestorIamBindingLister interface {
	// List lists all BinaryAuthorizationAttestorIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamBinding, err error)
	// BinaryAuthorizationAttestorIamBindings returns an object that can list and get BinaryAuthorizationAttestorIamBindings.
	BinaryAuthorizationAttestorIamBindings(namespace string) BinaryAuthorizationAttestorIamBindingNamespaceLister
	BinaryAuthorizationAttestorIamBindingListerExpansion
}

// binaryAuthorizationAttestorIamBindingLister implements the BinaryAuthorizationAttestorIamBindingLister interface.
type binaryAuthorizationAttestorIamBindingLister struct {
	indexer cache.Indexer
}

// NewBinaryAuthorizationAttestorIamBindingLister returns a new BinaryAuthorizationAttestorIamBindingLister.
func NewBinaryAuthorizationAttestorIamBindingLister(indexer cache.Indexer) BinaryAuthorizationAttestorIamBindingLister {
	return &binaryAuthorizationAttestorIamBindingLister{indexer: indexer}
}

// List lists all BinaryAuthorizationAttestorIamBindings in the indexer.
func (s *binaryAuthorizationAttestorIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BinaryAuthorizationAttestorIamBinding))
	})
	return ret, err
}

// BinaryAuthorizationAttestorIamBindings returns an object that can list and get BinaryAuthorizationAttestorIamBindings.
func (s *binaryAuthorizationAttestorIamBindingLister) BinaryAuthorizationAttestorIamBindings(namespace string) BinaryAuthorizationAttestorIamBindingNamespaceLister {
	return binaryAuthorizationAttestorIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BinaryAuthorizationAttestorIamBindingNamespaceLister helps list and get BinaryAuthorizationAttestorIamBindings.
type BinaryAuthorizationAttestorIamBindingNamespaceLister interface {
	// List lists all BinaryAuthorizationAttestorIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamBinding, err error)
	// Get retrieves the BinaryAuthorizationAttestorIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BinaryAuthorizationAttestorIamBinding, error)
	BinaryAuthorizationAttestorIamBindingNamespaceListerExpansion
}

// binaryAuthorizationAttestorIamBindingNamespaceLister implements the BinaryAuthorizationAttestorIamBindingNamespaceLister
// interface.
type binaryAuthorizationAttestorIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BinaryAuthorizationAttestorIamBindings in the indexer for a given namespace.
func (s binaryAuthorizationAttestorIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BinaryAuthorizationAttestorIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BinaryAuthorizationAttestorIamBinding))
	})
	return ret, err
}

// Get retrieves the BinaryAuthorizationAttestorIamBinding from the indexer for a given namespace and name.
func (s binaryAuthorizationAttestorIamBindingNamespaceLister) Get(name string) (*v1alpha1.BinaryAuthorizationAttestorIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("binaryauthorizationattestoriambinding"), name)
	}
	return obj.(*v1alpha1.BinaryAuthorizationAttestorIamBinding), nil
}
