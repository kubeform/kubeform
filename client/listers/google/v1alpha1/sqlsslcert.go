/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// SqlSSLCertLister helps list SqlSSLCerts.
type SqlSSLCertLister interface {
	// List lists all SqlSSLCerts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SqlSSLCert, err error)
	// SqlSSLCerts returns an object that can list and get SqlSSLCerts.
	SqlSSLCerts(namespace string) SqlSSLCertNamespaceLister
	SqlSSLCertListerExpansion
}

// sqlSSLCertLister implements the SqlSSLCertLister interface.
type sqlSSLCertLister struct {
	indexer cache.Indexer
}

// NewSqlSSLCertLister returns a new SqlSSLCertLister.
func NewSqlSSLCertLister(indexer cache.Indexer) SqlSSLCertLister {
	return &sqlSSLCertLister{indexer: indexer}
}

// List lists all SqlSSLCerts in the indexer.
func (s *sqlSSLCertLister) List(selector labels.Selector) (ret []*v1alpha1.SqlSSLCert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlSSLCert))
	})
	return ret, err
}

// SqlSSLCerts returns an object that can list and get SqlSSLCerts.
func (s *sqlSSLCertLister) SqlSSLCerts(namespace string) SqlSSLCertNamespaceLister {
	return sqlSSLCertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlSSLCertNamespaceLister helps list and get SqlSSLCerts.
type SqlSSLCertNamespaceLister interface {
	// List lists all SqlSSLCerts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SqlSSLCert, err error)
	// Get retrieves the SqlSSLCert from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SqlSSLCert, error)
	SqlSSLCertNamespaceListerExpansion
}

// sqlSSLCertNamespaceLister implements the SqlSSLCertNamespaceLister
// interface.
type sqlSSLCertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlSSLCerts in the indexer for a given namespace.
func (s sqlSSLCertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlSSLCert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlSSLCert))
	})
	return ret, err
}

// Get retrieves the SqlSSLCert from the indexer for a given namespace and name.
func (s sqlSSLCertNamespaceLister) Get(name string) (*v1alpha1.SqlSSLCert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlsslcert"), name)
	}
	return obj.(*v1alpha1.SqlSSLCert), nil
}
