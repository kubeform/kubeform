/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrganizationIamBindingLister helps list OrganizationIamBindings.
type OrganizationIamBindingLister interface {
	// List lists all OrganizationIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamBinding, err error)
	// OrganizationIamBindings returns an object that can list and get OrganizationIamBindings.
	OrganizationIamBindings(namespace string) OrganizationIamBindingNamespaceLister
	OrganizationIamBindingListerExpansion
}

// organizationIamBindingLister implements the OrganizationIamBindingLister interface.
type organizationIamBindingLister struct {
	indexer cache.Indexer
}

// NewOrganizationIamBindingLister returns a new OrganizationIamBindingLister.
func NewOrganizationIamBindingLister(indexer cache.Indexer) OrganizationIamBindingLister {
	return &organizationIamBindingLister{indexer: indexer}
}

// List lists all OrganizationIamBindings in the indexer.
func (s *organizationIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrganizationIamBinding))
	})
	return ret, err
}

// OrganizationIamBindings returns an object that can list and get OrganizationIamBindings.
func (s *organizationIamBindingLister) OrganizationIamBindings(namespace string) OrganizationIamBindingNamespaceLister {
	return organizationIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OrganizationIamBindingNamespaceLister helps list and get OrganizationIamBindings.
type OrganizationIamBindingNamespaceLister interface {
	// List lists all OrganizationIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamBinding, err error)
	// Get retrieves the OrganizationIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OrganizationIamBinding, error)
	OrganizationIamBindingNamespaceListerExpansion
}

// organizationIamBindingNamespaceLister implements the OrganizationIamBindingNamespaceLister
// interface.
type organizationIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OrganizationIamBindings in the indexer for a given namespace.
func (s organizationIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrganizationIamBinding))
	})
	return ret, err
}

// Get retrieves the OrganizationIamBinding from the indexer for a given namespace and name.
func (s organizationIamBindingNamespaceLister) Get(name string) (*v1alpha1.OrganizationIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("organizationiambinding"), name)
	}
	return obj.(*v1alpha1.OrganizationIamBinding), nil
}
