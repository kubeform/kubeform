/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageBucketACLLister helps list StorageBucketACLs.
type StorageBucketACLLister interface {
	// List lists all StorageBucketACLs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageBucketACL, err error)
	// StorageBucketACLs returns an object that can list and get StorageBucketACLs.
	StorageBucketACLs(namespace string) StorageBucketACLNamespaceLister
	StorageBucketACLListerExpansion
}

// storageBucketACLLister implements the StorageBucketACLLister interface.
type storageBucketACLLister struct {
	indexer cache.Indexer
}

// NewStorageBucketACLLister returns a new StorageBucketACLLister.
func NewStorageBucketACLLister(indexer cache.Indexer) StorageBucketACLLister {
	return &storageBucketACLLister{indexer: indexer}
}

// List lists all StorageBucketACLs in the indexer.
func (s *storageBucketACLLister) List(selector labels.Selector) (ret []*v1alpha1.StorageBucketACL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageBucketACL))
	})
	return ret, err
}

// StorageBucketACLs returns an object that can list and get StorageBucketACLs.
func (s *storageBucketACLLister) StorageBucketACLs(namespace string) StorageBucketACLNamespaceLister {
	return storageBucketACLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageBucketACLNamespaceLister helps list and get StorageBucketACLs.
type StorageBucketACLNamespaceLister interface {
	// List lists all StorageBucketACLs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageBucketACL, err error)
	// Get retrieves the StorageBucketACL from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageBucketACL, error)
	StorageBucketACLNamespaceListerExpansion
}

// storageBucketACLNamespaceLister implements the StorageBucketACLNamespaceLister
// interface.
type storageBucketACLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageBucketACLs in the indexer for a given namespace.
func (s storageBucketACLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageBucketACL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageBucketACL))
	})
	return ret, err
}

// Get retrieves the StorageBucketACL from the indexer for a given namespace and name.
func (s storageBucketACLNamespaceLister) Get(name string) (*v1alpha1.StorageBucketACL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagebucketacl"), name)
	}
	return obj.(*v1alpha1.StorageBucketACL), nil
}
