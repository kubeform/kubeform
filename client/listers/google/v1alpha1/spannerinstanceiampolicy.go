/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// SpannerInstanceIamPolicyLister helps list SpannerInstanceIamPolicies.
type SpannerInstanceIamPolicyLister interface {
	// List lists all SpannerInstanceIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamPolicy, err error)
	// SpannerInstanceIamPolicies returns an object that can list and get SpannerInstanceIamPolicies.
	SpannerInstanceIamPolicies(namespace string) SpannerInstanceIamPolicyNamespaceLister
	SpannerInstanceIamPolicyListerExpansion
}

// spannerInstanceIamPolicyLister implements the SpannerInstanceIamPolicyLister interface.
type spannerInstanceIamPolicyLister struct {
	indexer cache.Indexer
}

// NewSpannerInstanceIamPolicyLister returns a new SpannerInstanceIamPolicyLister.
func NewSpannerInstanceIamPolicyLister(indexer cache.Indexer) SpannerInstanceIamPolicyLister {
	return &spannerInstanceIamPolicyLister{indexer: indexer}
}

// List lists all SpannerInstanceIamPolicies in the indexer.
func (s *spannerInstanceIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerInstanceIamPolicy))
	})
	return ret, err
}

// SpannerInstanceIamPolicies returns an object that can list and get SpannerInstanceIamPolicies.
func (s *spannerInstanceIamPolicyLister) SpannerInstanceIamPolicies(namespace string) SpannerInstanceIamPolicyNamespaceLister {
	return spannerInstanceIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpannerInstanceIamPolicyNamespaceLister helps list and get SpannerInstanceIamPolicies.
type SpannerInstanceIamPolicyNamespaceLister interface {
	// List lists all SpannerInstanceIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamPolicy, err error)
	// Get retrieves the SpannerInstanceIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpannerInstanceIamPolicy, error)
	SpannerInstanceIamPolicyNamespaceListerExpansion
}

// spannerInstanceIamPolicyNamespaceLister implements the SpannerInstanceIamPolicyNamespaceLister
// interface.
type spannerInstanceIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpannerInstanceIamPolicies in the indexer for a given namespace.
func (s spannerInstanceIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerInstanceIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerInstanceIamPolicy))
	})
	return ret, err
}

// Get retrieves the SpannerInstanceIamPolicy from the indexer for a given namespace and name.
func (s spannerInstanceIamPolicyNamespaceLister) Get(name string) (*v1alpha1.SpannerInstanceIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("spannerinstanceiampolicy"), name)
	}
	return obj.(*v1alpha1.SpannerInstanceIamPolicy), nil
}
