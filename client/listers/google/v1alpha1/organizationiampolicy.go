/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrganizationIamPolicyLister helps list OrganizationIamPolicies.
type OrganizationIamPolicyLister interface {
	// List lists all OrganizationIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamPolicy, err error)
	// OrganizationIamPolicies returns an object that can list and get OrganizationIamPolicies.
	OrganizationIamPolicies(namespace string) OrganizationIamPolicyNamespaceLister
	OrganizationIamPolicyListerExpansion
}

// organizationIamPolicyLister implements the OrganizationIamPolicyLister interface.
type organizationIamPolicyLister struct {
	indexer cache.Indexer
}

// NewOrganizationIamPolicyLister returns a new OrganizationIamPolicyLister.
func NewOrganizationIamPolicyLister(indexer cache.Indexer) OrganizationIamPolicyLister {
	return &organizationIamPolicyLister{indexer: indexer}
}

// List lists all OrganizationIamPolicies in the indexer.
func (s *organizationIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrganizationIamPolicy))
	})
	return ret, err
}

// OrganizationIamPolicies returns an object that can list and get OrganizationIamPolicies.
func (s *organizationIamPolicyLister) OrganizationIamPolicies(namespace string) OrganizationIamPolicyNamespaceLister {
	return organizationIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OrganizationIamPolicyNamespaceLister helps list and get OrganizationIamPolicies.
type OrganizationIamPolicyNamespaceLister interface {
	// List lists all OrganizationIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamPolicy, err error)
	// Get retrieves the OrganizationIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OrganizationIamPolicy, error)
	OrganizationIamPolicyNamespaceListerExpansion
}

// organizationIamPolicyNamespaceLister implements the OrganizationIamPolicyNamespaceLister
// interface.
type organizationIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OrganizationIamPolicies in the indexer for a given namespace.
func (s organizationIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OrganizationIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrganizationIamPolicy))
	})
	return ret, err
}

// Get retrieves the OrganizationIamPolicy from the indexer for a given namespace and name.
func (s organizationIamPolicyNamespaceLister) Get(name string) (*v1alpha1.OrganizationIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("organizationiampolicy"), name)
	}
	return obj.(*v1alpha1.OrganizationIamPolicy), nil
}
