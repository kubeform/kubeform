/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// ComputeProjectMetadataItemLister helps list ComputeProjectMetadataItems.
type ComputeProjectMetadataItemLister interface {
	// List lists all ComputeProjectMetadataItems in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeProjectMetadataItem, err error)
	// ComputeProjectMetadataItems returns an object that can list and get ComputeProjectMetadataItems.
	ComputeProjectMetadataItems(namespace string) ComputeProjectMetadataItemNamespaceLister
	ComputeProjectMetadataItemListerExpansion
}

// computeProjectMetadataItemLister implements the ComputeProjectMetadataItemLister interface.
type computeProjectMetadataItemLister struct {
	indexer cache.Indexer
}

// NewComputeProjectMetadataItemLister returns a new ComputeProjectMetadataItemLister.
func NewComputeProjectMetadataItemLister(indexer cache.Indexer) ComputeProjectMetadataItemLister {
	return &computeProjectMetadataItemLister{indexer: indexer}
}

// List lists all ComputeProjectMetadataItems in the indexer.
func (s *computeProjectMetadataItemLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeProjectMetadataItem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeProjectMetadataItem))
	})
	return ret, err
}

// ComputeProjectMetadataItems returns an object that can list and get ComputeProjectMetadataItems.
func (s *computeProjectMetadataItemLister) ComputeProjectMetadataItems(namespace string) ComputeProjectMetadataItemNamespaceLister {
	return computeProjectMetadataItemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeProjectMetadataItemNamespaceLister helps list and get ComputeProjectMetadataItems.
type ComputeProjectMetadataItemNamespaceLister interface {
	// List lists all ComputeProjectMetadataItems in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeProjectMetadataItem, err error)
	// Get retrieves the ComputeProjectMetadataItem from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeProjectMetadataItem, error)
	ComputeProjectMetadataItemNamespaceListerExpansion
}

// computeProjectMetadataItemNamespaceLister implements the ComputeProjectMetadataItemNamespaceLister
// interface.
type computeProjectMetadataItemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeProjectMetadataItems in the indexer for a given namespace.
func (s computeProjectMetadataItemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeProjectMetadataItem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeProjectMetadataItem))
	})
	return ret, err
}

// Get retrieves the ComputeProjectMetadataItem from the indexer for a given namespace and name.
func (s computeProjectMetadataItemNamespaceLister) Get(name string) (*v1alpha1.ComputeProjectMetadataItem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computeprojectmetadataitem"), name)
	}
	return obj.(*v1alpha1.ComputeProjectMetadataItem), nil
}
