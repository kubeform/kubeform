/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BigtableAppProfileLister helps list BigtableAppProfiles.
type BigtableAppProfileLister interface {
	// List lists all BigtableAppProfiles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BigtableAppProfile, err error)
	// BigtableAppProfiles returns an object that can list and get BigtableAppProfiles.
	BigtableAppProfiles(namespace string) BigtableAppProfileNamespaceLister
	BigtableAppProfileListerExpansion
}

// bigtableAppProfileLister implements the BigtableAppProfileLister interface.
type bigtableAppProfileLister struct {
	indexer cache.Indexer
}

// NewBigtableAppProfileLister returns a new BigtableAppProfileLister.
func NewBigtableAppProfileLister(indexer cache.Indexer) BigtableAppProfileLister {
	return &bigtableAppProfileLister{indexer: indexer}
}

// List lists all BigtableAppProfiles in the indexer.
func (s *bigtableAppProfileLister) List(selector labels.Selector) (ret []*v1alpha1.BigtableAppProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BigtableAppProfile))
	})
	return ret, err
}

// BigtableAppProfiles returns an object that can list and get BigtableAppProfiles.
func (s *bigtableAppProfileLister) BigtableAppProfiles(namespace string) BigtableAppProfileNamespaceLister {
	return bigtableAppProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BigtableAppProfileNamespaceLister helps list and get BigtableAppProfiles.
type BigtableAppProfileNamespaceLister interface {
	// List lists all BigtableAppProfiles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BigtableAppProfile, err error)
	// Get retrieves the BigtableAppProfile from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BigtableAppProfile, error)
	BigtableAppProfileNamespaceListerExpansion
}

// bigtableAppProfileNamespaceLister implements the BigtableAppProfileNamespaceLister
// interface.
type bigtableAppProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BigtableAppProfiles in the indexer for a given namespace.
func (s bigtableAppProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BigtableAppProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BigtableAppProfile))
	})
	return ret, err
}

// Get retrieves the BigtableAppProfile from the indexer for a given namespace and name.
func (s bigtableAppProfileNamespaceLister) Get(name string) (*v1alpha1.BigtableAppProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bigtableappprofile"), name)
	}
	return obj.(*v1alpha1.BigtableAppProfile), nil
}
