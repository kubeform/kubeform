/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// FolderOrganizationPolicyLister helps list FolderOrganizationPolicies.
type FolderOrganizationPolicyLister interface {
	// List lists all FolderOrganizationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FolderOrganizationPolicy, err error)
	// FolderOrganizationPolicies returns an object that can list and get FolderOrganizationPolicies.
	FolderOrganizationPolicies(namespace string) FolderOrganizationPolicyNamespaceLister
	FolderOrganizationPolicyListerExpansion
}

// folderOrganizationPolicyLister implements the FolderOrganizationPolicyLister interface.
type folderOrganizationPolicyLister struct {
	indexer cache.Indexer
}

// NewFolderOrganizationPolicyLister returns a new FolderOrganizationPolicyLister.
func NewFolderOrganizationPolicyLister(indexer cache.Indexer) FolderOrganizationPolicyLister {
	return &folderOrganizationPolicyLister{indexer: indexer}
}

// List lists all FolderOrganizationPolicies in the indexer.
func (s *folderOrganizationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.FolderOrganizationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FolderOrganizationPolicy))
	})
	return ret, err
}

// FolderOrganizationPolicies returns an object that can list and get FolderOrganizationPolicies.
func (s *folderOrganizationPolicyLister) FolderOrganizationPolicies(namespace string) FolderOrganizationPolicyNamespaceLister {
	return folderOrganizationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FolderOrganizationPolicyNamespaceLister helps list and get FolderOrganizationPolicies.
type FolderOrganizationPolicyNamespaceLister interface {
	// List lists all FolderOrganizationPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FolderOrganizationPolicy, err error)
	// Get retrieves the FolderOrganizationPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FolderOrganizationPolicy, error)
	FolderOrganizationPolicyNamespaceListerExpansion
}

// folderOrganizationPolicyNamespaceLister implements the FolderOrganizationPolicyNamespaceLister
// interface.
type folderOrganizationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FolderOrganizationPolicies in the indexer for a given namespace.
func (s folderOrganizationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FolderOrganizationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FolderOrganizationPolicy))
	})
	return ret, err
}

// Get retrieves the FolderOrganizationPolicy from the indexer for a given namespace and name.
func (s folderOrganizationPolicyNamespaceLister) Get(name string) (*v1alpha1.FolderOrganizationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("folderorganizationpolicy"), name)
	}
	return obj.(*v1alpha1.FolderOrganizationPolicy), nil
}
