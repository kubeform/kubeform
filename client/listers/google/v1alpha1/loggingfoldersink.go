/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoggingFolderSinkLister helps list LoggingFolderSinks.
type LoggingFolderSinkLister interface {
	// List lists all LoggingFolderSinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingFolderSink, err error)
	// LoggingFolderSinks returns an object that can list and get LoggingFolderSinks.
	LoggingFolderSinks(namespace string) LoggingFolderSinkNamespaceLister
	LoggingFolderSinkListerExpansion
}

// loggingFolderSinkLister implements the LoggingFolderSinkLister interface.
type loggingFolderSinkLister struct {
	indexer cache.Indexer
}

// NewLoggingFolderSinkLister returns a new LoggingFolderSinkLister.
func NewLoggingFolderSinkLister(indexer cache.Indexer) LoggingFolderSinkLister {
	return &loggingFolderSinkLister{indexer: indexer}
}

// List lists all LoggingFolderSinks in the indexer.
func (s *loggingFolderSinkLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingFolderSink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingFolderSink))
	})
	return ret, err
}

// LoggingFolderSinks returns an object that can list and get LoggingFolderSinks.
func (s *loggingFolderSinkLister) LoggingFolderSinks(namespace string) LoggingFolderSinkNamespaceLister {
	return loggingFolderSinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoggingFolderSinkNamespaceLister helps list and get LoggingFolderSinks.
type LoggingFolderSinkNamespaceLister interface {
	// List lists all LoggingFolderSinks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingFolderSink, err error)
	// Get retrieves the LoggingFolderSink from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LoggingFolderSink, error)
	LoggingFolderSinkNamespaceListerExpansion
}

// loggingFolderSinkNamespaceLister implements the LoggingFolderSinkNamespaceLister
// interface.
type loggingFolderSinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoggingFolderSinks in the indexer for a given namespace.
func (s loggingFolderSinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingFolderSink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingFolderSink))
	})
	return ret, err
}

// Get retrieves the LoggingFolderSink from the indexer for a given namespace and name.
func (s loggingFolderSinkNamespaceLister) Get(name string) (*v1alpha1.LoggingFolderSink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loggingfoldersink"), name)
	}
	return obj.(*v1alpha1.LoggingFolderSink), nil
}
