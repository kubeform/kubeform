/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageBucketIamBindingLister helps list StorageBucketIamBindings.
type StorageBucketIamBindingLister interface {
	// List lists all StorageBucketIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageBucketIamBinding, err error)
	// StorageBucketIamBindings returns an object that can list and get StorageBucketIamBindings.
	StorageBucketIamBindings(namespace string) StorageBucketIamBindingNamespaceLister
	StorageBucketIamBindingListerExpansion
}

// storageBucketIamBindingLister implements the StorageBucketIamBindingLister interface.
type storageBucketIamBindingLister struct {
	indexer cache.Indexer
}

// NewStorageBucketIamBindingLister returns a new StorageBucketIamBindingLister.
func NewStorageBucketIamBindingLister(indexer cache.Indexer) StorageBucketIamBindingLister {
	return &storageBucketIamBindingLister{indexer: indexer}
}

// List lists all StorageBucketIamBindings in the indexer.
func (s *storageBucketIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.StorageBucketIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageBucketIamBinding))
	})
	return ret, err
}

// StorageBucketIamBindings returns an object that can list and get StorageBucketIamBindings.
func (s *storageBucketIamBindingLister) StorageBucketIamBindings(namespace string) StorageBucketIamBindingNamespaceLister {
	return storageBucketIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageBucketIamBindingNamespaceLister helps list and get StorageBucketIamBindings.
type StorageBucketIamBindingNamespaceLister interface {
	// List lists all StorageBucketIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageBucketIamBinding, err error)
	// Get retrieves the StorageBucketIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageBucketIamBinding, error)
	StorageBucketIamBindingNamespaceListerExpansion
}

// storageBucketIamBindingNamespaceLister implements the StorageBucketIamBindingNamespaceLister
// interface.
type storageBucketIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageBucketIamBindings in the indexer for a given namespace.
func (s storageBucketIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageBucketIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageBucketIamBinding))
	})
	return ret, err
}

// Get retrieves the StorageBucketIamBinding from the indexer for a given namespace and name.
func (s storageBucketIamBindingNamespaceLister) Get(name string) (*v1alpha1.StorageBucketIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagebucketiambinding"), name)
	}
	return obj.(*v1alpha1.StorageBucketIamBinding), nil
}
