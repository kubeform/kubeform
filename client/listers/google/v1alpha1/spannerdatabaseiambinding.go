/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpannerDatabaseIamBindingLister helps list SpannerDatabaseIamBindings.
type SpannerDatabaseIamBindingLister interface {
	// List lists all SpannerDatabaseIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamBinding, err error)
	// SpannerDatabaseIamBindings returns an object that can list and get SpannerDatabaseIamBindings.
	SpannerDatabaseIamBindings(namespace string) SpannerDatabaseIamBindingNamespaceLister
	SpannerDatabaseIamBindingListerExpansion
}

// spannerDatabaseIamBindingLister implements the SpannerDatabaseIamBindingLister interface.
type spannerDatabaseIamBindingLister struct {
	indexer cache.Indexer
}

// NewSpannerDatabaseIamBindingLister returns a new SpannerDatabaseIamBindingLister.
func NewSpannerDatabaseIamBindingLister(indexer cache.Indexer) SpannerDatabaseIamBindingLister {
	return &spannerDatabaseIamBindingLister{indexer: indexer}
}

// List lists all SpannerDatabaseIamBindings in the indexer.
func (s *spannerDatabaseIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerDatabaseIamBinding))
	})
	return ret, err
}

// SpannerDatabaseIamBindings returns an object that can list and get SpannerDatabaseIamBindings.
func (s *spannerDatabaseIamBindingLister) SpannerDatabaseIamBindings(namespace string) SpannerDatabaseIamBindingNamespaceLister {
	return spannerDatabaseIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpannerDatabaseIamBindingNamespaceLister helps list and get SpannerDatabaseIamBindings.
type SpannerDatabaseIamBindingNamespaceLister interface {
	// List lists all SpannerDatabaseIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamBinding, err error)
	// Get retrieves the SpannerDatabaseIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpannerDatabaseIamBinding, error)
	SpannerDatabaseIamBindingNamespaceListerExpansion
}

// spannerDatabaseIamBindingNamespaceLister implements the SpannerDatabaseIamBindingNamespaceLister
// interface.
type spannerDatabaseIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpannerDatabaseIamBindings in the indexer for a given namespace.
func (s spannerDatabaseIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerDatabaseIamBinding))
	})
	return ret, err
}

// Get retrieves the SpannerDatabaseIamBinding from the indexer for a given namespace and name.
func (s spannerDatabaseIamBindingNamespaceLister) Get(name string) (*v1alpha1.SpannerDatabaseIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("spannerdatabaseiambinding"), name)
	}
	return obj.(*v1alpha1.SpannerDatabaseIamBinding), nil
}
