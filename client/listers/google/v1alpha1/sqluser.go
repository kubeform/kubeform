/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// SqlUserLister helps list SqlUsers.
type SqlUserLister interface {
	// List lists all SqlUsers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SqlUser, err error)
	// SqlUsers returns an object that can list and get SqlUsers.
	SqlUsers(namespace string) SqlUserNamespaceLister
	SqlUserListerExpansion
}

// sqlUserLister implements the SqlUserLister interface.
type sqlUserLister struct {
	indexer cache.Indexer
}

// NewSqlUserLister returns a new SqlUserLister.
func NewSqlUserLister(indexer cache.Indexer) SqlUserLister {
	return &sqlUserLister{indexer: indexer}
}

// List lists all SqlUsers in the indexer.
func (s *sqlUserLister) List(selector labels.Selector) (ret []*v1alpha1.SqlUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlUser))
	})
	return ret, err
}

// SqlUsers returns an object that can list and get SqlUsers.
func (s *sqlUserLister) SqlUsers(namespace string) SqlUserNamespaceLister {
	return sqlUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlUserNamespaceLister helps list and get SqlUsers.
type SqlUserNamespaceLister interface {
	// List lists all SqlUsers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SqlUser, err error)
	// Get retrieves the SqlUser from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SqlUser, error)
	SqlUserNamespaceListerExpansion
}

// sqlUserNamespaceLister implements the SqlUserNamespaceLister
// interface.
type sqlUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlUsers in the indexer for a given namespace.
func (s sqlUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlUser))
	})
	return ret, err
}

// Get retrieves the SqlUser from the indexer for a given namespace and name.
func (s sqlUserNamespaceLister) Get(name string) (*v1alpha1.SqlUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqluser"), name)
	}
	return obj.(*v1alpha1.SqlUser), nil
}
