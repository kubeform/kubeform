/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeInstanceIamPolicyLister helps list ComputeInstanceIamPolicies.
type ComputeInstanceIamPolicyLister interface {
	// List lists all ComputeInstanceIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamPolicy, err error)
	// ComputeInstanceIamPolicies returns an object that can list and get ComputeInstanceIamPolicies.
	ComputeInstanceIamPolicies(namespace string) ComputeInstanceIamPolicyNamespaceLister
	ComputeInstanceIamPolicyListerExpansion
}

// computeInstanceIamPolicyLister implements the ComputeInstanceIamPolicyLister interface.
type computeInstanceIamPolicyLister struct {
	indexer cache.Indexer
}

// NewComputeInstanceIamPolicyLister returns a new ComputeInstanceIamPolicyLister.
func NewComputeInstanceIamPolicyLister(indexer cache.Indexer) ComputeInstanceIamPolicyLister {
	return &computeInstanceIamPolicyLister{indexer: indexer}
}

// List lists all ComputeInstanceIamPolicies in the indexer.
func (s *computeInstanceIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeInstanceIamPolicy))
	})
	return ret, err
}

// ComputeInstanceIamPolicies returns an object that can list and get ComputeInstanceIamPolicies.
func (s *computeInstanceIamPolicyLister) ComputeInstanceIamPolicies(namespace string) ComputeInstanceIamPolicyNamespaceLister {
	return computeInstanceIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeInstanceIamPolicyNamespaceLister helps list and get ComputeInstanceIamPolicies.
type ComputeInstanceIamPolicyNamespaceLister interface {
	// List lists all ComputeInstanceIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamPolicy, err error)
	// Get retrieves the ComputeInstanceIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeInstanceIamPolicy, error)
	ComputeInstanceIamPolicyNamespaceListerExpansion
}

// computeInstanceIamPolicyNamespaceLister implements the ComputeInstanceIamPolicyNamespaceLister
// interface.
type computeInstanceIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeInstanceIamPolicies in the indexer for a given namespace.
func (s computeInstanceIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeInstanceIamPolicy))
	})
	return ret, err
}

// Get retrieves the ComputeInstanceIamPolicy from the indexer for a given namespace and name.
func (s computeInstanceIamPolicyNamespaceLister) Get(name string) (*v1alpha1.ComputeInstanceIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computeinstanceiampolicy"), name)
	}
	return obj.(*v1alpha1.ComputeInstanceIamPolicy), nil
}
