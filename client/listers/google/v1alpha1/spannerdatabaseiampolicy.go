/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpannerDatabaseIamPolicyLister helps list SpannerDatabaseIamPolicies.
type SpannerDatabaseIamPolicyLister interface {
	// List lists all SpannerDatabaseIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamPolicy, err error)
	// SpannerDatabaseIamPolicies returns an object that can list and get SpannerDatabaseIamPolicies.
	SpannerDatabaseIamPolicies(namespace string) SpannerDatabaseIamPolicyNamespaceLister
	SpannerDatabaseIamPolicyListerExpansion
}

// spannerDatabaseIamPolicyLister implements the SpannerDatabaseIamPolicyLister interface.
type spannerDatabaseIamPolicyLister struct {
	indexer cache.Indexer
}

// NewSpannerDatabaseIamPolicyLister returns a new SpannerDatabaseIamPolicyLister.
func NewSpannerDatabaseIamPolicyLister(indexer cache.Indexer) SpannerDatabaseIamPolicyLister {
	return &spannerDatabaseIamPolicyLister{indexer: indexer}
}

// List lists all SpannerDatabaseIamPolicies in the indexer.
func (s *spannerDatabaseIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerDatabaseIamPolicy))
	})
	return ret, err
}

// SpannerDatabaseIamPolicies returns an object that can list and get SpannerDatabaseIamPolicies.
func (s *spannerDatabaseIamPolicyLister) SpannerDatabaseIamPolicies(namespace string) SpannerDatabaseIamPolicyNamespaceLister {
	return spannerDatabaseIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpannerDatabaseIamPolicyNamespaceLister helps list and get SpannerDatabaseIamPolicies.
type SpannerDatabaseIamPolicyNamespaceLister interface {
	// List lists all SpannerDatabaseIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamPolicy, err error)
	// Get retrieves the SpannerDatabaseIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpannerDatabaseIamPolicy, error)
	SpannerDatabaseIamPolicyNamespaceListerExpansion
}

// spannerDatabaseIamPolicyNamespaceLister implements the SpannerDatabaseIamPolicyNamespaceLister
// interface.
type spannerDatabaseIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpannerDatabaseIamPolicies in the indexer for a given namespace.
func (s spannerDatabaseIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabaseIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerDatabaseIamPolicy))
	})
	return ret, err
}

// Get retrieves the SpannerDatabaseIamPolicy from the indexer for a given namespace and name.
func (s spannerDatabaseIamPolicyNamespaceLister) Get(name string) (*v1alpha1.SpannerDatabaseIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("spannerdatabaseiampolicy"), name)
	}
	return obj.(*v1alpha1.SpannerDatabaseIamPolicy), nil
}
