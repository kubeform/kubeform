/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// ComputeRegionInstanceGroupManagerLister helps list ComputeRegionInstanceGroupManagers.
type ComputeRegionInstanceGroupManagerLister interface {
	// List lists all ComputeRegionInstanceGroupManagers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeRegionInstanceGroupManager, err error)
	// ComputeRegionInstanceGroupManagers returns an object that can list and get ComputeRegionInstanceGroupManagers.
	ComputeRegionInstanceGroupManagers(namespace string) ComputeRegionInstanceGroupManagerNamespaceLister
	ComputeRegionInstanceGroupManagerListerExpansion
}

// computeRegionInstanceGroupManagerLister implements the ComputeRegionInstanceGroupManagerLister interface.
type computeRegionInstanceGroupManagerLister struct {
	indexer cache.Indexer
}

// NewComputeRegionInstanceGroupManagerLister returns a new ComputeRegionInstanceGroupManagerLister.
func NewComputeRegionInstanceGroupManagerLister(indexer cache.Indexer) ComputeRegionInstanceGroupManagerLister {
	return &computeRegionInstanceGroupManagerLister{indexer: indexer}
}

// List lists all ComputeRegionInstanceGroupManagers in the indexer.
func (s *computeRegionInstanceGroupManagerLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeRegionInstanceGroupManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeRegionInstanceGroupManager))
	})
	return ret, err
}

// ComputeRegionInstanceGroupManagers returns an object that can list and get ComputeRegionInstanceGroupManagers.
func (s *computeRegionInstanceGroupManagerLister) ComputeRegionInstanceGroupManagers(namespace string) ComputeRegionInstanceGroupManagerNamespaceLister {
	return computeRegionInstanceGroupManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeRegionInstanceGroupManagerNamespaceLister helps list and get ComputeRegionInstanceGroupManagers.
type ComputeRegionInstanceGroupManagerNamespaceLister interface {
	// List lists all ComputeRegionInstanceGroupManagers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeRegionInstanceGroupManager, err error)
	// Get retrieves the ComputeRegionInstanceGroupManager from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeRegionInstanceGroupManager, error)
	ComputeRegionInstanceGroupManagerNamespaceListerExpansion
}

// computeRegionInstanceGroupManagerNamespaceLister implements the ComputeRegionInstanceGroupManagerNamespaceLister
// interface.
type computeRegionInstanceGroupManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeRegionInstanceGroupManagers in the indexer for a given namespace.
func (s computeRegionInstanceGroupManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeRegionInstanceGroupManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeRegionInstanceGroupManager))
	})
	return ret, err
}

// Get retrieves the ComputeRegionInstanceGroupManager from the indexer for a given namespace and name.
func (s computeRegionInstanceGroupManagerNamespaceLister) Get(name string) (*v1alpha1.ComputeRegionInstanceGroupManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computeregioninstancegroupmanager"), name)
	}
	return obj.(*v1alpha1.ComputeRegionInstanceGroupManager), nil
}
