/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IapWebTypeComputeIamBindingLister helps list IapWebTypeComputeIamBindings.
type IapWebTypeComputeIamBindingLister interface {
	// List lists all IapWebTypeComputeIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamBinding, err error)
	// IapWebTypeComputeIamBindings returns an object that can list and get IapWebTypeComputeIamBindings.
	IapWebTypeComputeIamBindings(namespace string) IapWebTypeComputeIamBindingNamespaceLister
	IapWebTypeComputeIamBindingListerExpansion
}

// iapWebTypeComputeIamBindingLister implements the IapWebTypeComputeIamBindingLister interface.
type iapWebTypeComputeIamBindingLister struct {
	indexer cache.Indexer
}

// NewIapWebTypeComputeIamBindingLister returns a new IapWebTypeComputeIamBindingLister.
func NewIapWebTypeComputeIamBindingLister(indexer cache.Indexer) IapWebTypeComputeIamBindingLister {
	return &iapWebTypeComputeIamBindingLister{indexer: indexer}
}

// List lists all IapWebTypeComputeIamBindings in the indexer.
func (s *iapWebTypeComputeIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IapWebTypeComputeIamBinding))
	})
	return ret, err
}

// IapWebTypeComputeIamBindings returns an object that can list and get IapWebTypeComputeIamBindings.
func (s *iapWebTypeComputeIamBindingLister) IapWebTypeComputeIamBindings(namespace string) IapWebTypeComputeIamBindingNamespaceLister {
	return iapWebTypeComputeIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IapWebTypeComputeIamBindingNamespaceLister helps list and get IapWebTypeComputeIamBindings.
type IapWebTypeComputeIamBindingNamespaceLister interface {
	// List lists all IapWebTypeComputeIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamBinding, err error)
	// Get retrieves the IapWebTypeComputeIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IapWebTypeComputeIamBinding, error)
	IapWebTypeComputeIamBindingNamespaceListerExpansion
}

// iapWebTypeComputeIamBindingNamespaceLister implements the IapWebTypeComputeIamBindingNamespaceLister
// interface.
type iapWebTypeComputeIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IapWebTypeComputeIamBindings in the indexer for a given namespace.
func (s iapWebTypeComputeIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IapWebTypeComputeIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IapWebTypeComputeIamBinding))
	})
	return ret, err
}

// Get retrieves the IapWebTypeComputeIamBinding from the indexer for a given namespace and name.
func (s iapWebTypeComputeIamBindingNamespaceLister) Get(name string) (*v1alpha1.IapWebTypeComputeIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iapwebtypecomputeiambinding"), name)
	}
	return obj.(*v1alpha1.IapWebTypeComputeIamBinding), nil
}
