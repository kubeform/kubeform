/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeInstanceFromTemplateLister helps list ComputeInstanceFromTemplates.
type ComputeInstanceFromTemplateLister interface {
	// List lists all ComputeInstanceFromTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceFromTemplate, err error)
	// ComputeInstanceFromTemplates returns an object that can list and get ComputeInstanceFromTemplates.
	ComputeInstanceFromTemplates(namespace string) ComputeInstanceFromTemplateNamespaceLister
	ComputeInstanceFromTemplateListerExpansion
}

// computeInstanceFromTemplateLister implements the ComputeInstanceFromTemplateLister interface.
type computeInstanceFromTemplateLister struct {
	indexer cache.Indexer
}

// NewComputeInstanceFromTemplateLister returns a new ComputeInstanceFromTemplateLister.
func NewComputeInstanceFromTemplateLister(indexer cache.Indexer) ComputeInstanceFromTemplateLister {
	return &computeInstanceFromTemplateLister{indexer: indexer}
}

// List lists all ComputeInstanceFromTemplates in the indexer.
func (s *computeInstanceFromTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceFromTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeInstanceFromTemplate))
	})
	return ret, err
}

// ComputeInstanceFromTemplates returns an object that can list and get ComputeInstanceFromTemplates.
func (s *computeInstanceFromTemplateLister) ComputeInstanceFromTemplates(namespace string) ComputeInstanceFromTemplateNamespaceLister {
	return computeInstanceFromTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeInstanceFromTemplateNamespaceLister helps list and get ComputeInstanceFromTemplates.
type ComputeInstanceFromTemplateNamespaceLister interface {
	// List lists all ComputeInstanceFromTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceFromTemplate, err error)
	// Get retrieves the ComputeInstanceFromTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeInstanceFromTemplate, error)
	ComputeInstanceFromTemplateNamespaceListerExpansion
}

// computeInstanceFromTemplateNamespaceLister implements the ComputeInstanceFromTemplateNamespaceLister
// interface.
type computeInstanceFromTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeInstanceFromTemplates in the indexer for a given namespace.
func (s computeInstanceFromTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceFromTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeInstanceFromTemplate))
	})
	return ret, err
}

// Get retrieves the ComputeInstanceFromTemplate from the indexer for a given namespace and name.
func (s computeInstanceFromTemplateNamespaceLister) Get(name string) (*v1alpha1.ComputeInstanceFromTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computeinstancefromtemplate"), name)
	}
	return obj.(*v1alpha1.ComputeInstanceFromTemplate), nil
}
