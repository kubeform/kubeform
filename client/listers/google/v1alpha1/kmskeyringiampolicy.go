/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KmsKeyRingIamPolicyLister helps list KmsKeyRingIamPolicies.
type KmsKeyRingIamPolicyLister interface {
	// List lists all KmsKeyRingIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamPolicy, err error)
	// KmsKeyRingIamPolicies returns an object that can list and get KmsKeyRingIamPolicies.
	KmsKeyRingIamPolicies(namespace string) KmsKeyRingIamPolicyNamespaceLister
	KmsKeyRingIamPolicyListerExpansion
}

// kmsKeyRingIamPolicyLister implements the KmsKeyRingIamPolicyLister interface.
type kmsKeyRingIamPolicyLister struct {
	indexer cache.Indexer
}

// NewKmsKeyRingIamPolicyLister returns a new KmsKeyRingIamPolicyLister.
func NewKmsKeyRingIamPolicyLister(indexer cache.Indexer) KmsKeyRingIamPolicyLister {
	return &kmsKeyRingIamPolicyLister{indexer: indexer}
}

// List lists all KmsKeyRingIamPolicies in the indexer.
func (s *kmsKeyRingIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KmsKeyRingIamPolicy))
	})
	return ret, err
}

// KmsKeyRingIamPolicies returns an object that can list and get KmsKeyRingIamPolicies.
func (s *kmsKeyRingIamPolicyLister) KmsKeyRingIamPolicies(namespace string) KmsKeyRingIamPolicyNamespaceLister {
	return kmsKeyRingIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KmsKeyRingIamPolicyNamespaceLister helps list and get KmsKeyRingIamPolicies.
type KmsKeyRingIamPolicyNamespaceLister interface {
	// List lists all KmsKeyRingIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamPolicy, err error)
	// Get retrieves the KmsKeyRingIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KmsKeyRingIamPolicy, error)
	KmsKeyRingIamPolicyNamespaceListerExpansion
}

// kmsKeyRingIamPolicyNamespaceLister implements the KmsKeyRingIamPolicyNamespaceLister
// interface.
type kmsKeyRingIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KmsKeyRingIamPolicies in the indexer for a given namespace.
func (s kmsKeyRingIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KmsKeyRingIamPolicy))
	})
	return ret, err
}

// Get retrieves the KmsKeyRingIamPolicy from the indexer for a given namespace and name.
func (s kmsKeyRingIamPolicyNamespaceLister) Get(name string) (*v1alpha1.KmsKeyRingIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kmskeyringiampolicy"), name)
	}
	return obj.(*v1alpha1.KmsKeyRingIamPolicy), nil
}
