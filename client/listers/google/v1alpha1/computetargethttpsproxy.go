/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeTargetHTTPSProxyLister helps list ComputeTargetHTTPSProxies.
type ComputeTargetHTTPSProxyLister interface {
	// List lists all ComputeTargetHTTPSProxies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetHTTPSProxy, err error)
	// ComputeTargetHTTPSProxies returns an object that can list and get ComputeTargetHTTPSProxies.
	ComputeTargetHTTPSProxies(namespace string) ComputeTargetHTTPSProxyNamespaceLister
	ComputeTargetHTTPSProxyListerExpansion
}

// computeTargetHTTPSProxyLister implements the ComputeTargetHTTPSProxyLister interface.
type computeTargetHTTPSProxyLister struct {
	indexer cache.Indexer
}

// NewComputeTargetHTTPSProxyLister returns a new ComputeTargetHTTPSProxyLister.
func NewComputeTargetHTTPSProxyLister(indexer cache.Indexer) ComputeTargetHTTPSProxyLister {
	return &computeTargetHTTPSProxyLister{indexer: indexer}
}

// List lists all ComputeTargetHTTPSProxies in the indexer.
func (s *computeTargetHTTPSProxyLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetHTTPSProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeTargetHTTPSProxy))
	})
	return ret, err
}

// ComputeTargetHTTPSProxies returns an object that can list and get ComputeTargetHTTPSProxies.
func (s *computeTargetHTTPSProxyLister) ComputeTargetHTTPSProxies(namespace string) ComputeTargetHTTPSProxyNamespaceLister {
	return computeTargetHTTPSProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeTargetHTTPSProxyNamespaceLister helps list and get ComputeTargetHTTPSProxies.
type ComputeTargetHTTPSProxyNamespaceLister interface {
	// List lists all ComputeTargetHTTPSProxies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetHTTPSProxy, err error)
	// Get retrieves the ComputeTargetHTTPSProxy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeTargetHTTPSProxy, error)
	ComputeTargetHTTPSProxyNamespaceListerExpansion
}

// computeTargetHTTPSProxyNamespaceLister implements the ComputeTargetHTTPSProxyNamespaceLister
// interface.
type computeTargetHTTPSProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeTargetHTTPSProxies in the indexer for a given namespace.
func (s computeTargetHTTPSProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetHTTPSProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeTargetHTTPSProxy))
	})
	return ret, err
}

// Get retrieves the ComputeTargetHTTPSProxy from the indexer for a given namespace and name.
func (s computeTargetHTTPSProxyNamespaceLister) Get(name string) (*v1alpha1.ComputeTargetHTTPSProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computetargethttpsproxy"), name)
	}
	return obj.(*v1alpha1.ComputeTargetHTTPSProxy), nil
}
