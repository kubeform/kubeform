/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeInstanceIamMemberLister helps list ComputeInstanceIamMembers.
type ComputeInstanceIamMemberLister interface {
	// List lists all ComputeInstanceIamMembers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamMember, err error)
	// ComputeInstanceIamMembers returns an object that can list and get ComputeInstanceIamMembers.
	ComputeInstanceIamMembers(namespace string) ComputeInstanceIamMemberNamespaceLister
	ComputeInstanceIamMemberListerExpansion
}

// computeInstanceIamMemberLister implements the ComputeInstanceIamMemberLister interface.
type computeInstanceIamMemberLister struct {
	indexer cache.Indexer
}

// NewComputeInstanceIamMemberLister returns a new ComputeInstanceIamMemberLister.
func NewComputeInstanceIamMemberLister(indexer cache.Indexer) ComputeInstanceIamMemberLister {
	return &computeInstanceIamMemberLister{indexer: indexer}
}

// List lists all ComputeInstanceIamMembers in the indexer.
func (s *computeInstanceIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeInstanceIamMember))
	})
	return ret, err
}

// ComputeInstanceIamMembers returns an object that can list and get ComputeInstanceIamMembers.
func (s *computeInstanceIamMemberLister) ComputeInstanceIamMembers(namespace string) ComputeInstanceIamMemberNamespaceLister {
	return computeInstanceIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeInstanceIamMemberNamespaceLister helps list and get ComputeInstanceIamMembers.
type ComputeInstanceIamMemberNamespaceLister interface {
	// List lists all ComputeInstanceIamMembers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamMember, err error)
	// Get retrieves the ComputeInstanceIamMember from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeInstanceIamMember, error)
	ComputeInstanceIamMemberNamespaceListerExpansion
}

// computeInstanceIamMemberNamespaceLister implements the ComputeInstanceIamMemberNamespaceLister
// interface.
type computeInstanceIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeInstanceIamMembers in the indexer for a given namespace.
func (s computeInstanceIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeInstanceIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeInstanceIamMember))
	})
	return ret, err
}

// Get retrieves the ComputeInstanceIamMember from the indexer for a given namespace and name.
func (s computeInstanceIamMemberNamespaceLister) Get(name string) (*v1alpha1.ComputeInstanceIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computeinstanceiammember"), name)
	}
	return obj.(*v1alpha1.ComputeInstanceIamMember), nil
}
