/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// GoogleSpannerDatabaseLister helps list GoogleSpannerDatabases.
type GoogleSpannerDatabaseLister interface {
	// List lists all GoogleSpannerDatabases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleSpannerDatabase, err error)
	// Get retrieves the GoogleSpannerDatabase from the index for a given name.
	Get(name string) (*v1alpha1.GoogleSpannerDatabase, error)
	GoogleSpannerDatabaseListerExpansion
}

// googleSpannerDatabaseLister implements the GoogleSpannerDatabaseLister interface.
type googleSpannerDatabaseLister struct {
	indexer cache.Indexer
}

// NewGoogleSpannerDatabaseLister returns a new GoogleSpannerDatabaseLister.
func NewGoogleSpannerDatabaseLister(indexer cache.Indexer) GoogleSpannerDatabaseLister {
	return &googleSpannerDatabaseLister{indexer: indexer}
}

// List lists all GoogleSpannerDatabases in the indexer.
func (s *googleSpannerDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleSpannerDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleSpannerDatabase))
	})
	return ret, err
}

// Get retrieves the GoogleSpannerDatabase from the index for a given name.
func (s *googleSpannerDatabaseLister) Get(name string) (*v1alpha1.GoogleSpannerDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlespannerdatabase"), name)
	}
	return obj.(*v1alpha1.GoogleSpannerDatabase), nil
}
