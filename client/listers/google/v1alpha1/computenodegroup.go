/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeNodeGroupLister helps list ComputeNodeGroups.
type ComputeNodeGroupLister interface {
	// List lists all ComputeNodeGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeGroup, err error)
	// ComputeNodeGroups returns an object that can list and get ComputeNodeGroups.
	ComputeNodeGroups(namespace string) ComputeNodeGroupNamespaceLister
	ComputeNodeGroupListerExpansion
}

// computeNodeGroupLister implements the ComputeNodeGroupLister interface.
type computeNodeGroupLister struct {
	indexer cache.Indexer
}

// NewComputeNodeGroupLister returns a new ComputeNodeGroupLister.
func NewComputeNodeGroupLister(indexer cache.Indexer) ComputeNodeGroupLister {
	return &computeNodeGroupLister{indexer: indexer}
}

// List lists all ComputeNodeGroups in the indexer.
func (s *computeNodeGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeNodeGroup))
	})
	return ret, err
}

// ComputeNodeGroups returns an object that can list and get ComputeNodeGroups.
func (s *computeNodeGroupLister) ComputeNodeGroups(namespace string) ComputeNodeGroupNamespaceLister {
	return computeNodeGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeNodeGroupNamespaceLister helps list and get ComputeNodeGroups.
type ComputeNodeGroupNamespaceLister interface {
	// List lists all ComputeNodeGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeGroup, err error)
	// Get retrieves the ComputeNodeGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeNodeGroup, error)
	ComputeNodeGroupNamespaceListerExpansion
}

// computeNodeGroupNamespaceLister implements the ComputeNodeGroupNamespaceLister
// interface.
type computeNodeGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeNodeGroups in the indexer for a given namespace.
func (s computeNodeGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeNodeGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeNodeGroup))
	})
	return ret, err
}

// Get retrieves the ComputeNodeGroup from the indexer for a given namespace and name.
func (s computeNodeGroupNamespaceLister) Get(name string) (*v1alpha1.ComputeNodeGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computenodegroup"), name)
	}
	return obj.(*v1alpha1.ComputeNodeGroup), nil
}
