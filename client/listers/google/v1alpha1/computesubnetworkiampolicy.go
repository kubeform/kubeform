/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// ComputeSubnetworkIamPolicyLister helps list ComputeSubnetworkIamPolicies.
type ComputeSubnetworkIamPolicyLister interface {
	// List lists all ComputeSubnetworkIamPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeSubnetworkIamPolicy, err error)
	// ComputeSubnetworkIamPolicies returns an object that can list and get ComputeSubnetworkIamPolicies.
	ComputeSubnetworkIamPolicies(namespace string) ComputeSubnetworkIamPolicyNamespaceLister
	ComputeSubnetworkIamPolicyListerExpansion
}

// computeSubnetworkIamPolicyLister implements the ComputeSubnetworkIamPolicyLister interface.
type computeSubnetworkIamPolicyLister struct {
	indexer cache.Indexer
}

// NewComputeSubnetworkIamPolicyLister returns a new ComputeSubnetworkIamPolicyLister.
func NewComputeSubnetworkIamPolicyLister(indexer cache.Indexer) ComputeSubnetworkIamPolicyLister {
	return &computeSubnetworkIamPolicyLister{indexer: indexer}
}

// List lists all ComputeSubnetworkIamPolicies in the indexer.
func (s *computeSubnetworkIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeSubnetworkIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeSubnetworkIamPolicy))
	})
	return ret, err
}

// ComputeSubnetworkIamPolicies returns an object that can list and get ComputeSubnetworkIamPolicies.
func (s *computeSubnetworkIamPolicyLister) ComputeSubnetworkIamPolicies(namespace string) ComputeSubnetworkIamPolicyNamespaceLister {
	return computeSubnetworkIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeSubnetworkIamPolicyNamespaceLister helps list and get ComputeSubnetworkIamPolicies.
type ComputeSubnetworkIamPolicyNamespaceLister interface {
	// List lists all ComputeSubnetworkIamPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeSubnetworkIamPolicy, err error)
	// Get retrieves the ComputeSubnetworkIamPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeSubnetworkIamPolicy, error)
	ComputeSubnetworkIamPolicyNamespaceListerExpansion
}

// computeSubnetworkIamPolicyNamespaceLister implements the ComputeSubnetworkIamPolicyNamespaceLister
// interface.
type computeSubnetworkIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeSubnetworkIamPolicies in the indexer for a given namespace.
func (s computeSubnetworkIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeSubnetworkIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeSubnetworkIamPolicy))
	})
	return ret, err
}

// Get retrieves the ComputeSubnetworkIamPolicy from the indexer for a given namespace and name.
func (s computeSubnetworkIamPolicyNamespaceLister) Get(name string) (*v1alpha1.ComputeSubnetworkIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computesubnetworkiampolicy"), name)
	}
	return obj.(*v1alpha1.ComputeSubnetworkIamPolicy), nil
}
