/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageObjectAccessControlLister helps list StorageObjectAccessControls.
type StorageObjectAccessControlLister interface {
	// List lists all StorageObjectAccessControls in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageObjectAccessControl, err error)
	// StorageObjectAccessControls returns an object that can list and get StorageObjectAccessControls.
	StorageObjectAccessControls(namespace string) StorageObjectAccessControlNamespaceLister
	StorageObjectAccessControlListerExpansion
}

// storageObjectAccessControlLister implements the StorageObjectAccessControlLister interface.
type storageObjectAccessControlLister struct {
	indexer cache.Indexer
}

// NewStorageObjectAccessControlLister returns a new StorageObjectAccessControlLister.
func NewStorageObjectAccessControlLister(indexer cache.Indexer) StorageObjectAccessControlLister {
	return &storageObjectAccessControlLister{indexer: indexer}
}

// List lists all StorageObjectAccessControls in the indexer.
func (s *storageObjectAccessControlLister) List(selector labels.Selector) (ret []*v1alpha1.StorageObjectAccessControl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageObjectAccessControl))
	})
	return ret, err
}

// StorageObjectAccessControls returns an object that can list and get StorageObjectAccessControls.
func (s *storageObjectAccessControlLister) StorageObjectAccessControls(namespace string) StorageObjectAccessControlNamespaceLister {
	return storageObjectAccessControlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageObjectAccessControlNamespaceLister helps list and get StorageObjectAccessControls.
type StorageObjectAccessControlNamespaceLister interface {
	// List lists all StorageObjectAccessControls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageObjectAccessControl, err error)
	// Get retrieves the StorageObjectAccessControl from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageObjectAccessControl, error)
	StorageObjectAccessControlNamespaceListerExpansion
}

// storageObjectAccessControlNamespaceLister implements the StorageObjectAccessControlNamespaceLister
// interface.
type storageObjectAccessControlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageObjectAccessControls in the indexer for a given namespace.
func (s storageObjectAccessControlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageObjectAccessControl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageObjectAccessControl))
	})
	return ret, err
}

// Get retrieves the StorageObjectAccessControl from the indexer for a given namespace and name.
func (s storageObjectAccessControlNamespaceLister) Get(name string) (*v1alpha1.StorageObjectAccessControl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storageobjectaccesscontrol"), name)
	}
	return obj.(*v1alpha1.StorageObjectAccessControl), nil
}
