/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KmsKeyRingIamBindingLister helps list KmsKeyRingIamBindings.
type KmsKeyRingIamBindingLister interface {
	// List lists all KmsKeyRingIamBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamBinding, err error)
	// KmsKeyRingIamBindings returns an object that can list and get KmsKeyRingIamBindings.
	KmsKeyRingIamBindings(namespace string) KmsKeyRingIamBindingNamespaceLister
	KmsKeyRingIamBindingListerExpansion
}

// kmsKeyRingIamBindingLister implements the KmsKeyRingIamBindingLister interface.
type kmsKeyRingIamBindingLister struct {
	indexer cache.Indexer
}

// NewKmsKeyRingIamBindingLister returns a new KmsKeyRingIamBindingLister.
func NewKmsKeyRingIamBindingLister(indexer cache.Indexer) KmsKeyRingIamBindingLister {
	return &kmsKeyRingIamBindingLister{indexer: indexer}
}

// List lists all KmsKeyRingIamBindings in the indexer.
func (s *kmsKeyRingIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KmsKeyRingIamBinding))
	})
	return ret, err
}

// KmsKeyRingIamBindings returns an object that can list and get KmsKeyRingIamBindings.
func (s *kmsKeyRingIamBindingLister) KmsKeyRingIamBindings(namespace string) KmsKeyRingIamBindingNamespaceLister {
	return kmsKeyRingIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KmsKeyRingIamBindingNamespaceLister helps list and get KmsKeyRingIamBindings.
type KmsKeyRingIamBindingNamespaceLister interface {
	// List lists all KmsKeyRingIamBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamBinding, err error)
	// Get retrieves the KmsKeyRingIamBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KmsKeyRingIamBinding, error)
	KmsKeyRingIamBindingNamespaceListerExpansion
}

// kmsKeyRingIamBindingNamespaceLister implements the KmsKeyRingIamBindingNamespaceLister
// interface.
type kmsKeyRingIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KmsKeyRingIamBindings in the indexer for a given namespace.
func (s kmsKeyRingIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KmsKeyRingIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KmsKeyRingIamBinding))
	})
	return ret, err
}

// Get retrieves the KmsKeyRingIamBinding from the indexer for a given namespace and name.
func (s kmsKeyRingIamBindingNamespaceLister) Get(name string) (*v1alpha1.KmsKeyRingIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kmskeyringiambinding"), name)
	}
	return obj.(*v1alpha1.KmsKeyRingIamBinding), nil
}
