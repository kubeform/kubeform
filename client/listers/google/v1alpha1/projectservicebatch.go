/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectServiceBatchLister helps list ProjectServiceBatches.
type ProjectServiceBatchLister interface {
	// List lists all ProjectServiceBatches in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectServiceBatch, err error)
	// ProjectServiceBatches returns an object that can list and get ProjectServiceBatches.
	ProjectServiceBatches(namespace string) ProjectServiceBatchNamespaceLister
	ProjectServiceBatchListerExpansion
}

// projectServiceBatchLister implements the ProjectServiceBatchLister interface.
type projectServiceBatchLister struct {
	indexer cache.Indexer
}

// NewProjectServiceBatchLister returns a new ProjectServiceBatchLister.
func NewProjectServiceBatchLister(indexer cache.Indexer) ProjectServiceBatchLister {
	return &projectServiceBatchLister{indexer: indexer}
}

// List lists all ProjectServiceBatches in the indexer.
func (s *projectServiceBatchLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectServiceBatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectServiceBatch))
	})
	return ret, err
}

// ProjectServiceBatches returns an object that can list and get ProjectServiceBatches.
func (s *projectServiceBatchLister) ProjectServiceBatches(namespace string) ProjectServiceBatchNamespaceLister {
	return projectServiceBatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectServiceBatchNamespaceLister helps list and get ProjectServiceBatches.
type ProjectServiceBatchNamespaceLister interface {
	// List lists all ProjectServiceBatches in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectServiceBatch, err error)
	// Get retrieves the ProjectServiceBatch from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ProjectServiceBatch, error)
	ProjectServiceBatchNamespaceListerExpansion
}

// projectServiceBatchNamespaceLister implements the ProjectServiceBatchNamespaceLister
// interface.
type projectServiceBatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectServiceBatches in the indexer for a given namespace.
func (s projectServiceBatchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectServiceBatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectServiceBatch))
	})
	return ret, err
}

// Get retrieves the ProjectServiceBatch from the indexer for a given namespace and name.
func (s projectServiceBatchNamespaceLister) Get(name string) (*v1alpha1.ProjectServiceBatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectservicebatch"), name)
	}
	return obj.(*v1alpha1.ProjectServiceBatch), nil
}
