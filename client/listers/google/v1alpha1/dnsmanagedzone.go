/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsManagedZoneLister helps list DnsManagedZones.
type DnsManagedZoneLister interface {
	// List lists all DnsManagedZones in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DnsManagedZone, err error)
	// DnsManagedZones returns an object that can list and get DnsManagedZones.
	DnsManagedZones(namespace string) DnsManagedZoneNamespaceLister
	DnsManagedZoneListerExpansion
}

// dnsManagedZoneLister implements the DnsManagedZoneLister interface.
type dnsManagedZoneLister struct {
	indexer cache.Indexer
}

// NewDnsManagedZoneLister returns a new DnsManagedZoneLister.
func NewDnsManagedZoneLister(indexer cache.Indexer) DnsManagedZoneLister {
	return &dnsManagedZoneLister{indexer: indexer}
}

// List lists all DnsManagedZones in the indexer.
func (s *dnsManagedZoneLister) List(selector labels.Selector) (ret []*v1alpha1.DnsManagedZone, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsManagedZone))
	})
	return ret, err
}

// DnsManagedZones returns an object that can list and get DnsManagedZones.
func (s *dnsManagedZoneLister) DnsManagedZones(namespace string) DnsManagedZoneNamespaceLister {
	return dnsManagedZoneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsManagedZoneNamespaceLister helps list and get DnsManagedZones.
type DnsManagedZoneNamespaceLister interface {
	// List lists all DnsManagedZones in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DnsManagedZone, err error)
	// Get retrieves the DnsManagedZone from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DnsManagedZone, error)
	DnsManagedZoneNamespaceListerExpansion
}

// dnsManagedZoneNamespaceLister implements the DnsManagedZoneNamespaceLister
// interface.
type dnsManagedZoneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsManagedZones in the indexer for a given namespace.
func (s dnsManagedZoneNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DnsManagedZone, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsManagedZone))
	})
	return ret, err
}

// Get retrieves the DnsManagedZone from the indexer for a given namespace and name.
func (s dnsManagedZoneNamespaceLister) Get(name string) (*v1alpha1.DnsManagedZone, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnsmanagedzone"), name)
	}
	return obj.(*v1alpha1.DnsManagedZone), nil
}
