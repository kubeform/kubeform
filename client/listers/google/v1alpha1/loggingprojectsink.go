/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoggingProjectSinkLister helps list LoggingProjectSinks.
type LoggingProjectSinkLister interface {
	// List lists all LoggingProjectSinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectSink, err error)
	// LoggingProjectSinks returns an object that can list and get LoggingProjectSinks.
	LoggingProjectSinks(namespace string) LoggingProjectSinkNamespaceLister
	LoggingProjectSinkListerExpansion
}

// loggingProjectSinkLister implements the LoggingProjectSinkLister interface.
type loggingProjectSinkLister struct {
	indexer cache.Indexer
}

// NewLoggingProjectSinkLister returns a new LoggingProjectSinkLister.
func NewLoggingProjectSinkLister(indexer cache.Indexer) LoggingProjectSinkLister {
	return &loggingProjectSinkLister{indexer: indexer}
}

// List lists all LoggingProjectSinks in the indexer.
func (s *loggingProjectSinkLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectSink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingProjectSink))
	})
	return ret, err
}

// LoggingProjectSinks returns an object that can list and get LoggingProjectSinks.
func (s *loggingProjectSinkLister) LoggingProjectSinks(namespace string) LoggingProjectSinkNamespaceLister {
	return loggingProjectSinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoggingProjectSinkNamespaceLister helps list and get LoggingProjectSinks.
type LoggingProjectSinkNamespaceLister interface {
	// List lists all LoggingProjectSinks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectSink, err error)
	// Get retrieves the LoggingProjectSink from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LoggingProjectSink, error)
	LoggingProjectSinkNamespaceListerExpansion
}

// loggingProjectSinkNamespaceLister implements the LoggingProjectSinkNamespaceLister
// interface.
type loggingProjectSinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoggingProjectSinks in the indexer for a given namespace.
func (s loggingProjectSinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingProjectSink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingProjectSink))
	})
	return ret, err
}

// Get retrieves the LoggingProjectSink from the indexer for a given namespace and name.
func (s loggingProjectSinkNamespaceLister) Get(name string) (*v1alpha1.LoggingProjectSink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loggingprojectsink"), name)
	}
	return obj.(*v1alpha1.LoggingProjectSink), nil
}
