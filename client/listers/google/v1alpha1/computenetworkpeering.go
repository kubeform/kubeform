/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeNetworkPeeringLister helps list ComputeNetworkPeerings.
type ComputeNetworkPeeringLister interface {
	// List lists all ComputeNetworkPeerings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeNetworkPeering, err error)
	// ComputeNetworkPeerings returns an object that can list and get ComputeNetworkPeerings.
	ComputeNetworkPeerings(namespace string) ComputeNetworkPeeringNamespaceLister
	ComputeNetworkPeeringListerExpansion
}

// computeNetworkPeeringLister implements the ComputeNetworkPeeringLister interface.
type computeNetworkPeeringLister struct {
	indexer cache.Indexer
}

// NewComputeNetworkPeeringLister returns a new ComputeNetworkPeeringLister.
func NewComputeNetworkPeeringLister(indexer cache.Indexer) ComputeNetworkPeeringLister {
	return &computeNetworkPeeringLister{indexer: indexer}
}

// List lists all ComputeNetworkPeerings in the indexer.
func (s *computeNetworkPeeringLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeNetworkPeering, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeNetworkPeering))
	})
	return ret, err
}

// ComputeNetworkPeerings returns an object that can list and get ComputeNetworkPeerings.
func (s *computeNetworkPeeringLister) ComputeNetworkPeerings(namespace string) ComputeNetworkPeeringNamespaceLister {
	return computeNetworkPeeringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeNetworkPeeringNamespaceLister helps list and get ComputeNetworkPeerings.
type ComputeNetworkPeeringNamespaceLister interface {
	// List lists all ComputeNetworkPeerings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeNetworkPeering, err error)
	// Get retrieves the ComputeNetworkPeering from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeNetworkPeering, error)
	ComputeNetworkPeeringNamespaceListerExpansion
}

// computeNetworkPeeringNamespaceLister implements the ComputeNetworkPeeringNamespaceLister
// interface.
type computeNetworkPeeringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeNetworkPeerings in the indexer for a given namespace.
func (s computeNetworkPeeringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeNetworkPeering, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeNetworkPeering))
	})
	return ret, err
}

// Get retrieves the ComputeNetworkPeering from the indexer for a given namespace and name.
func (s computeNetworkPeeringNamespaceLister) Get(name string) (*v1alpha1.ComputeNetworkPeering, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computenetworkpeering"), name)
	}
	return obj.(*v1alpha1.ComputeNetworkPeering), nil
}
