/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeTargetInstanceLister helps list ComputeTargetInstances.
type ComputeTargetInstanceLister interface {
	// List lists all ComputeTargetInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetInstance, err error)
	// ComputeTargetInstances returns an object that can list and get ComputeTargetInstances.
	ComputeTargetInstances(namespace string) ComputeTargetInstanceNamespaceLister
	ComputeTargetInstanceListerExpansion
}

// computeTargetInstanceLister implements the ComputeTargetInstanceLister interface.
type computeTargetInstanceLister struct {
	indexer cache.Indexer
}

// NewComputeTargetInstanceLister returns a new ComputeTargetInstanceLister.
func NewComputeTargetInstanceLister(indexer cache.Indexer) ComputeTargetInstanceLister {
	return &computeTargetInstanceLister{indexer: indexer}
}

// List lists all ComputeTargetInstances in the indexer.
func (s *computeTargetInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeTargetInstance))
	})
	return ret, err
}

// ComputeTargetInstances returns an object that can list and get ComputeTargetInstances.
func (s *computeTargetInstanceLister) ComputeTargetInstances(namespace string) ComputeTargetInstanceNamespaceLister {
	return computeTargetInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeTargetInstanceNamespaceLister helps list and get ComputeTargetInstances.
type ComputeTargetInstanceNamespaceLister interface {
	// List lists all ComputeTargetInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetInstance, err error)
	// Get retrieves the ComputeTargetInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeTargetInstance, error)
	ComputeTargetInstanceNamespaceListerExpansion
}

// computeTargetInstanceNamespaceLister implements the ComputeTargetInstanceNamespaceLister
// interface.
type computeTargetInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeTargetInstances in the indexer for a given namespace.
func (s computeTargetInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeTargetInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeTargetInstance))
	})
	return ret, err
}

// Get retrieves the ComputeTargetInstance from the indexer for a given namespace and name.
func (s computeTargetInstanceNamespaceLister) Get(name string) (*v1alpha1.ComputeTargetInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computetargetinstance"), name)
	}
	return obj.(*v1alpha1.ComputeTargetInstance), nil
}
