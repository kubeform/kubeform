/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/linode/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LkeClusterLister helps list LkeClusters.
type LkeClusterLister interface {
	// List lists all LkeClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LkeCluster, err error)
	// LkeClusters returns an object that can list and get LkeClusters.
	LkeClusters(namespace string) LkeClusterNamespaceLister
	LkeClusterListerExpansion
}

// lkeClusterLister implements the LkeClusterLister interface.
type lkeClusterLister struct {
	indexer cache.Indexer
}

// NewLkeClusterLister returns a new LkeClusterLister.
func NewLkeClusterLister(indexer cache.Indexer) LkeClusterLister {
	return &lkeClusterLister{indexer: indexer}
}

// List lists all LkeClusters in the indexer.
func (s *lkeClusterLister) List(selector labels.Selector) (ret []*v1alpha1.LkeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LkeCluster))
	})
	return ret, err
}

// LkeClusters returns an object that can list and get LkeClusters.
func (s *lkeClusterLister) LkeClusters(namespace string) LkeClusterNamespaceLister {
	return lkeClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LkeClusterNamespaceLister helps list and get LkeClusters.
type LkeClusterNamespaceLister interface {
	// List lists all LkeClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LkeCluster, err error)
	// Get retrieves the LkeCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LkeCluster, error)
	LkeClusterNamespaceListerExpansion
}

// lkeClusterNamespaceLister implements the LkeClusterNamespaceLister
// interface.
type lkeClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LkeClusters in the indexer for a given namespace.
func (s lkeClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LkeCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LkeCluster))
	})
	return ret, err
}

// Get retrieves the LkeCluster from the indexer for a given namespace and name.
func (s lkeClusterNamespaceLister) Get(name string) (*v1alpha1.LkeCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lkecluster"), name)
	}
	return obj.(*v1alpha1.LkeCluster), nil
}
