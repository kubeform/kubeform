/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/linode/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodebalancerConfigLister helps list NodebalancerConfigs.
type NodebalancerConfigLister interface {
	// List lists all NodebalancerConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NodebalancerConfig, err error)
	// NodebalancerConfigs returns an object that can list and get NodebalancerConfigs.
	NodebalancerConfigs(namespace string) NodebalancerConfigNamespaceLister
	NodebalancerConfigListerExpansion
}

// nodebalancerConfigLister implements the NodebalancerConfigLister interface.
type nodebalancerConfigLister struct {
	indexer cache.Indexer
}

// NewNodebalancerConfigLister returns a new NodebalancerConfigLister.
func NewNodebalancerConfigLister(indexer cache.Indexer) NodebalancerConfigLister {
	return &nodebalancerConfigLister{indexer: indexer}
}

// List lists all NodebalancerConfigs in the indexer.
func (s *nodebalancerConfigLister) List(selector labels.Selector) (ret []*v1alpha1.NodebalancerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodebalancerConfig))
	})
	return ret, err
}

// NodebalancerConfigs returns an object that can list and get NodebalancerConfigs.
func (s *nodebalancerConfigLister) NodebalancerConfigs(namespace string) NodebalancerConfigNamespaceLister {
	return nodebalancerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodebalancerConfigNamespaceLister helps list and get NodebalancerConfigs.
type NodebalancerConfigNamespaceLister interface {
	// List lists all NodebalancerConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NodebalancerConfig, err error)
	// Get retrieves the NodebalancerConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NodebalancerConfig, error)
	NodebalancerConfigNamespaceListerExpansion
}

// nodebalancerConfigNamespaceLister implements the NodebalancerConfigNamespaceLister
// interface.
type nodebalancerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodebalancerConfigs in the indexer for a given namespace.
func (s nodebalancerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodebalancerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodebalancerConfig))
	})
	return ret, err
}

// Get retrieves the NodebalancerConfig from the indexer for a given namespace and name.
func (s nodebalancerConfigNamespaceLister) Get(name string) (*v1alpha1.NodebalancerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodebalancerconfig"), name)
	}
	return obj.(*v1alpha1.NodebalancerConfig), nil
}
