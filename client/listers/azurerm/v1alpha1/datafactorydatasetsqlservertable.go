/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// DataFactoryDatasetSQLServerTableLister helps list DataFactoryDatasetSQLServerTables.
type DataFactoryDatasetSQLServerTableLister interface {
	// List lists all DataFactoryDatasetSQLServerTables in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetSQLServerTable, err error)
	// DataFactoryDatasetSQLServerTables returns an object that can list and get DataFactoryDatasetSQLServerTables.
	DataFactoryDatasetSQLServerTables(namespace string) DataFactoryDatasetSQLServerTableNamespaceLister
	DataFactoryDatasetSQLServerTableListerExpansion
}

// dataFactoryDatasetSQLServerTableLister implements the DataFactoryDatasetSQLServerTableLister interface.
type dataFactoryDatasetSQLServerTableLister struct {
	indexer cache.Indexer
}

// NewDataFactoryDatasetSQLServerTableLister returns a new DataFactoryDatasetSQLServerTableLister.
func NewDataFactoryDatasetSQLServerTableLister(indexer cache.Indexer) DataFactoryDatasetSQLServerTableLister {
	return &dataFactoryDatasetSQLServerTableLister{indexer: indexer}
}

// List lists all DataFactoryDatasetSQLServerTables in the indexer.
func (s *dataFactoryDatasetSQLServerTableLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetSQLServerTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryDatasetSQLServerTable))
	})
	return ret, err
}

// DataFactoryDatasetSQLServerTables returns an object that can list and get DataFactoryDatasetSQLServerTables.
func (s *dataFactoryDatasetSQLServerTableLister) DataFactoryDatasetSQLServerTables(namespace string) DataFactoryDatasetSQLServerTableNamespaceLister {
	return dataFactoryDatasetSQLServerTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryDatasetSQLServerTableNamespaceLister helps list and get DataFactoryDatasetSQLServerTables.
type DataFactoryDatasetSQLServerTableNamespaceLister interface {
	// List lists all DataFactoryDatasetSQLServerTables in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetSQLServerTable, err error)
	// Get retrieves the DataFactoryDatasetSQLServerTable from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactoryDatasetSQLServerTable, error)
	DataFactoryDatasetSQLServerTableNamespaceListerExpansion
}

// dataFactoryDatasetSQLServerTableNamespaceLister implements the DataFactoryDatasetSQLServerTableNamespaceLister
// interface.
type dataFactoryDatasetSQLServerTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactoryDatasetSQLServerTables in the indexer for a given namespace.
func (s dataFactoryDatasetSQLServerTableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetSQLServerTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryDatasetSQLServerTable))
	})
	return ret, err
}

// Get retrieves the DataFactoryDatasetSQLServerTable from the indexer for a given namespace and name.
func (s dataFactoryDatasetSQLServerTableNamespaceLister) Get(name string) (*v1alpha1.DataFactoryDatasetSQLServerTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactorydatasetsqlservertable"), name)
	}
	return obj.(*v1alpha1.DataFactoryDatasetSQLServerTable), nil
}
