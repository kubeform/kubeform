/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IothubConsumerGroupLister helps list IothubConsumerGroups.
type IothubConsumerGroupLister interface {
	// List lists all IothubConsumerGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IothubConsumerGroup, err error)
	// IothubConsumerGroups returns an object that can list and get IothubConsumerGroups.
	IothubConsumerGroups(namespace string) IothubConsumerGroupNamespaceLister
	IothubConsumerGroupListerExpansion
}

// iothubConsumerGroupLister implements the IothubConsumerGroupLister interface.
type iothubConsumerGroupLister struct {
	indexer cache.Indexer
}

// NewIothubConsumerGroupLister returns a new IothubConsumerGroupLister.
func NewIothubConsumerGroupLister(indexer cache.Indexer) IothubConsumerGroupLister {
	return &iothubConsumerGroupLister{indexer: indexer}
}

// List lists all IothubConsumerGroups in the indexer.
func (s *iothubConsumerGroupLister) List(selector labels.Selector) (ret []*v1alpha1.IothubConsumerGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubConsumerGroup))
	})
	return ret, err
}

// IothubConsumerGroups returns an object that can list and get IothubConsumerGroups.
func (s *iothubConsumerGroupLister) IothubConsumerGroups(namespace string) IothubConsumerGroupNamespaceLister {
	return iothubConsumerGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IothubConsumerGroupNamespaceLister helps list and get IothubConsumerGroups.
type IothubConsumerGroupNamespaceLister interface {
	// List lists all IothubConsumerGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IothubConsumerGroup, err error)
	// Get retrieves the IothubConsumerGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IothubConsumerGroup, error)
	IothubConsumerGroupNamespaceListerExpansion
}

// iothubConsumerGroupNamespaceLister implements the IothubConsumerGroupNamespaceLister
// interface.
type iothubConsumerGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IothubConsumerGroups in the indexer for a given namespace.
func (s iothubConsumerGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IothubConsumerGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubConsumerGroup))
	})
	return ret, err
}

// Get retrieves the IothubConsumerGroup from the indexer for a given namespace and name.
func (s iothubConsumerGroupNamespaceLister) Get(name string) (*v1alpha1.IothubConsumerGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iothubconsumergroup"), name)
	}
	return obj.(*v1alpha1.IothubConsumerGroup), nil
}
