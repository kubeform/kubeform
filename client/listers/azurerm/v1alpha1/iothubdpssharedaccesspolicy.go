/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IothubDpsSharedAccessPolicyLister helps list IothubDpsSharedAccessPolicies.
type IothubDpsSharedAccessPolicyLister interface {
	// List lists all IothubDpsSharedAccessPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IothubDpsSharedAccessPolicy, err error)
	// IothubDpsSharedAccessPolicies returns an object that can list and get IothubDpsSharedAccessPolicies.
	IothubDpsSharedAccessPolicies(namespace string) IothubDpsSharedAccessPolicyNamespaceLister
	IothubDpsSharedAccessPolicyListerExpansion
}

// iothubDpsSharedAccessPolicyLister implements the IothubDpsSharedAccessPolicyLister interface.
type iothubDpsSharedAccessPolicyLister struct {
	indexer cache.Indexer
}

// NewIothubDpsSharedAccessPolicyLister returns a new IothubDpsSharedAccessPolicyLister.
func NewIothubDpsSharedAccessPolicyLister(indexer cache.Indexer) IothubDpsSharedAccessPolicyLister {
	return &iothubDpsSharedAccessPolicyLister{indexer: indexer}
}

// List lists all IothubDpsSharedAccessPolicies in the indexer.
func (s *iothubDpsSharedAccessPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.IothubDpsSharedAccessPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubDpsSharedAccessPolicy))
	})
	return ret, err
}

// IothubDpsSharedAccessPolicies returns an object that can list and get IothubDpsSharedAccessPolicies.
func (s *iothubDpsSharedAccessPolicyLister) IothubDpsSharedAccessPolicies(namespace string) IothubDpsSharedAccessPolicyNamespaceLister {
	return iothubDpsSharedAccessPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IothubDpsSharedAccessPolicyNamespaceLister helps list and get IothubDpsSharedAccessPolicies.
type IothubDpsSharedAccessPolicyNamespaceLister interface {
	// List lists all IothubDpsSharedAccessPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IothubDpsSharedAccessPolicy, err error)
	// Get retrieves the IothubDpsSharedAccessPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IothubDpsSharedAccessPolicy, error)
	IothubDpsSharedAccessPolicyNamespaceListerExpansion
}

// iothubDpsSharedAccessPolicyNamespaceLister implements the IothubDpsSharedAccessPolicyNamespaceLister
// interface.
type iothubDpsSharedAccessPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IothubDpsSharedAccessPolicies in the indexer for a given namespace.
func (s iothubDpsSharedAccessPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IothubDpsSharedAccessPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubDpsSharedAccessPolicy))
	})
	return ret, err
}

// Get retrieves the IothubDpsSharedAccessPolicy from the indexer for a given namespace and name.
func (s iothubDpsSharedAccessPolicyNamespaceLister) Get(name string) (*v1alpha1.IothubDpsSharedAccessPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iothubdpssharedaccesspolicy"), name)
	}
	return obj.(*v1alpha1.IothubDpsSharedAccessPolicy), nil
}
