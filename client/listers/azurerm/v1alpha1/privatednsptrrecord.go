/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateDNSPtrRecordLister helps list PrivateDNSPtrRecords.
type PrivateDNSPtrRecordLister interface {
	// List lists all PrivateDNSPtrRecords in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSPtrRecord, err error)
	// PrivateDNSPtrRecords returns an object that can list and get PrivateDNSPtrRecords.
	PrivateDNSPtrRecords(namespace string) PrivateDNSPtrRecordNamespaceLister
	PrivateDNSPtrRecordListerExpansion
}

// privateDNSPtrRecordLister implements the PrivateDNSPtrRecordLister interface.
type privateDNSPtrRecordLister struct {
	indexer cache.Indexer
}

// NewPrivateDNSPtrRecordLister returns a new PrivateDNSPtrRecordLister.
func NewPrivateDNSPtrRecordLister(indexer cache.Indexer) PrivateDNSPtrRecordLister {
	return &privateDNSPtrRecordLister{indexer: indexer}
}

// List lists all PrivateDNSPtrRecords in the indexer.
func (s *privateDNSPtrRecordLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSPtrRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSPtrRecord))
	})
	return ret, err
}

// PrivateDNSPtrRecords returns an object that can list and get PrivateDNSPtrRecords.
func (s *privateDNSPtrRecordLister) PrivateDNSPtrRecords(namespace string) PrivateDNSPtrRecordNamespaceLister {
	return privateDNSPtrRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateDNSPtrRecordNamespaceLister helps list and get PrivateDNSPtrRecords.
type PrivateDNSPtrRecordNamespaceLister interface {
	// List lists all PrivateDNSPtrRecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSPtrRecord, err error)
	// Get retrieves the PrivateDNSPtrRecord from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PrivateDNSPtrRecord, error)
	PrivateDNSPtrRecordNamespaceListerExpansion
}

// privateDNSPtrRecordNamespaceLister implements the PrivateDNSPtrRecordNamespaceLister
// interface.
type privateDNSPtrRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateDNSPtrRecords in the indexer for a given namespace.
func (s privateDNSPtrRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSPtrRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSPtrRecord))
	})
	return ret, err
}

// Get retrieves the PrivateDNSPtrRecord from the indexer for a given namespace and name.
func (s privateDNSPtrRecordNamespaceLister) Get(name string) (*v1alpha1.PrivateDNSPtrRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatednsptrrecord"), name)
	}
	return obj.(*v1alpha1.PrivateDNSPtrRecord), nil
}
