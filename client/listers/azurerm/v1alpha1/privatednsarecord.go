/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateDNSARecordLister helps list PrivateDNSARecords.
type PrivateDNSARecordLister interface {
	// List lists all PrivateDNSARecords in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSARecord, err error)
	// PrivateDNSARecords returns an object that can list and get PrivateDNSARecords.
	PrivateDNSARecords(namespace string) PrivateDNSARecordNamespaceLister
	PrivateDNSARecordListerExpansion
}

// privateDNSARecordLister implements the PrivateDNSARecordLister interface.
type privateDNSARecordLister struct {
	indexer cache.Indexer
}

// NewPrivateDNSARecordLister returns a new PrivateDNSARecordLister.
func NewPrivateDNSARecordLister(indexer cache.Indexer) PrivateDNSARecordLister {
	return &privateDNSARecordLister{indexer: indexer}
}

// List lists all PrivateDNSARecords in the indexer.
func (s *privateDNSARecordLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSARecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSARecord))
	})
	return ret, err
}

// PrivateDNSARecords returns an object that can list and get PrivateDNSARecords.
func (s *privateDNSARecordLister) PrivateDNSARecords(namespace string) PrivateDNSARecordNamespaceLister {
	return privateDNSARecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateDNSARecordNamespaceLister helps list and get PrivateDNSARecords.
type PrivateDNSARecordNamespaceLister interface {
	// List lists all PrivateDNSARecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSARecord, err error)
	// Get retrieves the PrivateDNSARecord from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PrivateDNSARecord, error)
	PrivateDNSARecordNamespaceListerExpansion
}

// privateDNSARecordNamespaceLister implements the PrivateDNSARecordNamespaceLister
// interface.
type privateDNSARecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateDNSARecords in the indexer for a given namespace.
func (s privateDNSARecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSARecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSARecord))
	})
	return ret, err
}

// Get retrieves the PrivateDNSARecord from the indexer for a given namespace and name.
func (s privateDNSARecordNamespaceLister) Get(name string) (*v1alpha1.PrivateDNSARecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatednsarecord"), name)
	}
	return obj.(*v1alpha1.PrivateDNSARecord), nil
}
