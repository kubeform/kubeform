/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RecoveryServicesReplicationPolicyLister helps list RecoveryServicesReplicationPolicies.
type RecoveryServicesReplicationPolicyLister interface {
	// List lists all RecoveryServicesReplicationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RecoveryServicesReplicationPolicy, err error)
	// RecoveryServicesReplicationPolicies returns an object that can list and get RecoveryServicesReplicationPolicies.
	RecoveryServicesReplicationPolicies(namespace string) RecoveryServicesReplicationPolicyNamespaceLister
	RecoveryServicesReplicationPolicyListerExpansion
}

// recoveryServicesReplicationPolicyLister implements the RecoveryServicesReplicationPolicyLister interface.
type recoveryServicesReplicationPolicyLister struct {
	indexer cache.Indexer
}

// NewRecoveryServicesReplicationPolicyLister returns a new RecoveryServicesReplicationPolicyLister.
func NewRecoveryServicesReplicationPolicyLister(indexer cache.Indexer) RecoveryServicesReplicationPolicyLister {
	return &recoveryServicesReplicationPolicyLister{indexer: indexer}
}

// List lists all RecoveryServicesReplicationPolicies in the indexer.
func (s *recoveryServicesReplicationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RecoveryServicesReplicationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecoveryServicesReplicationPolicy))
	})
	return ret, err
}

// RecoveryServicesReplicationPolicies returns an object that can list and get RecoveryServicesReplicationPolicies.
func (s *recoveryServicesReplicationPolicyLister) RecoveryServicesReplicationPolicies(namespace string) RecoveryServicesReplicationPolicyNamespaceLister {
	return recoveryServicesReplicationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RecoveryServicesReplicationPolicyNamespaceLister helps list and get RecoveryServicesReplicationPolicies.
type RecoveryServicesReplicationPolicyNamespaceLister interface {
	// List lists all RecoveryServicesReplicationPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RecoveryServicesReplicationPolicy, err error)
	// Get retrieves the RecoveryServicesReplicationPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RecoveryServicesReplicationPolicy, error)
	RecoveryServicesReplicationPolicyNamespaceListerExpansion
}

// recoveryServicesReplicationPolicyNamespaceLister implements the RecoveryServicesReplicationPolicyNamespaceLister
// interface.
type recoveryServicesReplicationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RecoveryServicesReplicationPolicies in the indexer for a given namespace.
func (s recoveryServicesReplicationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RecoveryServicesReplicationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecoveryServicesReplicationPolicy))
	})
	return ret, err
}

// Get retrieves the RecoveryServicesReplicationPolicy from the indexer for a given namespace and name.
func (s recoveryServicesReplicationPolicyNamespaceLister) Get(name string) (*v1alpha1.RecoveryServicesReplicationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("recoveryservicesreplicationpolicy"), name)
	}
	return obj.(*v1alpha1.RecoveryServicesReplicationPolicy), nil
}
