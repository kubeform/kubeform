/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutomationAccountLister helps list AutomationAccounts.
type AutomationAccountLister interface {
	// List lists all AutomationAccounts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationAccount, err error)
	// AutomationAccounts returns an object that can list and get AutomationAccounts.
	AutomationAccounts(namespace string) AutomationAccountNamespaceLister
	AutomationAccountListerExpansion
}

// automationAccountLister implements the AutomationAccountLister interface.
type automationAccountLister struct {
	indexer cache.Indexer
}

// NewAutomationAccountLister returns a new AutomationAccountLister.
func NewAutomationAccountLister(indexer cache.Indexer) AutomationAccountLister {
	return &automationAccountLister{indexer: indexer}
}

// List lists all AutomationAccounts in the indexer.
func (s *automationAccountLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationAccount))
	})
	return ret, err
}

// AutomationAccounts returns an object that can list and get AutomationAccounts.
func (s *automationAccountLister) AutomationAccounts(namespace string) AutomationAccountNamespaceLister {
	return automationAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutomationAccountNamespaceLister helps list and get AutomationAccounts.
type AutomationAccountNamespaceLister interface {
	// List lists all AutomationAccounts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationAccount, err error)
	// Get retrieves the AutomationAccount from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AutomationAccount, error)
	AutomationAccountNamespaceListerExpansion
}

// automationAccountNamespaceLister implements the AutomationAccountNamespaceLister
// interface.
type automationAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutomationAccounts in the indexer for a given namespace.
func (s automationAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationAccount))
	})
	return ret, err
}

// Get retrieves the AutomationAccount from the indexer for a given namespace and name.
func (s automationAccountNamespaceLister) Get(name string) (*v1alpha1.AutomationAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("automationaccount"), name)
	}
	return obj.(*v1alpha1.AutomationAccount), nil
}
