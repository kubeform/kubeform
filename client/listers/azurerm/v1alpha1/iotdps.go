/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// IotDpsLister helps list IotDpses.
type IotDpsLister interface {
	// List lists all IotDpses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IotDps, err error)
	// Get retrieves the IotDps from the index for a given name.
	Get(name string) (*v1alpha1.IotDps, error)
	IotDpsListerExpansion
}

// iotDpsLister implements the IotDpsLister interface.
type iotDpsLister struct {
	indexer cache.Indexer
}

// NewIotDpsLister returns a new IotDpsLister.
func NewIotDpsLister(indexer cache.Indexer) IotDpsLister {
	return &iotDpsLister{indexer: indexer}
}

// List lists all IotDpses in the indexer.
func (s *iotDpsLister) List(selector labels.Selector) (ret []*v1alpha1.IotDps, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IotDps))
	})
	return ret, err
}

// Get retrieves the IotDps from the index for a given name.
func (s *iotDpsLister) Get(name string) (*v1alpha1.IotDps, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iotdps"), name)
	}
	return obj.(*v1alpha1.IotDps), nil
}
