/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PostgresqlConfigurationLister helps list PostgresqlConfigurations.
type PostgresqlConfigurationLister interface {
	// List lists all PostgresqlConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresqlConfiguration, err error)
	// PostgresqlConfigurations returns an object that can list and get PostgresqlConfigurations.
	PostgresqlConfigurations(namespace string) PostgresqlConfigurationNamespaceLister
	PostgresqlConfigurationListerExpansion
}

// postgresqlConfigurationLister implements the PostgresqlConfigurationLister interface.
type postgresqlConfigurationLister struct {
	indexer cache.Indexer
}

// NewPostgresqlConfigurationLister returns a new PostgresqlConfigurationLister.
func NewPostgresqlConfigurationLister(indexer cache.Indexer) PostgresqlConfigurationLister {
	return &postgresqlConfigurationLister{indexer: indexer}
}

// List lists all PostgresqlConfigurations in the indexer.
func (s *postgresqlConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresqlConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresqlConfiguration))
	})
	return ret, err
}

// PostgresqlConfigurations returns an object that can list and get PostgresqlConfigurations.
func (s *postgresqlConfigurationLister) PostgresqlConfigurations(namespace string) PostgresqlConfigurationNamespaceLister {
	return postgresqlConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PostgresqlConfigurationNamespaceLister helps list and get PostgresqlConfigurations.
type PostgresqlConfigurationNamespaceLister interface {
	// List lists all PostgresqlConfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresqlConfiguration, err error)
	// Get retrieves the PostgresqlConfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PostgresqlConfiguration, error)
	PostgresqlConfigurationNamespaceListerExpansion
}

// postgresqlConfigurationNamespaceLister implements the PostgresqlConfigurationNamespaceLister
// interface.
type postgresqlConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PostgresqlConfigurations in the indexer for a given namespace.
func (s postgresqlConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresqlConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresqlConfiguration))
	})
	return ret, err
}

// Get retrieves the PostgresqlConfiguration from the indexer for a given namespace and name.
func (s postgresqlConfigurationNamespaceLister) Get(name string) (*v1alpha1.PostgresqlConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("postgresqlconfiguration"), name)
	}
	return obj.(*v1alpha1.PostgresqlConfiguration), nil
}
