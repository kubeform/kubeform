/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BotChannelEmailLister helps list BotChannelEmails.
type BotChannelEmailLister interface {
	// List lists all BotChannelEmails in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BotChannelEmail, err error)
	// BotChannelEmails returns an object that can list and get BotChannelEmails.
	BotChannelEmails(namespace string) BotChannelEmailNamespaceLister
	BotChannelEmailListerExpansion
}

// botChannelEmailLister implements the BotChannelEmailLister interface.
type botChannelEmailLister struct {
	indexer cache.Indexer
}

// NewBotChannelEmailLister returns a new BotChannelEmailLister.
func NewBotChannelEmailLister(indexer cache.Indexer) BotChannelEmailLister {
	return &botChannelEmailLister{indexer: indexer}
}

// List lists all BotChannelEmails in the indexer.
func (s *botChannelEmailLister) List(selector labels.Selector) (ret []*v1alpha1.BotChannelEmail, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BotChannelEmail))
	})
	return ret, err
}

// BotChannelEmails returns an object that can list and get BotChannelEmails.
func (s *botChannelEmailLister) BotChannelEmails(namespace string) BotChannelEmailNamespaceLister {
	return botChannelEmailNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BotChannelEmailNamespaceLister helps list and get BotChannelEmails.
type BotChannelEmailNamespaceLister interface {
	// List lists all BotChannelEmails in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BotChannelEmail, err error)
	// Get retrieves the BotChannelEmail from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BotChannelEmail, error)
	BotChannelEmailNamespaceListerExpansion
}

// botChannelEmailNamespaceLister implements the BotChannelEmailNamespaceLister
// interface.
type botChannelEmailNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BotChannelEmails in the indexer for a given namespace.
func (s botChannelEmailNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BotChannelEmail, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BotChannelEmail))
	})
	return ret, err
}

// Get retrieves the BotChannelEmail from the indexer for a given namespace and name.
func (s botChannelEmailNamespaceLister) Get(name string) (*v1alpha1.BotChannelEmail, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("botchannelemail"), name)
	}
	return obj.(*v1alpha1.BotChannelEmail), nil
}
