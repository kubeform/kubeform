/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// NotificationHubAuthorizationRuleLister helps list NotificationHubAuthorizationRules.
type NotificationHubAuthorizationRuleLister interface {
	// List lists all NotificationHubAuthorizationRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationHubAuthorizationRule, err error)
	// NotificationHubAuthorizationRules returns an object that can list and get NotificationHubAuthorizationRules.
	NotificationHubAuthorizationRules(namespace string) NotificationHubAuthorizationRuleNamespaceLister
	NotificationHubAuthorizationRuleListerExpansion
}

// notificationHubAuthorizationRuleLister implements the NotificationHubAuthorizationRuleLister interface.
type notificationHubAuthorizationRuleLister struct {
	indexer cache.Indexer
}

// NewNotificationHubAuthorizationRuleLister returns a new NotificationHubAuthorizationRuleLister.
func NewNotificationHubAuthorizationRuleLister(indexer cache.Indexer) NotificationHubAuthorizationRuleLister {
	return &notificationHubAuthorizationRuleLister{indexer: indexer}
}

// List lists all NotificationHubAuthorizationRules in the indexer.
func (s *notificationHubAuthorizationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationHubAuthorizationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationHubAuthorizationRule))
	})
	return ret, err
}

// NotificationHubAuthorizationRules returns an object that can list and get NotificationHubAuthorizationRules.
func (s *notificationHubAuthorizationRuleLister) NotificationHubAuthorizationRules(namespace string) NotificationHubAuthorizationRuleNamespaceLister {
	return notificationHubAuthorizationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificationHubAuthorizationRuleNamespaceLister helps list and get NotificationHubAuthorizationRules.
type NotificationHubAuthorizationRuleNamespaceLister interface {
	// List lists all NotificationHubAuthorizationRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationHubAuthorizationRule, err error)
	// Get retrieves the NotificationHubAuthorizationRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NotificationHubAuthorizationRule, error)
	NotificationHubAuthorizationRuleNamespaceListerExpansion
}

// notificationHubAuthorizationRuleNamespaceLister implements the NotificationHubAuthorizationRuleNamespaceLister
// interface.
type notificationHubAuthorizationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotificationHubAuthorizationRules in the indexer for a given namespace.
func (s notificationHubAuthorizationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationHubAuthorizationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationHubAuthorizationRule))
	})
	return ret, err
}

// Get retrieves the NotificationHubAuthorizationRule from the indexer for a given namespace and name.
func (s notificationHubAuthorizationRuleNamespaceLister) Get(name string) (*v1alpha1.NotificationHubAuthorizationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificationhubauthorizationrule"), name)
	}
	return obj.(*v1alpha1.NotificationHubAuthorizationRule), nil
}
