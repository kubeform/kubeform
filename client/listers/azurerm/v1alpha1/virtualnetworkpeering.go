/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualNetworkPeeringLister helps list VirtualNetworkPeerings.
type VirtualNetworkPeeringLister interface {
	// List lists all VirtualNetworkPeerings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualNetworkPeering, err error)
	// VirtualNetworkPeerings returns an object that can list and get VirtualNetworkPeerings.
	VirtualNetworkPeerings(namespace string) VirtualNetworkPeeringNamespaceLister
	VirtualNetworkPeeringListerExpansion
}

// virtualNetworkPeeringLister implements the VirtualNetworkPeeringLister interface.
type virtualNetworkPeeringLister struct {
	indexer cache.Indexer
}

// NewVirtualNetworkPeeringLister returns a new VirtualNetworkPeeringLister.
func NewVirtualNetworkPeeringLister(indexer cache.Indexer) VirtualNetworkPeeringLister {
	return &virtualNetworkPeeringLister{indexer: indexer}
}

// List lists all VirtualNetworkPeerings in the indexer.
func (s *virtualNetworkPeeringLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualNetworkPeering, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualNetworkPeering))
	})
	return ret, err
}

// VirtualNetworkPeerings returns an object that can list and get VirtualNetworkPeerings.
func (s *virtualNetworkPeeringLister) VirtualNetworkPeerings(namespace string) VirtualNetworkPeeringNamespaceLister {
	return virtualNetworkPeeringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualNetworkPeeringNamespaceLister helps list and get VirtualNetworkPeerings.
type VirtualNetworkPeeringNamespaceLister interface {
	// List lists all VirtualNetworkPeerings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualNetworkPeering, err error)
	// Get retrieves the VirtualNetworkPeering from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VirtualNetworkPeering, error)
	VirtualNetworkPeeringNamespaceListerExpansion
}

// virtualNetworkPeeringNamespaceLister implements the VirtualNetworkPeeringNamespaceLister
// interface.
type virtualNetworkPeeringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualNetworkPeerings in the indexer for a given namespace.
func (s virtualNetworkPeeringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualNetworkPeering, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualNetworkPeering))
	})
	return ret, err
}

// Get retrieves the VirtualNetworkPeering from the indexer for a given namespace and name.
func (s virtualNetworkPeeringNamespaceLister) Get(name string) (*v1alpha1.VirtualNetworkPeering, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualnetworkpeering"), name)
	}
	return obj.(*v1alpha1.VirtualNetworkPeering), nil
}
