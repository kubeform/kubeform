/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// StorageShareDirectoryLister helps list StorageShareDirectories.
type StorageShareDirectoryLister interface {
	// List lists all StorageShareDirectories in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageShareDirectory, err error)
	// StorageShareDirectories returns an object that can list and get StorageShareDirectories.
	StorageShareDirectories(namespace string) StorageShareDirectoryNamespaceLister
	StorageShareDirectoryListerExpansion
}

// storageShareDirectoryLister implements the StorageShareDirectoryLister interface.
type storageShareDirectoryLister struct {
	indexer cache.Indexer
}

// NewStorageShareDirectoryLister returns a new StorageShareDirectoryLister.
func NewStorageShareDirectoryLister(indexer cache.Indexer) StorageShareDirectoryLister {
	return &storageShareDirectoryLister{indexer: indexer}
}

// List lists all StorageShareDirectories in the indexer.
func (s *storageShareDirectoryLister) List(selector labels.Selector) (ret []*v1alpha1.StorageShareDirectory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageShareDirectory))
	})
	return ret, err
}

// StorageShareDirectories returns an object that can list and get StorageShareDirectories.
func (s *storageShareDirectoryLister) StorageShareDirectories(namespace string) StorageShareDirectoryNamespaceLister {
	return storageShareDirectoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageShareDirectoryNamespaceLister helps list and get StorageShareDirectories.
type StorageShareDirectoryNamespaceLister interface {
	// List lists all StorageShareDirectories in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageShareDirectory, err error)
	// Get retrieves the StorageShareDirectory from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageShareDirectory, error)
	StorageShareDirectoryNamespaceListerExpansion
}

// storageShareDirectoryNamespaceLister implements the StorageShareDirectoryNamespaceLister
// interface.
type storageShareDirectoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageShareDirectories in the indexer for a given namespace.
func (s storageShareDirectoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageShareDirectory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageShareDirectory))
	})
	return ret, err
}

// Get retrieves the StorageShareDirectory from the indexer for a given namespace and name.
func (s storageShareDirectoryNamespaceLister) Get(name string) (*v1alpha1.StorageShareDirectory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagesharedirectory"), name)
	}
	return obj.(*v1alpha1.StorageShareDirectory), nil
}
