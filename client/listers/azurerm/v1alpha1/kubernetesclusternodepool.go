/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubernetesClusterNodePoolLister helps list KubernetesClusterNodePools.
type KubernetesClusterNodePoolLister interface {
	// List lists all KubernetesClusterNodePools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesClusterNodePool, err error)
	// KubernetesClusterNodePools returns an object that can list and get KubernetesClusterNodePools.
	KubernetesClusterNodePools(namespace string) KubernetesClusterNodePoolNamespaceLister
	KubernetesClusterNodePoolListerExpansion
}

// kubernetesClusterNodePoolLister implements the KubernetesClusterNodePoolLister interface.
type kubernetesClusterNodePoolLister struct {
	indexer cache.Indexer
}

// NewKubernetesClusterNodePoolLister returns a new KubernetesClusterNodePoolLister.
func NewKubernetesClusterNodePoolLister(indexer cache.Indexer) KubernetesClusterNodePoolLister {
	return &kubernetesClusterNodePoolLister{indexer: indexer}
}

// List lists all KubernetesClusterNodePools in the indexer.
func (s *kubernetesClusterNodePoolLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesClusterNodePool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesClusterNodePool))
	})
	return ret, err
}

// KubernetesClusterNodePools returns an object that can list and get KubernetesClusterNodePools.
func (s *kubernetesClusterNodePoolLister) KubernetesClusterNodePools(namespace string) KubernetesClusterNodePoolNamespaceLister {
	return kubernetesClusterNodePoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubernetesClusterNodePoolNamespaceLister helps list and get KubernetesClusterNodePools.
type KubernetesClusterNodePoolNamespaceLister interface {
	// List lists all KubernetesClusterNodePools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesClusterNodePool, err error)
	// Get retrieves the KubernetesClusterNodePool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KubernetesClusterNodePool, error)
	KubernetesClusterNodePoolNamespaceListerExpansion
}

// kubernetesClusterNodePoolNamespaceLister implements the KubernetesClusterNodePoolNamespaceLister
// interface.
type kubernetesClusterNodePoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubernetesClusterNodePools in the indexer for a given namespace.
func (s kubernetesClusterNodePoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesClusterNodePool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesClusterNodePool))
	})
	return ret, err
}

// Get retrieves the KubernetesClusterNodePool from the indexer for a given namespace and name.
func (s kubernetesClusterNodePoolNamespaceLister) Get(name string) (*v1alpha1.KubernetesClusterNodePool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kubernetesclusternodepool"), name)
	}
	return obj.(*v1alpha1.KubernetesClusterNodePool), nil
}
