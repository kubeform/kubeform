/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MysqlServerLister helps list MysqlServers.
type MysqlServerLister interface {
	// List lists all MysqlServers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MysqlServer, err error)
	// MysqlServers returns an object that can list and get MysqlServers.
	MysqlServers(namespace string) MysqlServerNamespaceLister
	MysqlServerListerExpansion
}

// mysqlServerLister implements the MysqlServerLister interface.
type mysqlServerLister struct {
	indexer cache.Indexer
}

// NewMysqlServerLister returns a new MysqlServerLister.
func NewMysqlServerLister(indexer cache.Indexer) MysqlServerLister {
	return &mysqlServerLister{indexer: indexer}
}

// List lists all MysqlServers in the indexer.
func (s *mysqlServerLister) List(selector labels.Selector) (ret []*v1alpha1.MysqlServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MysqlServer))
	})
	return ret, err
}

// MysqlServers returns an object that can list and get MysqlServers.
func (s *mysqlServerLister) MysqlServers(namespace string) MysqlServerNamespaceLister {
	return mysqlServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MysqlServerNamespaceLister helps list and get MysqlServers.
type MysqlServerNamespaceLister interface {
	// List lists all MysqlServers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MysqlServer, err error)
	// Get retrieves the MysqlServer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MysqlServer, error)
	MysqlServerNamespaceListerExpansion
}

// mysqlServerNamespaceLister implements the MysqlServerNamespaceLister
// interface.
type mysqlServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MysqlServers in the indexer for a given namespace.
func (s mysqlServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MysqlServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MysqlServer))
	})
	return ret, err
}

// Get retrieves the MysqlServer from the indexer for a given namespace and name.
func (s mysqlServerNamespaceLister) Get(name string) (*v1alpha1.MysqlServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mysqlserver"), name)
	}
	return obj.(*v1alpha1.MysqlServer), nil
}
