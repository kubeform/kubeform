/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// MysqlFirewallRuleLister helps list MysqlFirewallRules.
type MysqlFirewallRuleLister interface {
	// List lists all MysqlFirewallRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MysqlFirewallRule, err error)
	// MysqlFirewallRules returns an object that can list and get MysqlFirewallRules.
	MysqlFirewallRules(namespace string) MysqlFirewallRuleNamespaceLister
	MysqlFirewallRuleListerExpansion
}

// mysqlFirewallRuleLister implements the MysqlFirewallRuleLister interface.
type mysqlFirewallRuleLister struct {
	indexer cache.Indexer
}

// NewMysqlFirewallRuleLister returns a new MysqlFirewallRuleLister.
func NewMysqlFirewallRuleLister(indexer cache.Indexer) MysqlFirewallRuleLister {
	return &mysqlFirewallRuleLister{indexer: indexer}
}

// List lists all MysqlFirewallRules in the indexer.
func (s *mysqlFirewallRuleLister) List(selector labels.Selector) (ret []*v1alpha1.MysqlFirewallRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MysqlFirewallRule))
	})
	return ret, err
}

// MysqlFirewallRules returns an object that can list and get MysqlFirewallRules.
func (s *mysqlFirewallRuleLister) MysqlFirewallRules(namespace string) MysqlFirewallRuleNamespaceLister {
	return mysqlFirewallRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MysqlFirewallRuleNamespaceLister helps list and get MysqlFirewallRules.
type MysqlFirewallRuleNamespaceLister interface {
	// List lists all MysqlFirewallRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MysqlFirewallRule, err error)
	// Get retrieves the MysqlFirewallRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MysqlFirewallRule, error)
	MysqlFirewallRuleNamespaceListerExpansion
}

// mysqlFirewallRuleNamespaceLister implements the MysqlFirewallRuleNamespaceLister
// interface.
type mysqlFirewallRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MysqlFirewallRules in the indexer for a given namespace.
func (s mysqlFirewallRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MysqlFirewallRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MysqlFirewallRule))
	})
	return ret, err
}

// Get retrieves the MysqlFirewallRule from the indexer for a given namespace and name.
func (s mysqlFirewallRuleNamespaceLister) Get(name string) (*v1alpha1.MysqlFirewallRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mysqlfirewallrule"), name)
	}
	return obj.(*v1alpha1.MysqlFirewallRule), nil
}
