/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// SubnetRouteTableAssociationLister helps list SubnetRouteTableAssociations.
type SubnetRouteTableAssociationLister interface {
	// List lists all SubnetRouteTableAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetRouteTableAssociation, err error)
	// SubnetRouteTableAssociations returns an object that can list and get SubnetRouteTableAssociations.
	SubnetRouteTableAssociations(namespace string) SubnetRouteTableAssociationNamespaceLister
	SubnetRouteTableAssociationListerExpansion
}

// subnetRouteTableAssociationLister implements the SubnetRouteTableAssociationLister interface.
type subnetRouteTableAssociationLister struct {
	indexer cache.Indexer
}

// NewSubnetRouteTableAssociationLister returns a new SubnetRouteTableAssociationLister.
func NewSubnetRouteTableAssociationLister(indexer cache.Indexer) SubnetRouteTableAssociationLister {
	return &subnetRouteTableAssociationLister{indexer: indexer}
}

// List lists all SubnetRouteTableAssociations in the indexer.
func (s *subnetRouteTableAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetRouteTableAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetRouteTableAssociation))
	})
	return ret, err
}

// SubnetRouteTableAssociations returns an object that can list and get SubnetRouteTableAssociations.
func (s *subnetRouteTableAssociationLister) SubnetRouteTableAssociations(namespace string) SubnetRouteTableAssociationNamespaceLister {
	return subnetRouteTableAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetRouteTableAssociationNamespaceLister helps list and get SubnetRouteTableAssociations.
type SubnetRouteTableAssociationNamespaceLister interface {
	// List lists all SubnetRouteTableAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetRouteTableAssociation, err error)
	// Get retrieves the SubnetRouteTableAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SubnetRouteTableAssociation, error)
	SubnetRouteTableAssociationNamespaceListerExpansion
}

// subnetRouteTableAssociationNamespaceLister implements the SubnetRouteTableAssociationNamespaceLister
// interface.
type subnetRouteTableAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubnetRouteTableAssociations in the indexer for a given namespace.
func (s subnetRouteTableAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetRouteTableAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetRouteTableAssociation))
	})
	return ret, err
}

// Get retrieves the SubnetRouteTableAssociation from the indexer for a given namespace and name.
func (s subnetRouteTableAssociationNamespaceLister) Get(name string) (*v1alpha1.SubnetRouteTableAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetroutetableassociation"), name)
	}
	return obj.(*v1alpha1.SubnetRouteTableAssociation), nil
}
