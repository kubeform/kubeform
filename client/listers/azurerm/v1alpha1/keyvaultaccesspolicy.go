/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeyVaultAccessPolicyLister helps list KeyVaultAccessPolicies.
type KeyVaultAccessPolicyLister interface {
	// List lists all KeyVaultAccessPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KeyVaultAccessPolicy, err error)
	// KeyVaultAccessPolicies returns an object that can list and get KeyVaultAccessPolicies.
	KeyVaultAccessPolicies(namespace string) KeyVaultAccessPolicyNamespaceLister
	KeyVaultAccessPolicyListerExpansion
}

// keyVaultAccessPolicyLister implements the KeyVaultAccessPolicyLister interface.
type keyVaultAccessPolicyLister struct {
	indexer cache.Indexer
}

// NewKeyVaultAccessPolicyLister returns a new KeyVaultAccessPolicyLister.
func NewKeyVaultAccessPolicyLister(indexer cache.Indexer) KeyVaultAccessPolicyLister {
	return &keyVaultAccessPolicyLister{indexer: indexer}
}

// List lists all KeyVaultAccessPolicies in the indexer.
func (s *keyVaultAccessPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.KeyVaultAccessPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyVaultAccessPolicy))
	})
	return ret, err
}

// KeyVaultAccessPolicies returns an object that can list and get KeyVaultAccessPolicies.
func (s *keyVaultAccessPolicyLister) KeyVaultAccessPolicies(namespace string) KeyVaultAccessPolicyNamespaceLister {
	return keyVaultAccessPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyVaultAccessPolicyNamespaceLister helps list and get KeyVaultAccessPolicies.
type KeyVaultAccessPolicyNamespaceLister interface {
	// List lists all KeyVaultAccessPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KeyVaultAccessPolicy, err error)
	// Get retrieves the KeyVaultAccessPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KeyVaultAccessPolicy, error)
	KeyVaultAccessPolicyNamespaceListerExpansion
}

// keyVaultAccessPolicyNamespaceLister implements the KeyVaultAccessPolicyNamespaceLister
// interface.
type keyVaultAccessPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyVaultAccessPolicies in the indexer for a given namespace.
func (s keyVaultAccessPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyVaultAccessPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyVaultAccessPolicy))
	})
	return ret, err
}

// Get retrieves the KeyVaultAccessPolicy from the indexer for a given namespace and name.
func (s keyVaultAccessPolicyNamespaceLister) Get(name string) (*v1alpha1.KeyVaultAccessPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keyvaultaccesspolicy"), name)
	}
	return obj.(*v1alpha1.KeyVaultAccessPolicy), nil
}
