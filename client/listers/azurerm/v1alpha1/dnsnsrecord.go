/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsNsRecordLister helps list DnsNsRecords.
type DnsNsRecordLister interface {
	// List lists all DnsNsRecords in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DnsNsRecord, err error)
	// DnsNsRecords returns an object that can list and get DnsNsRecords.
	DnsNsRecords(namespace string) DnsNsRecordNamespaceLister
	DnsNsRecordListerExpansion
}

// dnsNsRecordLister implements the DnsNsRecordLister interface.
type dnsNsRecordLister struct {
	indexer cache.Indexer
}

// NewDnsNsRecordLister returns a new DnsNsRecordLister.
func NewDnsNsRecordLister(indexer cache.Indexer) DnsNsRecordLister {
	return &dnsNsRecordLister{indexer: indexer}
}

// List lists all DnsNsRecords in the indexer.
func (s *dnsNsRecordLister) List(selector labels.Selector) (ret []*v1alpha1.DnsNsRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsNsRecord))
	})
	return ret, err
}

// DnsNsRecords returns an object that can list and get DnsNsRecords.
func (s *dnsNsRecordLister) DnsNsRecords(namespace string) DnsNsRecordNamespaceLister {
	return dnsNsRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsNsRecordNamespaceLister helps list and get DnsNsRecords.
type DnsNsRecordNamespaceLister interface {
	// List lists all DnsNsRecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DnsNsRecord, err error)
	// Get retrieves the DnsNsRecord from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DnsNsRecord, error)
	DnsNsRecordNamespaceListerExpansion
}

// dnsNsRecordNamespaceLister implements the DnsNsRecordNamespaceLister
// interface.
type dnsNsRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsNsRecords in the indexer for a given namespace.
func (s dnsNsRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DnsNsRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsNsRecord))
	})
	return ret, err
}

// Get retrieves the DnsNsRecord from the indexer for a given namespace and name.
func (s dnsNsRecordNamespaceLister) Get(name string) (*v1alpha1.DnsNsRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnsnsrecord"), name)
	}
	return obj.(*v1alpha1.DnsNsRecord), nil
}
