/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContainerRegistryWebhookLister helps list ContainerRegistryWebhooks.
type ContainerRegistryWebhookLister interface {
	// List lists all ContainerRegistryWebhooks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistryWebhook, err error)
	// ContainerRegistryWebhooks returns an object that can list and get ContainerRegistryWebhooks.
	ContainerRegistryWebhooks(namespace string) ContainerRegistryWebhookNamespaceLister
	ContainerRegistryWebhookListerExpansion
}

// containerRegistryWebhookLister implements the ContainerRegistryWebhookLister interface.
type containerRegistryWebhookLister struct {
	indexer cache.Indexer
}

// NewContainerRegistryWebhookLister returns a new ContainerRegistryWebhookLister.
func NewContainerRegistryWebhookLister(indexer cache.Indexer) ContainerRegistryWebhookLister {
	return &containerRegistryWebhookLister{indexer: indexer}
}

// List lists all ContainerRegistryWebhooks in the indexer.
func (s *containerRegistryWebhookLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistryWebhook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerRegistryWebhook))
	})
	return ret, err
}

// ContainerRegistryWebhooks returns an object that can list and get ContainerRegistryWebhooks.
func (s *containerRegistryWebhookLister) ContainerRegistryWebhooks(namespace string) ContainerRegistryWebhookNamespaceLister {
	return containerRegistryWebhookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContainerRegistryWebhookNamespaceLister helps list and get ContainerRegistryWebhooks.
type ContainerRegistryWebhookNamespaceLister interface {
	// List lists all ContainerRegistryWebhooks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistryWebhook, err error)
	// Get retrieves the ContainerRegistryWebhook from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ContainerRegistryWebhook, error)
	ContainerRegistryWebhookNamespaceListerExpansion
}

// containerRegistryWebhookNamespaceLister implements the ContainerRegistryWebhookNamespaceLister
// interface.
type containerRegistryWebhookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContainerRegistryWebhooks in the indexer for a given namespace.
func (s containerRegistryWebhookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistryWebhook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerRegistryWebhook))
	})
	return ret, err
}

// Get retrieves the ContainerRegistryWebhook from the indexer for a given namespace and name.
func (s containerRegistryWebhookNamespaceLister) Get(name string) (*v1alpha1.ContainerRegistryWebhook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("containerregistrywebhook"), name)
	}
	return obj.(*v1alpha1.ContainerRegistryWebhook), nil
}
