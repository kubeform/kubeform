/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// HdinsightStormClusterLister helps list HdinsightStormClusters.
type HdinsightStormClusterLister interface {
	// List lists all HdinsightStormClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HdinsightStormCluster, err error)
	// HdinsightStormClusters returns an object that can list and get HdinsightStormClusters.
	HdinsightStormClusters(namespace string) HdinsightStormClusterNamespaceLister
	HdinsightStormClusterListerExpansion
}

// hdinsightStormClusterLister implements the HdinsightStormClusterLister interface.
type hdinsightStormClusterLister struct {
	indexer cache.Indexer
}

// NewHdinsightStormClusterLister returns a new HdinsightStormClusterLister.
func NewHdinsightStormClusterLister(indexer cache.Indexer) HdinsightStormClusterLister {
	return &hdinsightStormClusterLister{indexer: indexer}
}

// List lists all HdinsightStormClusters in the indexer.
func (s *hdinsightStormClusterLister) List(selector labels.Selector) (ret []*v1alpha1.HdinsightStormCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HdinsightStormCluster))
	})
	return ret, err
}

// HdinsightStormClusters returns an object that can list and get HdinsightStormClusters.
func (s *hdinsightStormClusterLister) HdinsightStormClusters(namespace string) HdinsightStormClusterNamespaceLister {
	return hdinsightStormClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HdinsightStormClusterNamespaceLister helps list and get HdinsightStormClusters.
type HdinsightStormClusterNamespaceLister interface {
	// List lists all HdinsightStormClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HdinsightStormCluster, err error)
	// Get retrieves the HdinsightStormCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HdinsightStormCluster, error)
	HdinsightStormClusterNamespaceListerExpansion
}

// hdinsightStormClusterNamespaceLister implements the HdinsightStormClusterNamespaceLister
// interface.
type hdinsightStormClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HdinsightStormClusters in the indexer for a given namespace.
func (s hdinsightStormClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HdinsightStormCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HdinsightStormCluster))
	})
	return ret, err
}

// Get retrieves the HdinsightStormCluster from the indexer for a given namespace and name.
func (s hdinsightStormClusterNamespaceLister) Get(name string) (*v1alpha1.HdinsightStormCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hdinsightstormcluster"), name)
	}
	return obj.(*v1alpha1.HdinsightStormCluster), nil
}
