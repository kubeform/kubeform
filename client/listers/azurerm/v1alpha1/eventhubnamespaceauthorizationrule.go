/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventhubNamespaceAuthorizationRuleLister helps list EventhubNamespaceAuthorizationRules.
type EventhubNamespaceAuthorizationRuleLister interface {
	// List lists all EventhubNamespaceAuthorizationRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EventhubNamespaceAuthorizationRule, err error)
	// EventhubNamespaceAuthorizationRules returns an object that can list and get EventhubNamespaceAuthorizationRules.
	EventhubNamespaceAuthorizationRules(namespace string) EventhubNamespaceAuthorizationRuleNamespaceLister
	EventhubNamespaceAuthorizationRuleListerExpansion
}

// eventhubNamespaceAuthorizationRuleLister implements the EventhubNamespaceAuthorizationRuleLister interface.
type eventhubNamespaceAuthorizationRuleLister struct {
	indexer cache.Indexer
}

// NewEventhubNamespaceAuthorizationRuleLister returns a new EventhubNamespaceAuthorizationRuleLister.
func NewEventhubNamespaceAuthorizationRuleLister(indexer cache.Indexer) EventhubNamespaceAuthorizationRuleLister {
	return &eventhubNamespaceAuthorizationRuleLister{indexer: indexer}
}

// List lists all EventhubNamespaceAuthorizationRules in the indexer.
func (s *eventhubNamespaceAuthorizationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.EventhubNamespaceAuthorizationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventhubNamespaceAuthorizationRule))
	})
	return ret, err
}

// EventhubNamespaceAuthorizationRules returns an object that can list and get EventhubNamespaceAuthorizationRules.
func (s *eventhubNamespaceAuthorizationRuleLister) EventhubNamespaceAuthorizationRules(namespace string) EventhubNamespaceAuthorizationRuleNamespaceLister {
	return eventhubNamespaceAuthorizationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventhubNamespaceAuthorizationRuleNamespaceLister helps list and get EventhubNamespaceAuthorizationRules.
type EventhubNamespaceAuthorizationRuleNamespaceLister interface {
	// List lists all EventhubNamespaceAuthorizationRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EventhubNamespaceAuthorizationRule, err error)
	// Get retrieves the EventhubNamespaceAuthorizationRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EventhubNamespaceAuthorizationRule, error)
	EventhubNamespaceAuthorizationRuleNamespaceListerExpansion
}

// eventhubNamespaceAuthorizationRuleNamespaceLister implements the EventhubNamespaceAuthorizationRuleNamespaceLister
// interface.
type eventhubNamespaceAuthorizationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventhubNamespaceAuthorizationRules in the indexer for a given namespace.
func (s eventhubNamespaceAuthorizationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventhubNamespaceAuthorizationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventhubNamespaceAuthorizationRule))
	})
	return ret, err
}

// Get retrieves the EventhubNamespaceAuthorizationRule from the indexer for a given namespace and name.
func (s eventhubNamespaceAuthorizationRuleNamespaceLister) Get(name string) (*v1alpha1.EventhubNamespaceAuthorizationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventhubnamespaceauthorizationrule"), name)
	}
	return obj.(*v1alpha1.EventhubNamespaceAuthorizationRule), nil
}
