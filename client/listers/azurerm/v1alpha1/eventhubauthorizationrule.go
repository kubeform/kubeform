/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventhubAuthorizationRuleLister helps list EventhubAuthorizationRules.
type EventhubAuthorizationRuleLister interface {
	// List lists all EventhubAuthorizationRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EventhubAuthorizationRule, err error)
	// EventhubAuthorizationRules returns an object that can list and get EventhubAuthorizationRules.
	EventhubAuthorizationRules(namespace string) EventhubAuthorizationRuleNamespaceLister
	EventhubAuthorizationRuleListerExpansion
}

// eventhubAuthorizationRuleLister implements the EventhubAuthorizationRuleLister interface.
type eventhubAuthorizationRuleLister struct {
	indexer cache.Indexer
}

// NewEventhubAuthorizationRuleLister returns a new EventhubAuthorizationRuleLister.
func NewEventhubAuthorizationRuleLister(indexer cache.Indexer) EventhubAuthorizationRuleLister {
	return &eventhubAuthorizationRuleLister{indexer: indexer}
}

// List lists all EventhubAuthorizationRules in the indexer.
func (s *eventhubAuthorizationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.EventhubAuthorizationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventhubAuthorizationRule))
	})
	return ret, err
}

// EventhubAuthorizationRules returns an object that can list and get EventhubAuthorizationRules.
func (s *eventhubAuthorizationRuleLister) EventhubAuthorizationRules(namespace string) EventhubAuthorizationRuleNamespaceLister {
	return eventhubAuthorizationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventhubAuthorizationRuleNamespaceLister helps list and get EventhubAuthorizationRules.
type EventhubAuthorizationRuleNamespaceLister interface {
	// List lists all EventhubAuthorizationRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EventhubAuthorizationRule, err error)
	// Get retrieves the EventhubAuthorizationRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EventhubAuthorizationRule, error)
	EventhubAuthorizationRuleNamespaceListerExpansion
}

// eventhubAuthorizationRuleNamespaceLister implements the EventhubAuthorizationRuleNamespaceLister
// interface.
type eventhubAuthorizationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventhubAuthorizationRules in the indexer for a given namespace.
func (s eventhubAuthorizationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventhubAuthorizationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventhubAuthorizationRule))
	})
	return ret, err
}

// Get retrieves the EventhubAuthorizationRule from the indexer for a given namespace and name.
func (s eventhubAuthorizationRuleNamespaceLister) Get(name string) (*v1alpha1.EventhubAuthorizationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventhubauthorizationrule"), name)
	}
	return obj.(*v1alpha1.EventhubAuthorizationRule), nil
}
