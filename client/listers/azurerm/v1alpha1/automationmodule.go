/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutomationModuleLister helps list AutomationModules.
type AutomationModuleLister interface {
	// List lists all AutomationModules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationModule, err error)
	// AutomationModules returns an object that can list and get AutomationModules.
	AutomationModules(namespace string) AutomationModuleNamespaceLister
	AutomationModuleListerExpansion
}

// automationModuleLister implements the AutomationModuleLister interface.
type automationModuleLister struct {
	indexer cache.Indexer
}

// NewAutomationModuleLister returns a new AutomationModuleLister.
func NewAutomationModuleLister(indexer cache.Indexer) AutomationModuleLister {
	return &automationModuleLister{indexer: indexer}
}

// List lists all AutomationModules in the indexer.
func (s *automationModuleLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationModule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationModule))
	})
	return ret, err
}

// AutomationModules returns an object that can list and get AutomationModules.
func (s *automationModuleLister) AutomationModules(namespace string) AutomationModuleNamespaceLister {
	return automationModuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutomationModuleNamespaceLister helps list and get AutomationModules.
type AutomationModuleNamespaceLister interface {
	// List lists all AutomationModules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationModule, err error)
	// Get retrieves the AutomationModule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AutomationModule, error)
	AutomationModuleNamespaceListerExpansion
}

// automationModuleNamespaceLister implements the AutomationModuleNamespaceLister
// interface.
type automationModuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutomationModules in the indexer for a given namespace.
func (s automationModuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationModule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationModule))
	})
	return ret, err
}

// Get retrieves the AutomationModule from the indexer for a given namespace and name.
func (s automationModuleNamespaceLister) Get(name string) (*v1alpha1.AutomationModule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("automationmodule"), name)
	}
	return obj.(*v1alpha1.AutomationModule), nil
}
