/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KustoClusterLister helps list KustoClusters.
type KustoClusterLister interface {
	// List lists all KustoClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KustoCluster, err error)
	// KustoClusters returns an object that can list and get KustoClusters.
	KustoClusters(namespace string) KustoClusterNamespaceLister
	KustoClusterListerExpansion
}

// kustoClusterLister implements the KustoClusterLister interface.
type kustoClusterLister struct {
	indexer cache.Indexer
}

// NewKustoClusterLister returns a new KustoClusterLister.
func NewKustoClusterLister(indexer cache.Indexer) KustoClusterLister {
	return &kustoClusterLister{indexer: indexer}
}

// List lists all KustoClusters in the indexer.
func (s *kustoClusterLister) List(selector labels.Selector) (ret []*v1alpha1.KustoCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KustoCluster))
	})
	return ret, err
}

// KustoClusters returns an object that can list and get KustoClusters.
func (s *kustoClusterLister) KustoClusters(namespace string) KustoClusterNamespaceLister {
	return kustoClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KustoClusterNamespaceLister helps list and get KustoClusters.
type KustoClusterNamespaceLister interface {
	// List lists all KustoClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KustoCluster, err error)
	// Get retrieves the KustoCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KustoCluster, error)
	KustoClusterNamespaceListerExpansion
}

// kustoClusterNamespaceLister implements the KustoClusterNamespaceLister
// interface.
type kustoClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KustoClusters in the indexer for a given namespace.
func (s kustoClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KustoCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KustoCluster))
	})
	return ret, err
}

// Get retrieves the KustoCluster from the indexer for a given namespace and name.
func (s kustoClusterNamespaceLister) Get(name string) (*v1alpha1.KustoCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kustocluster"), name)
	}
	return obj.(*v1alpha1.KustoCluster), nil
}
