/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogAnalyticsLinkedServiceLister helps list LogAnalyticsLinkedServices.
type LogAnalyticsLinkedServiceLister interface {
	// List lists all LogAnalyticsLinkedServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsLinkedService, err error)
	// LogAnalyticsLinkedServices returns an object that can list and get LogAnalyticsLinkedServices.
	LogAnalyticsLinkedServices(namespace string) LogAnalyticsLinkedServiceNamespaceLister
	LogAnalyticsLinkedServiceListerExpansion
}

// logAnalyticsLinkedServiceLister implements the LogAnalyticsLinkedServiceLister interface.
type logAnalyticsLinkedServiceLister struct {
	indexer cache.Indexer
}

// NewLogAnalyticsLinkedServiceLister returns a new LogAnalyticsLinkedServiceLister.
func NewLogAnalyticsLinkedServiceLister(indexer cache.Indexer) LogAnalyticsLinkedServiceLister {
	return &logAnalyticsLinkedServiceLister{indexer: indexer}
}

// List lists all LogAnalyticsLinkedServices in the indexer.
func (s *logAnalyticsLinkedServiceLister) List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsLinkedService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogAnalyticsLinkedService))
	})
	return ret, err
}

// LogAnalyticsLinkedServices returns an object that can list and get LogAnalyticsLinkedServices.
func (s *logAnalyticsLinkedServiceLister) LogAnalyticsLinkedServices(namespace string) LogAnalyticsLinkedServiceNamespaceLister {
	return logAnalyticsLinkedServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogAnalyticsLinkedServiceNamespaceLister helps list and get LogAnalyticsLinkedServices.
type LogAnalyticsLinkedServiceNamespaceLister interface {
	// List lists all LogAnalyticsLinkedServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsLinkedService, err error)
	// Get retrieves the LogAnalyticsLinkedService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LogAnalyticsLinkedService, error)
	LogAnalyticsLinkedServiceNamespaceListerExpansion
}

// logAnalyticsLinkedServiceNamespaceLister implements the LogAnalyticsLinkedServiceNamespaceLister
// interface.
type logAnalyticsLinkedServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogAnalyticsLinkedServices in the indexer for a given namespace.
func (s logAnalyticsLinkedServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsLinkedService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogAnalyticsLinkedService))
	})
	return ret, err
}

// Get retrieves the LogAnalyticsLinkedService from the indexer for a given namespace and name.
func (s logAnalyticsLinkedServiceNamespaceLister) Get(name string) (*v1alpha1.LogAnalyticsLinkedService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loganalyticslinkedservice"), name)
	}
	return obj.(*v1alpha1.LogAnalyticsLinkedService), nil
}
