/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// CosmosdbSQLDatabaseLister helps list CosmosdbSQLDatabases.
type CosmosdbSQLDatabaseLister interface {
	// List lists all CosmosdbSQLDatabases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbSQLDatabase, err error)
	// CosmosdbSQLDatabases returns an object that can list and get CosmosdbSQLDatabases.
	CosmosdbSQLDatabases(namespace string) CosmosdbSQLDatabaseNamespaceLister
	CosmosdbSQLDatabaseListerExpansion
}

// cosmosdbSQLDatabaseLister implements the CosmosdbSQLDatabaseLister interface.
type cosmosdbSQLDatabaseLister struct {
	indexer cache.Indexer
}

// NewCosmosdbSQLDatabaseLister returns a new CosmosdbSQLDatabaseLister.
func NewCosmosdbSQLDatabaseLister(indexer cache.Indexer) CosmosdbSQLDatabaseLister {
	return &cosmosdbSQLDatabaseLister{indexer: indexer}
}

// List lists all CosmosdbSQLDatabases in the indexer.
func (s *cosmosdbSQLDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbSQLDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbSQLDatabase))
	})
	return ret, err
}

// CosmosdbSQLDatabases returns an object that can list and get CosmosdbSQLDatabases.
func (s *cosmosdbSQLDatabaseLister) CosmosdbSQLDatabases(namespace string) CosmosdbSQLDatabaseNamespaceLister {
	return cosmosdbSQLDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CosmosdbSQLDatabaseNamespaceLister helps list and get CosmosdbSQLDatabases.
type CosmosdbSQLDatabaseNamespaceLister interface {
	// List lists all CosmosdbSQLDatabases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbSQLDatabase, err error)
	// Get retrieves the CosmosdbSQLDatabase from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CosmosdbSQLDatabase, error)
	CosmosdbSQLDatabaseNamespaceListerExpansion
}

// cosmosdbSQLDatabaseNamespaceLister implements the CosmosdbSQLDatabaseNamespaceLister
// interface.
type cosmosdbSQLDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CosmosdbSQLDatabases in the indexer for a given namespace.
func (s cosmosdbSQLDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbSQLDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbSQLDatabase))
	})
	return ret, err
}

// Get retrieves the CosmosdbSQLDatabase from the indexer for a given namespace and name.
func (s cosmosdbSQLDatabaseNamespaceLister) Get(name string) (*v1alpha1.CosmosdbSQLDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cosmosdbsqldatabase"), name)
	}
	return obj.(*v1alpha1.CosmosdbSQLDatabase), nil
}
