/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppConfigurationLister helps list AppConfigurations.
type AppConfigurationLister interface {
	// List lists all AppConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AppConfiguration, err error)
	// AppConfigurations returns an object that can list and get AppConfigurations.
	AppConfigurations(namespace string) AppConfigurationNamespaceLister
	AppConfigurationListerExpansion
}

// appConfigurationLister implements the AppConfigurationLister interface.
type appConfigurationLister struct {
	indexer cache.Indexer
}

// NewAppConfigurationLister returns a new AppConfigurationLister.
func NewAppConfigurationLister(indexer cache.Indexer) AppConfigurationLister {
	return &appConfigurationLister{indexer: indexer}
}

// List lists all AppConfigurations in the indexer.
func (s *appConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.AppConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppConfiguration))
	})
	return ret, err
}

// AppConfigurations returns an object that can list and get AppConfigurations.
func (s *appConfigurationLister) AppConfigurations(namespace string) AppConfigurationNamespaceLister {
	return appConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppConfigurationNamespaceLister helps list and get AppConfigurations.
type AppConfigurationNamespaceLister interface {
	// List lists all AppConfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AppConfiguration, err error)
	// Get retrieves the AppConfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AppConfiguration, error)
	AppConfigurationNamespaceListerExpansion
}

// appConfigurationNamespaceLister implements the AppConfigurationNamespaceLister
// interface.
type appConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppConfigurations in the indexer for a given namespace.
func (s appConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppConfiguration))
	})
	return ret, err
}

// Get retrieves the AppConfiguration from the indexer for a given namespace and name.
func (s appConfigurationNamespaceLister) Get(name string) (*v1alpha1.AppConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appconfiguration"), name)
	}
	return obj.(*v1alpha1.AppConfiguration), nil
}
