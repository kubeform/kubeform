/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CosmosdbMongoDatabaseLister helps list CosmosdbMongoDatabases.
type CosmosdbMongoDatabaseLister interface {
	// List lists all CosmosdbMongoDatabases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbMongoDatabase, err error)
	// CosmosdbMongoDatabases returns an object that can list and get CosmosdbMongoDatabases.
	CosmosdbMongoDatabases(namespace string) CosmosdbMongoDatabaseNamespaceLister
	CosmosdbMongoDatabaseListerExpansion
}

// cosmosdbMongoDatabaseLister implements the CosmosdbMongoDatabaseLister interface.
type cosmosdbMongoDatabaseLister struct {
	indexer cache.Indexer
}

// NewCosmosdbMongoDatabaseLister returns a new CosmosdbMongoDatabaseLister.
func NewCosmosdbMongoDatabaseLister(indexer cache.Indexer) CosmosdbMongoDatabaseLister {
	return &cosmosdbMongoDatabaseLister{indexer: indexer}
}

// List lists all CosmosdbMongoDatabases in the indexer.
func (s *cosmosdbMongoDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbMongoDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbMongoDatabase))
	})
	return ret, err
}

// CosmosdbMongoDatabases returns an object that can list and get CosmosdbMongoDatabases.
func (s *cosmosdbMongoDatabaseLister) CosmosdbMongoDatabases(namespace string) CosmosdbMongoDatabaseNamespaceLister {
	return cosmosdbMongoDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CosmosdbMongoDatabaseNamespaceLister helps list and get CosmosdbMongoDatabases.
type CosmosdbMongoDatabaseNamespaceLister interface {
	// List lists all CosmosdbMongoDatabases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbMongoDatabase, err error)
	// Get retrieves the CosmosdbMongoDatabase from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CosmosdbMongoDatabase, error)
	CosmosdbMongoDatabaseNamespaceListerExpansion
}

// cosmosdbMongoDatabaseNamespaceLister implements the CosmosdbMongoDatabaseNamespaceLister
// interface.
type cosmosdbMongoDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CosmosdbMongoDatabases in the indexer for a given namespace.
func (s cosmosdbMongoDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbMongoDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbMongoDatabase))
	})
	return ret, err
}

// Get retrieves the CosmosdbMongoDatabase from the indexer for a given namespace and name.
func (s cosmosdbMongoDatabaseNamespaceLister) Get(name string) (*v1alpha1.CosmosdbMongoDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cosmosdbmongodatabase"), name)
	}
	return obj.(*v1alpha1.CosmosdbMongoDatabase), nil
}
