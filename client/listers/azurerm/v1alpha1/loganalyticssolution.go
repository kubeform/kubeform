/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogAnalyticsSolutionLister helps list LogAnalyticsSolutions.
type LogAnalyticsSolutionLister interface {
	// List lists all LogAnalyticsSolutions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsSolution, err error)
	// LogAnalyticsSolutions returns an object that can list and get LogAnalyticsSolutions.
	LogAnalyticsSolutions(namespace string) LogAnalyticsSolutionNamespaceLister
	LogAnalyticsSolutionListerExpansion
}

// logAnalyticsSolutionLister implements the LogAnalyticsSolutionLister interface.
type logAnalyticsSolutionLister struct {
	indexer cache.Indexer
}

// NewLogAnalyticsSolutionLister returns a new LogAnalyticsSolutionLister.
func NewLogAnalyticsSolutionLister(indexer cache.Indexer) LogAnalyticsSolutionLister {
	return &logAnalyticsSolutionLister{indexer: indexer}
}

// List lists all LogAnalyticsSolutions in the indexer.
func (s *logAnalyticsSolutionLister) List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsSolution, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogAnalyticsSolution))
	})
	return ret, err
}

// LogAnalyticsSolutions returns an object that can list and get LogAnalyticsSolutions.
func (s *logAnalyticsSolutionLister) LogAnalyticsSolutions(namespace string) LogAnalyticsSolutionNamespaceLister {
	return logAnalyticsSolutionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogAnalyticsSolutionNamespaceLister helps list and get LogAnalyticsSolutions.
type LogAnalyticsSolutionNamespaceLister interface {
	// List lists all LogAnalyticsSolutions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsSolution, err error)
	// Get retrieves the LogAnalyticsSolution from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LogAnalyticsSolution, error)
	LogAnalyticsSolutionNamespaceListerExpansion
}

// logAnalyticsSolutionNamespaceLister implements the LogAnalyticsSolutionNamespaceLister
// interface.
type logAnalyticsSolutionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogAnalyticsSolutions in the indexer for a given namespace.
func (s logAnalyticsSolutionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogAnalyticsSolution, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogAnalyticsSolution))
	})
	return ret, err
}

// Get retrieves the LogAnalyticsSolution from the indexer for a given namespace and name.
func (s logAnalyticsSolutionNamespaceLister) Get(name string) (*v1alpha1.LogAnalyticsSolution, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loganalyticssolution"), name)
	}
	return obj.(*v1alpha1.LogAnalyticsSolution), nil
}
