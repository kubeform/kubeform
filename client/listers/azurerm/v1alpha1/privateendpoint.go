/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateEndpointLister helps list PrivateEndpoints.
type PrivateEndpointLister interface {
	// List lists all PrivateEndpoints in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateEndpoint, err error)
	// PrivateEndpoints returns an object that can list and get PrivateEndpoints.
	PrivateEndpoints(namespace string) PrivateEndpointNamespaceLister
	PrivateEndpointListerExpansion
}

// privateEndpointLister implements the PrivateEndpointLister interface.
type privateEndpointLister struct {
	indexer cache.Indexer
}

// NewPrivateEndpointLister returns a new PrivateEndpointLister.
func NewPrivateEndpointLister(indexer cache.Indexer) PrivateEndpointLister {
	return &privateEndpointLister{indexer: indexer}
}

// List lists all PrivateEndpoints in the indexer.
func (s *privateEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateEndpoint))
	})
	return ret, err
}

// PrivateEndpoints returns an object that can list and get PrivateEndpoints.
func (s *privateEndpointLister) PrivateEndpoints(namespace string) PrivateEndpointNamespaceLister {
	return privateEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateEndpointNamespaceLister helps list and get PrivateEndpoints.
type PrivateEndpointNamespaceLister interface {
	// List lists all PrivateEndpoints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateEndpoint, err error)
	// Get retrieves the PrivateEndpoint from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PrivateEndpoint, error)
	PrivateEndpointNamespaceListerExpansion
}

// privateEndpointNamespaceLister implements the PrivateEndpointNamespaceLister
// interface.
type privateEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateEndpoints in the indexer for a given namespace.
func (s privateEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateEndpoint))
	})
	return ret, err
}

// Get retrieves the PrivateEndpoint from the indexer for a given namespace and name.
func (s privateEndpointNamespaceLister) Get(name string) (*v1alpha1.PrivateEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privateendpoint"), name)
	}
	return obj.(*v1alpha1.PrivateEndpoint), nil
}
