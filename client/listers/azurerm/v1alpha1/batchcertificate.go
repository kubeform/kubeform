/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BatchCertificateLister helps list BatchCertificates.
type BatchCertificateLister interface {
	// List lists all BatchCertificates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BatchCertificate, err error)
	// BatchCertificates returns an object that can list and get BatchCertificates.
	BatchCertificates(namespace string) BatchCertificateNamespaceLister
	BatchCertificateListerExpansion
}

// batchCertificateLister implements the BatchCertificateLister interface.
type batchCertificateLister struct {
	indexer cache.Indexer
}

// NewBatchCertificateLister returns a new BatchCertificateLister.
func NewBatchCertificateLister(indexer cache.Indexer) BatchCertificateLister {
	return &batchCertificateLister{indexer: indexer}
}

// List lists all BatchCertificates in the indexer.
func (s *batchCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.BatchCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BatchCertificate))
	})
	return ret, err
}

// BatchCertificates returns an object that can list and get BatchCertificates.
func (s *batchCertificateLister) BatchCertificates(namespace string) BatchCertificateNamespaceLister {
	return batchCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BatchCertificateNamespaceLister helps list and get BatchCertificates.
type BatchCertificateNamespaceLister interface {
	// List lists all BatchCertificates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BatchCertificate, err error)
	// Get retrieves the BatchCertificate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BatchCertificate, error)
	BatchCertificateNamespaceListerExpansion
}

// batchCertificateNamespaceLister implements the BatchCertificateNamespaceLister
// interface.
type batchCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BatchCertificates in the indexer for a given namespace.
func (s batchCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BatchCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BatchCertificate))
	})
	return ret, err
}

// Get retrieves the BatchCertificate from the indexer for a given namespace and name.
func (s batchCertificateNamespaceLister) Get(name string) (*v1alpha1.BatchCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("batchcertificate"), name)
	}
	return obj.(*v1alpha1.BatchCertificate), nil
}
