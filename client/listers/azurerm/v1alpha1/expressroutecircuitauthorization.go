/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// ExpressRouteCircuitAuthorizationLister helps list ExpressRouteCircuitAuthorizations.
type ExpressRouteCircuitAuthorizationLister interface {
	// List lists all ExpressRouteCircuitAuthorizations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuitAuthorization, err error)
	// ExpressRouteCircuitAuthorizations returns an object that can list and get ExpressRouteCircuitAuthorizations.
	ExpressRouteCircuitAuthorizations(namespace string) ExpressRouteCircuitAuthorizationNamespaceLister
	ExpressRouteCircuitAuthorizationListerExpansion
}

// expressRouteCircuitAuthorizationLister implements the ExpressRouteCircuitAuthorizationLister interface.
type expressRouteCircuitAuthorizationLister struct {
	indexer cache.Indexer
}

// NewExpressRouteCircuitAuthorizationLister returns a new ExpressRouteCircuitAuthorizationLister.
func NewExpressRouteCircuitAuthorizationLister(indexer cache.Indexer) ExpressRouteCircuitAuthorizationLister {
	return &expressRouteCircuitAuthorizationLister{indexer: indexer}
}

// List lists all ExpressRouteCircuitAuthorizations in the indexer.
func (s *expressRouteCircuitAuthorizationLister) List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuitAuthorization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExpressRouteCircuitAuthorization))
	})
	return ret, err
}

// ExpressRouteCircuitAuthorizations returns an object that can list and get ExpressRouteCircuitAuthorizations.
func (s *expressRouteCircuitAuthorizationLister) ExpressRouteCircuitAuthorizations(namespace string) ExpressRouteCircuitAuthorizationNamespaceLister {
	return expressRouteCircuitAuthorizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExpressRouteCircuitAuthorizationNamespaceLister helps list and get ExpressRouteCircuitAuthorizations.
type ExpressRouteCircuitAuthorizationNamespaceLister interface {
	// List lists all ExpressRouteCircuitAuthorizations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuitAuthorization, err error)
	// Get retrieves the ExpressRouteCircuitAuthorization from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ExpressRouteCircuitAuthorization, error)
	ExpressRouteCircuitAuthorizationNamespaceListerExpansion
}

// expressRouteCircuitAuthorizationNamespaceLister implements the ExpressRouteCircuitAuthorizationNamespaceLister
// interface.
type expressRouteCircuitAuthorizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExpressRouteCircuitAuthorizations in the indexer for a given namespace.
func (s expressRouteCircuitAuthorizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuitAuthorization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExpressRouteCircuitAuthorization))
	})
	return ret, err
}

// Get retrieves the ExpressRouteCircuitAuthorization from the indexer for a given namespace and name.
func (s expressRouteCircuitAuthorizationNamespaceLister) Get(name string) (*v1alpha1.ExpressRouteCircuitAuthorization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("expressroutecircuitauthorization"), name)
	}
	return obj.(*v1alpha1.ExpressRouteCircuitAuthorization), nil
}
