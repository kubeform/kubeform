/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotificationHubNamespace_Lister helps list NotificationHubNamespace_s.
type NotificationHubNamespace_Lister interface {
	// List lists all NotificationHubNamespace_s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace_, err error)
	// NotificationHubNamespace_s returns an object that can list and get NotificationHubNamespace_s.
	NotificationHubNamespace_s(namespace string) NotificationHubNamespace_NamespaceLister
	NotificationHubNamespace_ListerExpansion
}

// notificationHubNamespace_Lister implements the NotificationHubNamespace_Lister interface.
type notificationHubNamespace_Lister struct {
	indexer cache.Indexer
}

// NewNotificationHubNamespace_Lister returns a new NotificationHubNamespace_Lister.
func NewNotificationHubNamespace_Lister(indexer cache.Indexer) NotificationHubNamespace_Lister {
	return &notificationHubNamespace_Lister{indexer: indexer}
}

// List lists all NotificationHubNamespace_s in the indexer.
func (s *notificationHubNamespace_Lister) List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace_, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationHubNamespace_))
	})
	return ret, err
}

// NotificationHubNamespace_s returns an object that can list and get NotificationHubNamespace_s.
func (s *notificationHubNamespace_Lister) NotificationHubNamespace_s(namespace string) NotificationHubNamespace_NamespaceLister {
	return notificationHubNamespace_NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificationHubNamespace_NamespaceLister helps list and get NotificationHubNamespace_s.
type NotificationHubNamespace_NamespaceLister interface {
	// List lists all NotificationHubNamespace_s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace_, err error)
	// Get retrieves the NotificationHubNamespace_ from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NotificationHubNamespace_, error)
	NotificationHubNamespace_NamespaceListerExpansion
}

// notificationHubNamespace_NamespaceLister implements the NotificationHubNamespace_NamespaceLister
// interface.
type notificationHubNamespace_NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotificationHubNamespace_s in the indexer for a given namespace.
func (s notificationHubNamespace_NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace_, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationHubNamespace_))
	})
	return ret, err
}

// Get retrieves the NotificationHubNamespace_ from the indexer for a given namespace and name.
func (s notificationHubNamespace_NamespaceLister) Get(name string) (*v1alpha1.NotificationHubNamespace_, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificationhubnamespace_"), name)
	}
	return obj.(*v1alpha1.NotificationHubNamespace_), nil
}
