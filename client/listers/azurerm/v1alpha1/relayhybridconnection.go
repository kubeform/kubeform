/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RelayHybridConnectionLister helps list RelayHybridConnections.
type RelayHybridConnectionLister interface {
	// List lists all RelayHybridConnections in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RelayHybridConnection, err error)
	// RelayHybridConnections returns an object that can list and get RelayHybridConnections.
	RelayHybridConnections(namespace string) RelayHybridConnectionNamespaceLister
	RelayHybridConnectionListerExpansion
}

// relayHybridConnectionLister implements the RelayHybridConnectionLister interface.
type relayHybridConnectionLister struct {
	indexer cache.Indexer
}

// NewRelayHybridConnectionLister returns a new RelayHybridConnectionLister.
func NewRelayHybridConnectionLister(indexer cache.Indexer) RelayHybridConnectionLister {
	return &relayHybridConnectionLister{indexer: indexer}
}

// List lists all RelayHybridConnections in the indexer.
func (s *relayHybridConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.RelayHybridConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RelayHybridConnection))
	})
	return ret, err
}

// RelayHybridConnections returns an object that can list and get RelayHybridConnections.
func (s *relayHybridConnectionLister) RelayHybridConnections(namespace string) RelayHybridConnectionNamespaceLister {
	return relayHybridConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RelayHybridConnectionNamespaceLister helps list and get RelayHybridConnections.
type RelayHybridConnectionNamespaceLister interface {
	// List lists all RelayHybridConnections in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RelayHybridConnection, err error)
	// Get retrieves the RelayHybridConnection from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RelayHybridConnection, error)
	RelayHybridConnectionNamespaceListerExpansion
}

// relayHybridConnectionNamespaceLister implements the RelayHybridConnectionNamespaceLister
// interface.
type relayHybridConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RelayHybridConnections in the indexer for a given namespace.
func (s relayHybridConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RelayHybridConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RelayHybridConnection))
	})
	return ret, err
}

// Get retrieves the RelayHybridConnection from the indexer for a given namespace and name.
func (s relayHybridConnectionNamespaceLister) Get(name string) (*v1alpha1.RelayHybridConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("relayhybridconnection"), name)
	}
	return obj.(*v1alpha1.RelayHybridConnection), nil
}
