/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataFactoryTriggerScheduleLister helps list DataFactoryTriggerSchedules.
type DataFactoryTriggerScheduleLister interface {
	// List lists all DataFactoryTriggerSchedules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryTriggerSchedule, err error)
	// DataFactoryTriggerSchedules returns an object that can list and get DataFactoryTriggerSchedules.
	DataFactoryTriggerSchedules(namespace string) DataFactoryTriggerScheduleNamespaceLister
	DataFactoryTriggerScheduleListerExpansion
}

// dataFactoryTriggerScheduleLister implements the DataFactoryTriggerScheduleLister interface.
type dataFactoryTriggerScheduleLister struct {
	indexer cache.Indexer
}

// NewDataFactoryTriggerScheduleLister returns a new DataFactoryTriggerScheduleLister.
func NewDataFactoryTriggerScheduleLister(indexer cache.Indexer) DataFactoryTriggerScheduleLister {
	return &dataFactoryTriggerScheduleLister{indexer: indexer}
}

// List lists all DataFactoryTriggerSchedules in the indexer.
func (s *dataFactoryTriggerScheduleLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryTriggerSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryTriggerSchedule))
	})
	return ret, err
}

// DataFactoryTriggerSchedules returns an object that can list and get DataFactoryTriggerSchedules.
func (s *dataFactoryTriggerScheduleLister) DataFactoryTriggerSchedules(namespace string) DataFactoryTriggerScheduleNamespaceLister {
	return dataFactoryTriggerScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryTriggerScheduleNamespaceLister helps list and get DataFactoryTriggerSchedules.
type DataFactoryTriggerScheduleNamespaceLister interface {
	// List lists all DataFactoryTriggerSchedules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryTriggerSchedule, err error)
	// Get retrieves the DataFactoryTriggerSchedule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactoryTriggerSchedule, error)
	DataFactoryTriggerScheduleNamespaceListerExpansion
}

// dataFactoryTriggerScheduleNamespaceLister implements the DataFactoryTriggerScheduleNamespaceLister
// interface.
type dataFactoryTriggerScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactoryTriggerSchedules in the indexer for a given namespace.
func (s dataFactoryTriggerScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryTriggerSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryTriggerSchedule))
	})
	return ret, err
}

// Get retrieves the DataFactoryTriggerSchedule from the indexer for a given namespace and name.
func (s dataFactoryTriggerScheduleNamespaceLister) Get(name string) (*v1alpha1.DataFactoryTriggerSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactorytriggerschedule"), name)
	}
	return obj.(*v1alpha1.DataFactoryTriggerSchedule), nil
}
