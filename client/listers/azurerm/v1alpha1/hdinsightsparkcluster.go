/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// HdinsightSparkClusterLister helps list HdinsightSparkClusters.
type HdinsightSparkClusterLister interface {
	// List lists all HdinsightSparkClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HdinsightSparkCluster, err error)
	// HdinsightSparkClusters returns an object that can list and get HdinsightSparkClusters.
	HdinsightSparkClusters(namespace string) HdinsightSparkClusterNamespaceLister
	HdinsightSparkClusterListerExpansion
}

// hdinsightSparkClusterLister implements the HdinsightSparkClusterLister interface.
type hdinsightSparkClusterLister struct {
	indexer cache.Indexer
}

// NewHdinsightSparkClusterLister returns a new HdinsightSparkClusterLister.
func NewHdinsightSparkClusterLister(indexer cache.Indexer) HdinsightSparkClusterLister {
	return &hdinsightSparkClusterLister{indexer: indexer}
}

// List lists all HdinsightSparkClusters in the indexer.
func (s *hdinsightSparkClusterLister) List(selector labels.Selector) (ret []*v1alpha1.HdinsightSparkCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HdinsightSparkCluster))
	})
	return ret, err
}

// HdinsightSparkClusters returns an object that can list and get HdinsightSparkClusters.
func (s *hdinsightSparkClusterLister) HdinsightSparkClusters(namespace string) HdinsightSparkClusterNamespaceLister {
	return hdinsightSparkClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HdinsightSparkClusterNamespaceLister helps list and get HdinsightSparkClusters.
type HdinsightSparkClusterNamespaceLister interface {
	// List lists all HdinsightSparkClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HdinsightSparkCluster, err error)
	// Get retrieves the HdinsightSparkCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HdinsightSparkCluster, error)
	HdinsightSparkClusterNamespaceListerExpansion
}

// hdinsightSparkClusterNamespaceLister implements the HdinsightSparkClusterNamespaceLister
// interface.
type hdinsightSparkClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HdinsightSparkClusters in the indexer for a given namespace.
func (s hdinsightSparkClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HdinsightSparkCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HdinsightSparkCluster))
	})
	return ret, err
}

// Get retrieves the HdinsightSparkCluster from the indexer for a given namespace and name.
func (s hdinsightSparkClusterNamespaceLister) Get(name string) (*v1alpha1.HdinsightSparkCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hdinsightsparkcluster"), name)
	}
	return obj.(*v1alpha1.HdinsightSparkCluster), nil
}
