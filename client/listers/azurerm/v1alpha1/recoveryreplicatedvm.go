/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RecoveryReplicatedVmLister helps list RecoveryReplicatedVms.
type RecoveryReplicatedVmLister interface {
	// List lists all RecoveryReplicatedVms in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RecoveryReplicatedVm, err error)
	// RecoveryReplicatedVms returns an object that can list and get RecoveryReplicatedVms.
	RecoveryReplicatedVms(namespace string) RecoveryReplicatedVmNamespaceLister
	RecoveryReplicatedVmListerExpansion
}

// recoveryReplicatedVmLister implements the RecoveryReplicatedVmLister interface.
type recoveryReplicatedVmLister struct {
	indexer cache.Indexer
}

// NewRecoveryReplicatedVmLister returns a new RecoveryReplicatedVmLister.
func NewRecoveryReplicatedVmLister(indexer cache.Indexer) RecoveryReplicatedVmLister {
	return &recoveryReplicatedVmLister{indexer: indexer}
}

// List lists all RecoveryReplicatedVms in the indexer.
func (s *recoveryReplicatedVmLister) List(selector labels.Selector) (ret []*v1alpha1.RecoveryReplicatedVm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecoveryReplicatedVm))
	})
	return ret, err
}

// RecoveryReplicatedVms returns an object that can list and get RecoveryReplicatedVms.
func (s *recoveryReplicatedVmLister) RecoveryReplicatedVms(namespace string) RecoveryReplicatedVmNamespaceLister {
	return recoveryReplicatedVmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RecoveryReplicatedVmNamespaceLister helps list and get RecoveryReplicatedVms.
type RecoveryReplicatedVmNamespaceLister interface {
	// List lists all RecoveryReplicatedVms in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RecoveryReplicatedVm, err error)
	// Get retrieves the RecoveryReplicatedVm from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RecoveryReplicatedVm, error)
	RecoveryReplicatedVmNamespaceListerExpansion
}

// recoveryReplicatedVmNamespaceLister implements the RecoveryReplicatedVmNamespaceLister
// interface.
type recoveryReplicatedVmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RecoveryReplicatedVms in the indexer for a given namespace.
func (s recoveryReplicatedVmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RecoveryReplicatedVm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecoveryReplicatedVm))
	})
	return ret, err
}

// Get retrieves the RecoveryReplicatedVm from the indexer for a given namespace and name.
func (s recoveryReplicatedVmNamespaceLister) Get(name string) (*v1alpha1.RecoveryReplicatedVm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("recoveryreplicatedvm"), name)
	}
	return obj.(*v1alpha1.RecoveryReplicatedVm), nil
}
