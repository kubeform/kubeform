/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MarketplaceAgreementLister helps list MarketplaceAgreements.
type MarketplaceAgreementLister interface {
	// List lists all MarketplaceAgreements in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MarketplaceAgreement, err error)
	// MarketplaceAgreements returns an object that can list and get MarketplaceAgreements.
	MarketplaceAgreements(namespace string) MarketplaceAgreementNamespaceLister
	MarketplaceAgreementListerExpansion
}

// marketplaceAgreementLister implements the MarketplaceAgreementLister interface.
type marketplaceAgreementLister struct {
	indexer cache.Indexer
}

// NewMarketplaceAgreementLister returns a new MarketplaceAgreementLister.
func NewMarketplaceAgreementLister(indexer cache.Indexer) MarketplaceAgreementLister {
	return &marketplaceAgreementLister{indexer: indexer}
}

// List lists all MarketplaceAgreements in the indexer.
func (s *marketplaceAgreementLister) List(selector labels.Selector) (ret []*v1alpha1.MarketplaceAgreement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MarketplaceAgreement))
	})
	return ret, err
}

// MarketplaceAgreements returns an object that can list and get MarketplaceAgreements.
func (s *marketplaceAgreementLister) MarketplaceAgreements(namespace string) MarketplaceAgreementNamespaceLister {
	return marketplaceAgreementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MarketplaceAgreementNamespaceLister helps list and get MarketplaceAgreements.
type MarketplaceAgreementNamespaceLister interface {
	// List lists all MarketplaceAgreements in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MarketplaceAgreement, err error)
	// Get retrieves the MarketplaceAgreement from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MarketplaceAgreement, error)
	MarketplaceAgreementNamespaceListerExpansion
}

// marketplaceAgreementNamespaceLister implements the MarketplaceAgreementNamespaceLister
// interface.
type marketplaceAgreementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MarketplaceAgreements in the indexer for a given namespace.
func (s marketplaceAgreementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MarketplaceAgreement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MarketplaceAgreement))
	})
	return ret, err
}

// Get retrieves the MarketplaceAgreement from the indexer for a given namespace and name.
func (s marketplaceAgreementNamespaceLister) Get(name string) (*v1alpha1.MarketplaceAgreement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("marketplaceagreement"), name)
	}
	return obj.(*v1alpha1.MarketplaceAgreement), nil
}
