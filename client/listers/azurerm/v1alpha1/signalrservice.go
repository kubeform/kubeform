/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SignalrServiceLister helps list SignalrServices.
type SignalrServiceLister interface {
	// List lists all SignalrServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SignalrService, err error)
	// SignalrServices returns an object that can list and get SignalrServices.
	SignalrServices(namespace string) SignalrServiceNamespaceLister
	SignalrServiceListerExpansion
}

// signalrServiceLister implements the SignalrServiceLister interface.
type signalrServiceLister struct {
	indexer cache.Indexer
}

// NewSignalrServiceLister returns a new SignalrServiceLister.
func NewSignalrServiceLister(indexer cache.Indexer) SignalrServiceLister {
	return &signalrServiceLister{indexer: indexer}
}

// List lists all SignalrServices in the indexer.
func (s *signalrServiceLister) List(selector labels.Selector) (ret []*v1alpha1.SignalrService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SignalrService))
	})
	return ret, err
}

// SignalrServices returns an object that can list and get SignalrServices.
func (s *signalrServiceLister) SignalrServices(namespace string) SignalrServiceNamespaceLister {
	return signalrServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SignalrServiceNamespaceLister helps list and get SignalrServices.
type SignalrServiceNamespaceLister interface {
	// List lists all SignalrServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SignalrService, err error)
	// Get retrieves the SignalrService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SignalrService, error)
	SignalrServiceNamespaceListerExpansion
}

// signalrServiceNamespaceLister implements the SignalrServiceNamespaceLister
// interface.
type signalrServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SignalrServices in the indexer for a given namespace.
func (s signalrServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SignalrService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SignalrService))
	})
	return ret, err
}

// Get retrieves the SignalrService from the indexer for a given namespace and name.
func (s signalrServiceNamespaceLister) Get(name string) (*v1alpha1.SignalrService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("signalrservice"), name)
	}
	return obj.(*v1alpha1.SignalrService), nil
}
