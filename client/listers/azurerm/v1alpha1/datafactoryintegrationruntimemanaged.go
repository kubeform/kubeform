/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataFactoryIntegrationRuntimeManagedLister helps list DataFactoryIntegrationRuntimeManageds.
type DataFactoryIntegrationRuntimeManagedLister interface {
	// List lists all DataFactoryIntegrationRuntimeManageds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryIntegrationRuntimeManaged, err error)
	// DataFactoryIntegrationRuntimeManageds returns an object that can list and get DataFactoryIntegrationRuntimeManageds.
	DataFactoryIntegrationRuntimeManageds(namespace string) DataFactoryIntegrationRuntimeManagedNamespaceLister
	DataFactoryIntegrationRuntimeManagedListerExpansion
}

// dataFactoryIntegrationRuntimeManagedLister implements the DataFactoryIntegrationRuntimeManagedLister interface.
type dataFactoryIntegrationRuntimeManagedLister struct {
	indexer cache.Indexer
}

// NewDataFactoryIntegrationRuntimeManagedLister returns a new DataFactoryIntegrationRuntimeManagedLister.
func NewDataFactoryIntegrationRuntimeManagedLister(indexer cache.Indexer) DataFactoryIntegrationRuntimeManagedLister {
	return &dataFactoryIntegrationRuntimeManagedLister{indexer: indexer}
}

// List lists all DataFactoryIntegrationRuntimeManageds in the indexer.
func (s *dataFactoryIntegrationRuntimeManagedLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryIntegrationRuntimeManaged, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryIntegrationRuntimeManaged))
	})
	return ret, err
}

// DataFactoryIntegrationRuntimeManageds returns an object that can list and get DataFactoryIntegrationRuntimeManageds.
func (s *dataFactoryIntegrationRuntimeManagedLister) DataFactoryIntegrationRuntimeManageds(namespace string) DataFactoryIntegrationRuntimeManagedNamespaceLister {
	return dataFactoryIntegrationRuntimeManagedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryIntegrationRuntimeManagedNamespaceLister helps list and get DataFactoryIntegrationRuntimeManageds.
type DataFactoryIntegrationRuntimeManagedNamespaceLister interface {
	// List lists all DataFactoryIntegrationRuntimeManageds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryIntegrationRuntimeManaged, err error)
	// Get retrieves the DataFactoryIntegrationRuntimeManaged from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactoryIntegrationRuntimeManaged, error)
	DataFactoryIntegrationRuntimeManagedNamespaceListerExpansion
}

// dataFactoryIntegrationRuntimeManagedNamespaceLister implements the DataFactoryIntegrationRuntimeManagedNamespaceLister
// interface.
type dataFactoryIntegrationRuntimeManagedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactoryIntegrationRuntimeManageds in the indexer for a given namespace.
func (s dataFactoryIntegrationRuntimeManagedNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryIntegrationRuntimeManaged, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryIntegrationRuntimeManaged))
	})
	return ret, err
}

// Get retrieves the DataFactoryIntegrationRuntimeManaged from the indexer for a given namespace and name.
func (s dataFactoryIntegrationRuntimeManagedNamespaceLister) Get(name string) (*v1alpha1.DataFactoryIntegrationRuntimeManaged, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactoryintegrationruntimemanaged"), name)
	}
	return obj.(*v1alpha1.DataFactoryIntegrationRuntimeManaged), nil
}
