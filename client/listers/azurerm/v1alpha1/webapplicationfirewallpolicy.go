/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WebApplicationFirewallPolicyLister helps list WebApplicationFirewallPolicies.
type WebApplicationFirewallPolicyLister interface {
	// List lists all WebApplicationFirewallPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WebApplicationFirewallPolicy, err error)
	// WebApplicationFirewallPolicies returns an object that can list and get WebApplicationFirewallPolicies.
	WebApplicationFirewallPolicies(namespace string) WebApplicationFirewallPolicyNamespaceLister
	WebApplicationFirewallPolicyListerExpansion
}

// webApplicationFirewallPolicyLister implements the WebApplicationFirewallPolicyLister interface.
type webApplicationFirewallPolicyLister struct {
	indexer cache.Indexer
}

// NewWebApplicationFirewallPolicyLister returns a new WebApplicationFirewallPolicyLister.
func NewWebApplicationFirewallPolicyLister(indexer cache.Indexer) WebApplicationFirewallPolicyLister {
	return &webApplicationFirewallPolicyLister{indexer: indexer}
}

// List lists all WebApplicationFirewallPolicies in the indexer.
func (s *webApplicationFirewallPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.WebApplicationFirewallPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebApplicationFirewallPolicy))
	})
	return ret, err
}

// WebApplicationFirewallPolicies returns an object that can list and get WebApplicationFirewallPolicies.
func (s *webApplicationFirewallPolicyLister) WebApplicationFirewallPolicies(namespace string) WebApplicationFirewallPolicyNamespaceLister {
	return webApplicationFirewallPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebApplicationFirewallPolicyNamespaceLister helps list and get WebApplicationFirewallPolicies.
type WebApplicationFirewallPolicyNamespaceLister interface {
	// List lists all WebApplicationFirewallPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WebApplicationFirewallPolicy, err error)
	// Get retrieves the WebApplicationFirewallPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WebApplicationFirewallPolicy, error)
	WebApplicationFirewallPolicyNamespaceListerExpansion
}

// webApplicationFirewallPolicyNamespaceLister implements the WebApplicationFirewallPolicyNamespaceLister
// interface.
type webApplicationFirewallPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebApplicationFirewallPolicies in the indexer for a given namespace.
func (s webApplicationFirewallPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebApplicationFirewallPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebApplicationFirewallPolicy))
	})
	return ret, err
}

// Get retrieves the WebApplicationFirewallPolicy from the indexer for a given namespace and name.
func (s webApplicationFirewallPolicyNamespaceLister) Get(name string) (*v1alpha1.WebApplicationFirewallPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webapplicationfirewallpolicy"), name)
	}
	return obj.(*v1alpha1.WebApplicationFirewallPolicy), nil
}
