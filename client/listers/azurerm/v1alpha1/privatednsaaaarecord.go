/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateDNSAaaaRecordLister helps list PrivateDNSAaaaRecords.
type PrivateDNSAaaaRecordLister interface {
	// List lists all PrivateDNSAaaaRecords in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSAaaaRecord, err error)
	// PrivateDNSAaaaRecords returns an object that can list and get PrivateDNSAaaaRecords.
	PrivateDNSAaaaRecords(namespace string) PrivateDNSAaaaRecordNamespaceLister
	PrivateDNSAaaaRecordListerExpansion
}

// privateDNSAaaaRecordLister implements the PrivateDNSAaaaRecordLister interface.
type privateDNSAaaaRecordLister struct {
	indexer cache.Indexer
}

// NewPrivateDNSAaaaRecordLister returns a new PrivateDNSAaaaRecordLister.
func NewPrivateDNSAaaaRecordLister(indexer cache.Indexer) PrivateDNSAaaaRecordLister {
	return &privateDNSAaaaRecordLister{indexer: indexer}
}

// List lists all PrivateDNSAaaaRecords in the indexer.
func (s *privateDNSAaaaRecordLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSAaaaRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSAaaaRecord))
	})
	return ret, err
}

// PrivateDNSAaaaRecords returns an object that can list and get PrivateDNSAaaaRecords.
func (s *privateDNSAaaaRecordLister) PrivateDNSAaaaRecords(namespace string) PrivateDNSAaaaRecordNamespaceLister {
	return privateDNSAaaaRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateDNSAaaaRecordNamespaceLister helps list and get PrivateDNSAaaaRecords.
type PrivateDNSAaaaRecordNamespaceLister interface {
	// List lists all PrivateDNSAaaaRecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSAaaaRecord, err error)
	// Get retrieves the PrivateDNSAaaaRecord from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PrivateDNSAaaaRecord, error)
	PrivateDNSAaaaRecordNamespaceListerExpansion
}

// privateDNSAaaaRecordNamespaceLister implements the PrivateDNSAaaaRecordNamespaceLister
// interface.
type privateDNSAaaaRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateDNSAaaaRecords in the indexer for a given namespace.
func (s privateDNSAaaaRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSAaaaRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSAaaaRecord))
	})
	return ret, err
}

// Get retrieves the PrivateDNSAaaaRecord from the indexer for a given namespace and name.
func (s privateDNSAaaaRecordNamespaceLister) Get(name string) (*v1alpha1.PrivateDNSAaaaRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatednsaaaarecord"), name)
	}
	return obj.(*v1alpha1.PrivateDNSAaaaRecord), nil
}
