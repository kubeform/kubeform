/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageManagementPolicyLister helps list StorageManagementPolicies.
type StorageManagementPolicyLister interface {
	// List lists all StorageManagementPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageManagementPolicy, err error)
	// StorageManagementPolicies returns an object that can list and get StorageManagementPolicies.
	StorageManagementPolicies(namespace string) StorageManagementPolicyNamespaceLister
	StorageManagementPolicyListerExpansion
}

// storageManagementPolicyLister implements the StorageManagementPolicyLister interface.
type storageManagementPolicyLister struct {
	indexer cache.Indexer
}

// NewStorageManagementPolicyLister returns a new StorageManagementPolicyLister.
func NewStorageManagementPolicyLister(indexer cache.Indexer) StorageManagementPolicyLister {
	return &storageManagementPolicyLister{indexer: indexer}
}

// List lists all StorageManagementPolicies in the indexer.
func (s *storageManagementPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.StorageManagementPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageManagementPolicy))
	})
	return ret, err
}

// StorageManagementPolicies returns an object that can list and get StorageManagementPolicies.
func (s *storageManagementPolicyLister) StorageManagementPolicies(namespace string) StorageManagementPolicyNamespaceLister {
	return storageManagementPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageManagementPolicyNamespaceLister helps list and get StorageManagementPolicies.
type StorageManagementPolicyNamespaceLister interface {
	// List lists all StorageManagementPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageManagementPolicy, err error)
	// Get retrieves the StorageManagementPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageManagementPolicy, error)
	StorageManagementPolicyNamespaceListerExpansion
}

// storageManagementPolicyNamespaceLister implements the StorageManagementPolicyNamespaceLister
// interface.
type storageManagementPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageManagementPolicies in the indexer for a given namespace.
func (s storageManagementPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageManagementPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageManagementPolicy))
	})
	return ret, err
}

// Get retrieves the StorageManagementPolicy from the indexer for a given namespace and name.
func (s storageManagementPolicyNamespaceLister) Get(name string) (*v1alpha1.StorageManagementPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagemanagementpolicy"), name)
	}
	return obj.(*v1alpha1.StorageManagementPolicy), nil
}
