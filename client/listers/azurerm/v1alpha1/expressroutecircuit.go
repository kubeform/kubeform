/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExpressRouteCircuitLister helps list ExpressRouteCircuits.
type ExpressRouteCircuitLister interface {
	// List lists all ExpressRouteCircuits in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuit, err error)
	// ExpressRouteCircuits returns an object that can list and get ExpressRouteCircuits.
	ExpressRouteCircuits(namespace string) ExpressRouteCircuitNamespaceLister
	ExpressRouteCircuitListerExpansion
}

// expressRouteCircuitLister implements the ExpressRouteCircuitLister interface.
type expressRouteCircuitLister struct {
	indexer cache.Indexer
}

// NewExpressRouteCircuitLister returns a new ExpressRouteCircuitLister.
func NewExpressRouteCircuitLister(indexer cache.Indexer) ExpressRouteCircuitLister {
	return &expressRouteCircuitLister{indexer: indexer}
}

// List lists all ExpressRouteCircuits in the indexer.
func (s *expressRouteCircuitLister) List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExpressRouteCircuit))
	})
	return ret, err
}

// ExpressRouteCircuits returns an object that can list and get ExpressRouteCircuits.
func (s *expressRouteCircuitLister) ExpressRouteCircuits(namespace string) ExpressRouteCircuitNamespaceLister {
	return expressRouteCircuitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExpressRouteCircuitNamespaceLister helps list and get ExpressRouteCircuits.
type ExpressRouteCircuitNamespaceLister interface {
	// List lists all ExpressRouteCircuits in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuit, err error)
	// Get retrieves the ExpressRouteCircuit from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ExpressRouteCircuit, error)
	ExpressRouteCircuitNamespaceListerExpansion
}

// expressRouteCircuitNamespaceLister implements the ExpressRouteCircuitNamespaceLister
// interface.
type expressRouteCircuitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExpressRouteCircuits in the indexer for a given namespace.
func (s expressRouteCircuitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExpressRouteCircuit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExpressRouteCircuit))
	})
	return ret, err
}

// Get retrieves the ExpressRouteCircuit from the indexer for a given namespace and name.
func (s expressRouteCircuitNamespaceLister) Get(name string) (*v1alpha1.ExpressRouteCircuit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("expressroutecircuit"), name)
	}
	return obj.(*v1alpha1.ExpressRouteCircuit), nil
}
