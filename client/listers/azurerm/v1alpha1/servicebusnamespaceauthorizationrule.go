/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServicebusNamespaceAuthorizationRuleLister helps list ServicebusNamespaceAuthorizationRules.
type ServicebusNamespaceAuthorizationRuleLister interface {
	// List lists all ServicebusNamespaceAuthorizationRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceAuthorizationRule, err error)
	// ServicebusNamespaceAuthorizationRules returns an object that can list and get ServicebusNamespaceAuthorizationRules.
	ServicebusNamespaceAuthorizationRules(namespace string) ServicebusNamespaceAuthorizationRuleNamespaceLister
	ServicebusNamespaceAuthorizationRuleListerExpansion
}

// servicebusNamespaceAuthorizationRuleLister implements the ServicebusNamespaceAuthorizationRuleLister interface.
type servicebusNamespaceAuthorizationRuleLister struct {
	indexer cache.Indexer
}

// NewServicebusNamespaceAuthorizationRuleLister returns a new ServicebusNamespaceAuthorizationRuleLister.
func NewServicebusNamespaceAuthorizationRuleLister(indexer cache.Indexer) ServicebusNamespaceAuthorizationRuleLister {
	return &servicebusNamespaceAuthorizationRuleLister{indexer: indexer}
}

// List lists all ServicebusNamespaceAuthorizationRules in the indexer.
func (s *servicebusNamespaceAuthorizationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceAuthorizationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicebusNamespaceAuthorizationRule))
	})
	return ret, err
}

// ServicebusNamespaceAuthorizationRules returns an object that can list and get ServicebusNamespaceAuthorizationRules.
func (s *servicebusNamespaceAuthorizationRuleLister) ServicebusNamespaceAuthorizationRules(namespace string) ServicebusNamespaceAuthorizationRuleNamespaceLister {
	return servicebusNamespaceAuthorizationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicebusNamespaceAuthorizationRuleNamespaceLister helps list and get ServicebusNamespaceAuthorizationRules.
type ServicebusNamespaceAuthorizationRuleNamespaceLister interface {
	// List lists all ServicebusNamespaceAuthorizationRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceAuthorizationRule, err error)
	// Get retrieves the ServicebusNamespaceAuthorizationRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServicebusNamespaceAuthorizationRule, error)
	ServicebusNamespaceAuthorizationRuleNamespaceListerExpansion
}

// servicebusNamespaceAuthorizationRuleNamespaceLister implements the ServicebusNamespaceAuthorizationRuleNamespaceLister
// interface.
type servicebusNamespaceAuthorizationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicebusNamespaceAuthorizationRules in the indexer for a given namespace.
func (s servicebusNamespaceAuthorizationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceAuthorizationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicebusNamespaceAuthorizationRule))
	})
	return ret, err
}

// Get retrieves the ServicebusNamespaceAuthorizationRule from the indexer for a given namespace and name.
func (s servicebusNamespaceAuthorizationRuleNamespaceLister) Get(name string) (*v1alpha1.ServicebusNamespaceAuthorizationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicebusnamespaceauthorizationrule"), name)
	}
	return obj.(*v1alpha1.ServicebusNamespaceAuthorizationRule), nil
}
