/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualWANLister helps list VirtualWANs.
type VirtualWANLister interface {
	// List lists all VirtualWANs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualWAN, err error)
	// VirtualWANs returns an object that can list and get VirtualWANs.
	VirtualWANs(namespace string) VirtualWANNamespaceLister
	VirtualWANListerExpansion
}

// virtualWANLister implements the VirtualWANLister interface.
type virtualWANLister struct {
	indexer cache.Indexer
}

// NewVirtualWANLister returns a new VirtualWANLister.
func NewVirtualWANLister(indexer cache.Indexer) VirtualWANLister {
	return &virtualWANLister{indexer: indexer}
}

// List lists all VirtualWANs in the indexer.
func (s *virtualWANLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualWAN, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualWAN))
	})
	return ret, err
}

// VirtualWANs returns an object that can list and get VirtualWANs.
func (s *virtualWANLister) VirtualWANs(namespace string) VirtualWANNamespaceLister {
	return virtualWANNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualWANNamespaceLister helps list and get VirtualWANs.
type VirtualWANNamespaceLister interface {
	// List lists all VirtualWANs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualWAN, err error)
	// Get retrieves the VirtualWAN from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VirtualWAN, error)
	VirtualWANNamespaceListerExpansion
}

// virtualWANNamespaceLister implements the VirtualWANNamespaceLister
// interface.
type virtualWANNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualWANs in the indexer for a given namespace.
func (s virtualWANNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualWAN, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualWAN))
	})
	return ret, err
}

// Get retrieves the VirtualWAN from the indexer for a given namespace and name.
func (s virtualWANNamespaceLister) Get(name string) (*v1alpha1.VirtualWAN, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualwan"), name)
	}
	return obj.(*v1alpha1.VirtualWAN), nil
}
