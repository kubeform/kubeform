/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisFirewallRuleLister helps list RedisFirewallRules.
type RedisFirewallRuleLister interface {
	// List lists all RedisFirewallRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RedisFirewallRule, err error)
	// RedisFirewallRules returns an object that can list and get RedisFirewallRules.
	RedisFirewallRules(namespace string) RedisFirewallRuleNamespaceLister
	RedisFirewallRuleListerExpansion
}

// redisFirewallRuleLister implements the RedisFirewallRuleLister interface.
type redisFirewallRuleLister struct {
	indexer cache.Indexer
}

// NewRedisFirewallRuleLister returns a new RedisFirewallRuleLister.
func NewRedisFirewallRuleLister(indexer cache.Indexer) RedisFirewallRuleLister {
	return &redisFirewallRuleLister{indexer: indexer}
}

// List lists all RedisFirewallRules in the indexer.
func (s *redisFirewallRuleLister) List(selector labels.Selector) (ret []*v1alpha1.RedisFirewallRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisFirewallRule))
	})
	return ret, err
}

// RedisFirewallRules returns an object that can list and get RedisFirewallRules.
func (s *redisFirewallRuleLister) RedisFirewallRules(namespace string) RedisFirewallRuleNamespaceLister {
	return redisFirewallRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisFirewallRuleNamespaceLister helps list and get RedisFirewallRules.
type RedisFirewallRuleNamespaceLister interface {
	// List lists all RedisFirewallRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RedisFirewallRule, err error)
	// Get retrieves the RedisFirewallRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RedisFirewallRule, error)
	RedisFirewallRuleNamespaceListerExpansion
}

// redisFirewallRuleNamespaceLister implements the RedisFirewallRuleNamespaceLister
// interface.
type redisFirewallRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisFirewallRules in the indexer for a given namespace.
func (s redisFirewallRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisFirewallRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisFirewallRule))
	})
	return ret, err
}

// Get retrieves the RedisFirewallRule from the indexer for a given namespace and name.
func (s redisFirewallRuleNamespaceLister) Get(name string) (*v1alpha1.RedisFirewallRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redisfirewallrule"), name)
	}
	return obj.(*v1alpha1.RedisFirewallRule), nil
}
