/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventgridEventSubscriptionLister helps list EventgridEventSubscriptions.
type EventgridEventSubscriptionLister interface {
	// List lists all EventgridEventSubscriptions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridEventSubscription, err error)
	// EventgridEventSubscriptions returns an object that can list and get EventgridEventSubscriptions.
	EventgridEventSubscriptions(namespace string) EventgridEventSubscriptionNamespaceLister
	EventgridEventSubscriptionListerExpansion
}

// eventgridEventSubscriptionLister implements the EventgridEventSubscriptionLister interface.
type eventgridEventSubscriptionLister struct {
	indexer cache.Indexer
}

// NewEventgridEventSubscriptionLister returns a new EventgridEventSubscriptionLister.
func NewEventgridEventSubscriptionLister(indexer cache.Indexer) EventgridEventSubscriptionLister {
	return &eventgridEventSubscriptionLister{indexer: indexer}
}

// List lists all EventgridEventSubscriptions in the indexer.
func (s *eventgridEventSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridEventSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridEventSubscription))
	})
	return ret, err
}

// EventgridEventSubscriptions returns an object that can list and get EventgridEventSubscriptions.
func (s *eventgridEventSubscriptionLister) EventgridEventSubscriptions(namespace string) EventgridEventSubscriptionNamespaceLister {
	return eventgridEventSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventgridEventSubscriptionNamespaceLister helps list and get EventgridEventSubscriptions.
type EventgridEventSubscriptionNamespaceLister interface {
	// List lists all EventgridEventSubscriptions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridEventSubscription, err error)
	// Get retrieves the EventgridEventSubscription from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EventgridEventSubscription, error)
	EventgridEventSubscriptionNamespaceListerExpansion
}

// eventgridEventSubscriptionNamespaceLister implements the EventgridEventSubscriptionNamespaceLister
// interface.
type eventgridEventSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventgridEventSubscriptions in the indexer for a given namespace.
func (s eventgridEventSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridEventSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridEventSubscription))
	})
	return ret, err
}

// Get retrieves the EventgridEventSubscription from the indexer for a given namespace and name.
func (s eventgridEventSubscriptionNamespaceLister) Get(name string) (*v1alpha1.EventgridEventSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventgrideventsubscription"), name)
	}
	return obj.(*v1alpha1.EventgridEventSubscription), nil
}
