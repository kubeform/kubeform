/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServicebusTopicLister helps list ServicebusTopics.
type ServicebusTopicLister interface {
	// List lists all ServicebusTopics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServicebusTopic, err error)
	// ServicebusTopics returns an object that can list and get ServicebusTopics.
	ServicebusTopics(namespace string) ServicebusTopicNamespaceLister
	ServicebusTopicListerExpansion
}

// servicebusTopicLister implements the ServicebusTopicLister interface.
type servicebusTopicLister struct {
	indexer cache.Indexer
}

// NewServicebusTopicLister returns a new ServicebusTopicLister.
func NewServicebusTopicLister(indexer cache.Indexer) ServicebusTopicLister {
	return &servicebusTopicLister{indexer: indexer}
}

// List lists all ServicebusTopics in the indexer.
func (s *servicebusTopicLister) List(selector labels.Selector) (ret []*v1alpha1.ServicebusTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicebusTopic))
	})
	return ret, err
}

// ServicebusTopics returns an object that can list and get ServicebusTopics.
func (s *servicebusTopicLister) ServicebusTopics(namespace string) ServicebusTopicNamespaceLister {
	return servicebusTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicebusTopicNamespaceLister helps list and get ServicebusTopics.
type ServicebusTopicNamespaceLister interface {
	// List lists all ServicebusTopics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServicebusTopic, err error)
	// Get retrieves the ServicebusTopic from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServicebusTopic, error)
	ServicebusTopicNamespaceListerExpansion
}

// servicebusTopicNamespaceLister implements the ServicebusTopicNamespaceLister
// interface.
type servicebusTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicebusTopics in the indexer for a given namespace.
func (s servicebusTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicebusTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicebusTopic))
	})
	return ret, err
}

// Get retrieves the ServicebusTopic from the indexer for a given namespace and name.
func (s servicebusTopicNamespaceLister) Get(name string) (*v1alpha1.ServicebusTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicebustopic"), name)
	}
	return obj.(*v1alpha1.ServicebusTopic), nil
}
