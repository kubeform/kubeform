/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageDataLakeGen2FilesystemLister helps list StorageDataLakeGen2Filesystems.
type StorageDataLakeGen2FilesystemLister interface {
	// List lists all StorageDataLakeGen2Filesystems in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageDataLakeGen2Filesystem, err error)
	// StorageDataLakeGen2Filesystems returns an object that can list and get StorageDataLakeGen2Filesystems.
	StorageDataLakeGen2Filesystems(namespace string) StorageDataLakeGen2FilesystemNamespaceLister
	StorageDataLakeGen2FilesystemListerExpansion
}

// storageDataLakeGen2FilesystemLister implements the StorageDataLakeGen2FilesystemLister interface.
type storageDataLakeGen2FilesystemLister struct {
	indexer cache.Indexer
}

// NewStorageDataLakeGen2FilesystemLister returns a new StorageDataLakeGen2FilesystemLister.
func NewStorageDataLakeGen2FilesystemLister(indexer cache.Indexer) StorageDataLakeGen2FilesystemLister {
	return &storageDataLakeGen2FilesystemLister{indexer: indexer}
}

// List lists all StorageDataLakeGen2Filesystems in the indexer.
func (s *storageDataLakeGen2FilesystemLister) List(selector labels.Selector) (ret []*v1alpha1.StorageDataLakeGen2Filesystem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageDataLakeGen2Filesystem))
	})
	return ret, err
}

// StorageDataLakeGen2Filesystems returns an object that can list and get StorageDataLakeGen2Filesystems.
func (s *storageDataLakeGen2FilesystemLister) StorageDataLakeGen2Filesystems(namespace string) StorageDataLakeGen2FilesystemNamespaceLister {
	return storageDataLakeGen2FilesystemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageDataLakeGen2FilesystemNamespaceLister helps list and get StorageDataLakeGen2Filesystems.
type StorageDataLakeGen2FilesystemNamespaceLister interface {
	// List lists all StorageDataLakeGen2Filesystems in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageDataLakeGen2Filesystem, err error)
	// Get retrieves the StorageDataLakeGen2Filesystem from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageDataLakeGen2Filesystem, error)
	StorageDataLakeGen2FilesystemNamespaceListerExpansion
}

// storageDataLakeGen2FilesystemNamespaceLister implements the StorageDataLakeGen2FilesystemNamespaceLister
// interface.
type storageDataLakeGen2FilesystemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageDataLakeGen2Filesystems in the indexer for a given namespace.
func (s storageDataLakeGen2FilesystemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageDataLakeGen2Filesystem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageDataLakeGen2Filesystem))
	})
	return ret, err
}

// Get retrieves the StorageDataLakeGen2Filesystem from the indexer for a given namespace and name.
func (s storageDataLakeGen2FilesystemNamespaceLister) Get(name string) (*v1alpha1.StorageDataLakeGen2Filesystem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagedatalakegen2filesystem"), name)
	}
	return obj.(*v1alpha1.StorageDataLakeGen2Filesystem), nil
}
