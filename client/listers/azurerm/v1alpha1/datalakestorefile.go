/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataLakeStoreFileLister helps list DataLakeStoreFiles.
type DataLakeStoreFileLister interface {
	// List lists all DataLakeStoreFiles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeStoreFile, err error)
	// DataLakeStoreFiles returns an object that can list and get DataLakeStoreFiles.
	DataLakeStoreFiles(namespace string) DataLakeStoreFileNamespaceLister
	DataLakeStoreFileListerExpansion
}

// dataLakeStoreFileLister implements the DataLakeStoreFileLister interface.
type dataLakeStoreFileLister struct {
	indexer cache.Indexer
}

// NewDataLakeStoreFileLister returns a new DataLakeStoreFileLister.
func NewDataLakeStoreFileLister(indexer cache.Indexer) DataLakeStoreFileLister {
	return &dataLakeStoreFileLister{indexer: indexer}
}

// List lists all DataLakeStoreFiles in the indexer.
func (s *dataLakeStoreFileLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeStoreFile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeStoreFile))
	})
	return ret, err
}

// DataLakeStoreFiles returns an object that can list and get DataLakeStoreFiles.
func (s *dataLakeStoreFileLister) DataLakeStoreFiles(namespace string) DataLakeStoreFileNamespaceLister {
	return dataLakeStoreFileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataLakeStoreFileNamespaceLister helps list and get DataLakeStoreFiles.
type DataLakeStoreFileNamespaceLister interface {
	// List lists all DataLakeStoreFiles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeStoreFile, err error)
	// Get retrieves the DataLakeStoreFile from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataLakeStoreFile, error)
	DataLakeStoreFileNamespaceListerExpansion
}

// dataLakeStoreFileNamespaceLister implements the DataLakeStoreFileNamespaceLister
// interface.
type dataLakeStoreFileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataLakeStoreFiles in the indexer for a given namespace.
func (s dataLakeStoreFileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeStoreFile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeStoreFile))
	})
	return ret, err
}

// Get retrieves the DataLakeStoreFile from the indexer for a given namespace and name.
func (s dataLakeStoreFileNamespaceLister) Get(name string) (*v1alpha1.DataLakeStoreFile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datalakestorefile"), name)
	}
	return obj.(*v1alpha1.DataLakeStoreFile), nil
}
