/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IothubEndpointEventhubLister helps list IothubEndpointEventhubs.
type IothubEndpointEventhubLister interface {
	// List lists all IothubEndpointEventhubs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IothubEndpointEventhub, err error)
	// IothubEndpointEventhubs returns an object that can list and get IothubEndpointEventhubs.
	IothubEndpointEventhubs(namespace string) IothubEndpointEventhubNamespaceLister
	IothubEndpointEventhubListerExpansion
}

// iothubEndpointEventhubLister implements the IothubEndpointEventhubLister interface.
type iothubEndpointEventhubLister struct {
	indexer cache.Indexer
}

// NewIothubEndpointEventhubLister returns a new IothubEndpointEventhubLister.
func NewIothubEndpointEventhubLister(indexer cache.Indexer) IothubEndpointEventhubLister {
	return &iothubEndpointEventhubLister{indexer: indexer}
}

// List lists all IothubEndpointEventhubs in the indexer.
func (s *iothubEndpointEventhubLister) List(selector labels.Selector) (ret []*v1alpha1.IothubEndpointEventhub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubEndpointEventhub))
	})
	return ret, err
}

// IothubEndpointEventhubs returns an object that can list and get IothubEndpointEventhubs.
func (s *iothubEndpointEventhubLister) IothubEndpointEventhubs(namespace string) IothubEndpointEventhubNamespaceLister {
	return iothubEndpointEventhubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IothubEndpointEventhubNamespaceLister helps list and get IothubEndpointEventhubs.
type IothubEndpointEventhubNamespaceLister interface {
	// List lists all IothubEndpointEventhubs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IothubEndpointEventhub, err error)
	// Get retrieves the IothubEndpointEventhub from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IothubEndpointEventhub, error)
	IothubEndpointEventhubNamespaceListerExpansion
}

// iothubEndpointEventhubNamespaceLister implements the IothubEndpointEventhubNamespaceLister
// interface.
type iothubEndpointEventhubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IothubEndpointEventhubs in the indexer for a given namespace.
func (s iothubEndpointEventhubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IothubEndpointEventhub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubEndpointEventhub))
	})
	return ret, err
}

// Get retrieves the IothubEndpointEventhub from the indexer for a given namespace and name.
func (s iothubEndpointEventhubNamespaceLister) Get(name string) (*v1alpha1.IothubEndpointEventhub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iothubendpointeventhub"), name)
	}
	return obj.(*v1alpha1.IothubEndpointEventhub), nil
}
