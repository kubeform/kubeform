/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupProtectedVmLister helps list BackupProtectedVms.
type BackupProtectedVmLister interface {
	// List lists all BackupProtectedVms in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedVm, err error)
	// BackupProtectedVms returns an object that can list and get BackupProtectedVms.
	BackupProtectedVms(namespace string) BackupProtectedVmNamespaceLister
	BackupProtectedVmListerExpansion
}

// backupProtectedVmLister implements the BackupProtectedVmLister interface.
type backupProtectedVmLister struct {
	indexer cache.Indexer
}

// NewBackupProtectedVmLister returns a new BackupProtectedVmLister.
func NewBackupProtectedVmLister(indexer cache.Indexer) BackupProtectedVmLister {
	return &backupProtectedVmLister{indexer: indexer}
}

// List lists all BackupProtectedVms in the indexer.
func (s *backupProtectedVmLister) List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedVm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupProtectedVm))
	})
	return ret, err
}

// BackupProtectedVms returns an object that can list and get BackupProtectedVms.
func (s *backupProtectedVmLister) BackupProtectedVms(namespace string) BackupProtectedVmNamespaceLister {
	return backupProtectedVmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupProtectedVmNamespaceLister helps list and get BackupProtectedVms.
type BackupProtectedVmNamespaceLister interface {
	// List lists all BackupProtectedVms in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedVm, err error)
	// Get retrieves the BackupProtectedVm from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BackupProtectedVm, error)
	BackupProtectedVmNamespaceListerExpansion
}

// backupProtectedVmNamespaceLister implements the BackupProtectedVmNamespaceLister
// interface.
type backupProtectedVmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupProtectedVms in the indexer for a given namespace.
func (s backupProtectedVmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedVm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupProtectedVm))
	})
	return ret, err
}

// Get retrieves the BackupProtectedVm from the indexer for a given namespace and name.
func (s backupProtectedVmNamespaceLister) Get(name string) (*v1alpha1.BackupProtectedVm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backupprotectedvm"), name)
	}
	return obj.(*v1alpha1.BackupProtectedVm), nil
}
