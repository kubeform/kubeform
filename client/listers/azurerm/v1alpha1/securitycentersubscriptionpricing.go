/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecurityCenterSubscriptionPricingLister helps list SecurityCenterSubscriptionPricings.
type SecurityCenterSubscriptionPricingLister interface {
	// List lists all SecurityCenterSubscriptionPricings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityCenterSubscriptionPricing, err error)
	// SecurityCenterSubscriptionPricings returns an object that can list and get SecurityCenterSubscriptionPricings.
	SecurityCenterSubscriptionPricings(namespace string) SecurityCenterSubscriptionPricingNamespaceLister
	SecurityCenterSubscriptionPricingListerExpansion
}

// securityCenterSubscriptionPricingLister implements the SecurityCenterSubscriptionPricingLister interface.
type securityCenterSubscriptionPricingLister struct {
	indexer cache.Indexer
}

// NewSecurityCenterSubscriptionPricingLister returns a new SecurityCenterSubscriptionPricingLister.
func NewSecurityCenterSubscriptionPricingLister(indexer cache.Indexer) SecurityCenterSubscriptionPricingLister {
	return &securityCenterSubscriptionPricingLister{indexer: indexer}
}

// List lists all SecurityCenterSubscriptionPricings in the indexer.
func (s *securityCenterSubscriptionPricingLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityCenterSubscriptionPricing, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityCenterSubscriptionPricing))
	})
	return ret, err
}

// SecurityCenterSubscriptionPricings returns an object that can list and get SecurityCenterSubscriptionPricings.
func (s *securityCenterSubscriptionPricingLister) SecurityCenterSubscriptionPricings(namespace string) SecurityCenterSubscriptionPricingNamespaceLister {
	return securityCenterSubscriptionPricingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecurityCenterSubscriptionPricingNamespaceLister helps list and get SecurityCenterSubscriptionPricings.
type SecurityCenterSubscriptionPricingNamespaceLister interface {
	// List lists all SecurityCenterSubscriptionPricings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityCenterSubscriptionPricing, err error)
	// Get retrieves the SecurityCenterSubscriptionPricing from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SecurityCenterSubscriptionPricing, error)
	SecurityCenterSubscriptionPricingNamespaceListerExpansion
}

// securityCenterSubscriptionPricingNamespaceLister implements the SecurityCenterSubscriptionPricingNamespaceLister
// interface.
type securityCenterSubscriptionPricingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecurityCenterSubscriptionPricings in the indexer for a given namespace.
func (s securityCenterSubscriptionPricingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityCenterSubscriptionPricing, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityCenterSubscriptionPricing))
	})
	return ret, err
}

// Get retrieves the SecurityCenterSubscriptionPricing from the indexer for a given namespace and name.
func (s securityCenterSubscriptionPricingNamespaceLister) Get(name string) (*v1alpha1.SecurityCenterSubscriptionPricing, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("securitycentersubscriptionpricing"), name)
	}
	return obj.(*v1alpha1.SecurityCenterSubscriptionPricing), nil
}
