/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataFactoryLinkedServiceSQLServerLister helps list DataFactoryLinkedServiceSQLServers.
type DataFactoryLinkedServiceSQLServerLister interface {
	// List lists all DataFactoryLinkedServiceSQLServers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServiceSQLServer, err error)
	// DataFactoryLinkedServiceSQLServers returns an object that can list and get DataFactoryLinkedServiceSQLServers.
	DataFactoryLinkedServiceSQLServers(namespace string) DataFactoryLinkedServiceSQLServerNamespaceLister
	DataFactoryLinkedServiceSQLServerListerExpansion
}

// dataFactoryLinkedServiceSQLServerLister implements the DataFactoryLinkedServiceSQLServerLister interface.
type dataFactoryLinkedServiceSQLServerLister struct {
	indexer cache.Indexer
}

// NewDataFactoryLinkedServiceSQLServerLister returns a new DataFactoryLinkedServiceSQLServerLister.
func NewDataFactoryLinkedServiceSQLServerLister(indexer cache.Indexer) DataFactoryLinkedServiceSQLServerLister {
	return &dataFactoryLinkedServiceSQLServerLister{indexer: indexer}
}

// List lists all DataFactoryLinkedServiceSQLServers in the indexer.
func (s *dataFactoryLinkedServiceSQLServerLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServiceSQLServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryLinkedServiceSQLServer))
	})
	return ret, err
}

// DataFactoryLinkedServiceSQLServers returns an object that can list and get DataFactoryLinkedServiceSQLServers.
func (s *dataFactoryLinkedServiceSQLServerLister) DataFactoryLinkedServiceSQLServers(namespace string) DataFactoryLinkedServiceSQLServerNamespaceLister {
	return dataFactoryLinkedServiceSQLServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryLinkedServiceSQLServerNamespaceLister helps list and get DataFactoryLinkedServiceSQLServers.
type DataFactoryLinkedServiceSQLServerNamespaceLister interface {
	// List lists all DataFactoryLinkedServiceSQLServers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServiceSQLServer, err error)
	// Get retrieves the DataFactoryLinkedServiceSQLServer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactoryLinkedServiceSQLServer, error)
	DataFactoryLinkedServiceSQLServerNamespaceListerExpansion
}

// dataFactoryLinkedServiceSQLServerNamespaceLister implements the DataFactoryLinkedServiceSQLServerNamespaceLister
// interface.
type dataFactoryLinkedServiceSQLServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactoryLinkedServiceSQLServers in the indexer for a given namespace.
func (s dataFactoryLinkedServiceSQLServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServiceSQLServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryLinkedServiceSQLServer))
	})
	return ret, err
}

// Get retrieves the DataFactoryLinkedServiceSQLServer from the indexer for a given namespace and name.
func (s dataFactoryLinkedServiceSQLServerNamespaceLister) Get(name string) (*v1alpha1.DataFactoryLinkedServiceSQLServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactorylinkedservicesqlserver"), name)
	}
	return obj.(*v1alpha1.DataFactoryLinkedServiceSQLServer), nil
}
