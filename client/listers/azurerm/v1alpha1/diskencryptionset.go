/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DiskEncryptionSetLister helps list DiskEncryptionSets.
type DiskEncryptionSetLister interface {
	// List lists all DiskEncryptionSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DiskEncryptionSet, err error)
	// DiskEncryptionSets returns an object that can list and get DiskEncryptionSets.
	DiskEncryptionSets(namespace string) DiskEncryptionSetNamespaceLister
	DiskEncryptionSetListerExpansion
}

// diskEncryptionSetLister implements the DiskEncryptionSetLister interface.
type diskEncryptionSetLister struct {
	indexer cache.Indexer
}

// NewDiskEncryptionSetLister returns a new DiskEncryptionSetLister.
func NewDiskEncryptionSetLister(indexer cache.Indexer) DiskEncryptionSetLister {
	return &diskEncryptionSetLister{indexer: indexer}
}

// List lists all DiskEncryptionSets in the indexer.
func (s *diskEncryptionSetLister) List(selector labels.Selector) (ret []*v1alpha1.DiskEncryptionSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskEncryptionSet))
	})
	return ret, err
}

// DiskEncryptionSets returns an object that can list and get DiskEncryptionSets.
func (s *diskEncryptionSetLister) DiskEncryptionSets(namespace string) DiskEncryptionSetNamespaceLister {
	return diskEncryptionSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiskEncryptionSetNamespaceLister helps list and get DiskEncryptionSets.
type DiskEncryptionSetNamespaceLister interface {
	// List lists all DiskEncryptionSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DiskEncryptionSet, err error)
	// Get retrieves the DiskEncryptionSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DiskEncryptionSet, error)
	DiskEncryptionSetNamespaceListerExpansion
}

// diskEncryptionSetNamespaceLister implements the DiskEncryptionSetNamespaceLister
// interface.
type diskEncryptionSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DiskEncryptionSets in the indexer for a given namespace.
func (s diskEncryptionSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DiskEncryptionSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskEncryptionSet))
	})
	return ret, err
}

// Get retrieves the DiskEncryptionSet from the indexer for a given namespace and name.
func (s diskEncryptionSetNamespaceLister) Get(name string) (*v1alpha1.DiskEncryptionSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("diskencryptionset"), name)
	}
	return obj.(*v1alpha1.DiskEncryptionSet), nil
}
