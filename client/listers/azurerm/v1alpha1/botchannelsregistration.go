/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BotChannelsRegistrationLister helps list BotChannelsRegistrations.
type BotChannelsRegistrationLister interface {
	// List lists all BotChannelsRegistrations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BotChannelsRegistration, err error)
	// BotChannelsRegistrations returns an object that can list and get BotChannelsRegistrations.
	BotChannelsRegistrations(namespace string) BotChannelsRegistrationNamespaceLister
	BotChannelsRegistrationListerExpansion
}

// botChannelsRegistrationLister implements the BotChannelsRegistrationLister interface.
type botChannelsRegistrationLister struct {
	indexer cache.Indexer
}

// NewBotChannelsRegistrationLister returns a new BotChannelsRegistrationLister.
func NewBotChannelsRegistrationLister(indexer cache.Indexer) BotChannelsRegistrationLister {
	return &botChannelsRegistrationLister{indexer: indexer}
}

// List lists all BotChannelsRegistrations in the indexer.
func (s *botChannelsRegistrationLister) List(selector labels.Selector) (ret []*v1alpha1.BotChannelsRegistration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BotChannelsRegistration))
	})
	return ret, err
}

// BotChannelsRegistrations returns an object that can list and get BotChannelsRegistrations.
func (s *botChannelsRegistrationLister) BotChannelsRegistrations(namespace string) BotChannelsRegistrationNamespaceLister {
	return botChannelsRegistrationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BotChannelsRegistrationNamespaceLister helps list and get BotChannelsRegistrations.
type BotChannelsRegistrationNamespaceLister interface {
	// List lists all BotChannelsRegistrations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BotChannelsRegistration, err error)
	// Get retrieves the BotChannelsRegistration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BotChannelsRegistration, error)
	BotChannelsRegistrationNamespaceListerExpansion
}

// botChannelsRegistrationNamespaceLister implements the BotChannelsRegistrationNamespaceLister
// interface.
type botChannelsRegistrationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BotChannelsRegistrations in the indexer for a given namespace.
func (s botChannelsRegistrationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BotChannelsRegistration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BotChannelsRegistration))
	})
	return ret, err
}

// Get retrieves the BotChannelsRegistration from the indexer for a given namespace and name.
func (s botChannelsRegistrationNamespaceLister) Get(name string) (*v1alpha1.BotChannelsRegistration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("botchannelsregistration"), name)
	}
	return obj.(*v1alpha1.BotChannelsRegistration), nil
}
