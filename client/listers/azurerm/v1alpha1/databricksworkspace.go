/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabricksWorkspaceLister helps list DatabricksWorkspaces.
type DatabricksWorkspaceLister interface {
	// List lists all DatabricksWorkspaces in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatabricksWorkspace, err error)
	// DatabricksWorkspaces returns an object that can list and get DatabricksWorkspaces.
	DatabricksWorkspaces(namespace string) DatabricksWorkspaceNamespaceLister
	DatabricksWorkspaceListerExpansion
}

// databricksWorkspaceLister implements the DatabricksWorkspaceLister interface.
type databricksWorkspaceLister struct {
	indexer cache.Indexer
}

// NewDatabricksWorkspaceLister returns a new DatabricksWorkspaceLister.
func NewDatabricksWorkspaceLister(indexer cache.Indexer) DatabricksWorkspaceLister {
	return &databricksWorkspaceLister{indexer: indexer}
}

// List lists all DatabricksWorkspaces in the indexer.
func (s *databricksWorkspaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabricksWorkspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabricksWorkspace))
	})
	return ret, err
}

// DatabricksWorkspaces returns an object that can list and get DatabricksWorkspaces.
func (s *databricksWorkspaceLister) DatabricksWorkspaces(namespace string) DatabricksWorkspaceNamespaceLister {
	return databricksWorkspaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabricksWorkspaceNamespaceLister helps list and get DatabricksWorkspaces.
type DatabricksWorkspaceNamespaceLister interface {
	// List lists all DatabricksWorkspaces in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatabricksWorkspace, err error)
	// Get retrieves the DatabricksWorkspace from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatabricksWorkspace, error)
	DatabricksWorkspaceNamespaceListerExpansion
}

// databricksWorkspaceNamespaceLister implements the DatabricksWorkspaceNamespaceLister
// interface.
type databricksWorkspaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabricksWorkspaces in the indexer for a given namespace.
func (s databricksWorkspaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabricksWorkspace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabricksWorkspace))
	})
	return ret, err
}

// Get retrieves the DatabricksWorkspace from the indexer for a given namespace and name.
func (s databricksWorkspaceNamespaceLister) Get(name string) (*v1alpha1.DatabricksWorkspace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databricksworkspace"), name)
	}
	return obj.(*v1alpha1.DatabricksWorkspace), nil
}
