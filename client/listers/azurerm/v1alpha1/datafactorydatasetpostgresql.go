/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataFactoryDatasetPostgresqlLister helps list DataFactoryDatasetPostgresqls.
type DataFactoryDatasetPostgresqlLister interface {
	// List lists all DataFactoryDatasetPostgresqls in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetPostgresql, err error)
	// DataFactoryDatasetPostgresqls returns an object that can list and get DataFactoryDatasetPostgresqls.
	DataFactoryDatasetPostgresqls(namespace string) DataFactoryDatasetPostgresqlNamespaceLister
	DataFactoryDatasetPostgresqlListerExpansion
}

// dataFactoryDatasetPostgresqlLister implements the DataFactoryDatasetPostgresqlLister interface.
type dataFactoryDatasetPostgresqlLister struct {
	indexer cache.Indexer
}

// NewDataFactoryDatasetPostgresqlLister returns a new DataFactoryDatasetPostgresqlLister.
func NewDataFactoryDatasetPostgresqlLister(indexer cache.Indexer) DataFactoryDatasetPostgresqlLister {
	return &dataFactoryDatasetPostgresqlLister{indexer: indexer}
}

// List lists all DataFactoryDatasetPostgresqls in the indexer.
func (s *dataFactoryDatasetPostgresqlLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetPostgresql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryDatasetPostgresql))
	})
	return ret, err
}

// DataFactoryDatasetPostgresqls returns an object that can list and get DataFactoryDatasetPostgresqls.
func (s *dataFactoryDatasetPostgresqlLister) DataFactoryDatasetPostgresqls(namespace string) DataFactoryDatasetPostgresqlNamespaceLister {
	return dataFactoryDatasetPostgresqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryDatasetPostgresqlNamespaceLister helps list and get DataFactoryDatasetPostgresqls.
type DataFactoryDatasetPostgresqlNamespaceLister interface {
	// List lists all DataFactoryDatasetPostgresqls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetPostgresql, err error)
	// Get retrieves the DataFactoryDatasetPostgresql from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactoryDatasetPostgresql, error)
	DataFactoryDatasetPostgresqlNamespaceListerExpansion
}

// dataFactoryDatasetPostgresqlNamespaceLister implements the DataFactoryDatasetPostgresqlNamespaceLister
// interface.
type dataFactoryDatasetPostgresqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactoryDatasetPostgresqls in the indexer for a given namespace.
func (s dataFactoryDatasetPostgresqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetPostgresql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryDatasetPostgresql))
	})
	return ret, err
}

// Get retrieves the DataFactoryDatasetPostgresql from the indexer for a given namespace and name.
func (s dataFactoryDatasetPostgresqlNamespaceLister) Get(name string) (*v1alpha1.DataFactoryDatasetPostgresql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactorydatasetpostgresql"), name)
	}
	return obj.(*v1alpha1.DataFactoryDatasetPostgresql), nil
}
