/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MariadbFirewallRuleLister helps list MariadbFirewallRules.
type MariadbFirewallRuleLister interface {
	// List lists all MariadbFirewallRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MariadbFirewallRule, err error)
	// MariadbFirewallRules returns an object that can list and get MariadbFirewallRules.
	MariadbFirewallRules(namespace string) MariadbFirewallRuleNamespaceLister
	MariadbFirewallRuleListerExpansion
}

// mariadbFirewallRuleLister implements the MariadbFirewallRuleLister interface.
type mariadbFirewallRuleLister struct {
	indexer cache.Indexer
}

// NewMariadbFirewallRuleLister returns a new MariadbFirewallRuleLister.
func NewMariadbFirewallRuleLister(indexer cache.Indexer) MariadbFirewallRuleLister {
	return &mariadbFirewallRuleLister{indexer: indexer}
}

// List lists all MariadbFirewallRules in the indexer.
func (s *mariadbFirewallRuleLister) List(selector labels.Selector) (ret []*v1alpha1.MariadbFirewallRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariadbFirewallRule))
	})
	return ret, err
}

// MariadbFirewallRules returns an object that can list and get MariadbFirewallRules.
func (s *mariadbFirewallRuleLister) MariadbFirewallRules(namespace string) MariadbFirewallRuleNamespaceLister {
	return mariadbFirewallRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MariadbFirewallRuleNamespaceLister helps list and get MariadbFirewallRules.
type MariadbFirewallRuleNamespaceLister interface {
	// List lists all MariadbFirewallRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MariadbFirewallRule, err error)
	// Get retrieves the MariadbFirewallRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MariadbFirewallRule, error)
	MariadbFirewallRuleNamespaceListerExpansion
}

// mariadbFirewallRuleNamespaceLister implements the MariadbFirewallRuleNamespaceLister
// interface.
type mariadbFirewallRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MariadbFirewallRules in the indexer for a given namespace.
func (s mariadbFirewallRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MariadbFirewallRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariadbFirewallRule))
	})
	return ret, err
}

// Get retrieves the MariadbFirewallRule from the indexer for a given namespace and name.
func (s mariadbFirewallRuleNamespaceLister) Get(name string) (*v1alpha1.MariadbFirewallRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mariadbfirewallrule"), name)
	}
	return obj.(*v1alpha1.MariadbFirewallRule), nil
}
