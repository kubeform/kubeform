/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// ManagementLockLister helps list ManagementLocks.
type ManagementLockLister interface {
	// List lists all ManagementLocks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ManagementLock, err error)
	// ManagementLocks returns an object that can list and get ManagementLocks.
	ManagementLocks(namespace string) ManagementLockNamespaceLister
	ManagementLockListerExpansion
}

// managementLockLister implements the ManagementLockLister interface.
type managementLockLister struct {
	indexer cache.Indexer
}

// NewManagementLockLister returns a new ManagementLockLister.
func NewManagementLockLister(indexer cache.Indexer) ManagementLockLister {
	return &managementLockLister{indexer: indexer}
}

// List lists all ManagementLocks in the indexer.
func (s *managementLockLister) List(selector labels.Selector) (ret []*v1alpha1.ManagementLock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagementLock))
	})
	return ret, err
}

// ManagementLocks returns an object that can list and get ManagementLocks.
func (s *managementLockLister) ManagementLocks(namespace string) ManagementLockNamespaceLister {
	return managementLockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagementLockNamespaceLister helps list and get ManagementLocks.
type ManagementLockNamespaceLister interface {
	// List lists all ManagementLocks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ManagementLock, err error)
	// Get retrieves the ManagementLock from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ManagementLock, error)
	ManagementLockNamespaceListerExpansion
}

// managementLockNamespaceLister implements the ManagementLockNamespaceLister
// interface.
type managementLockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagementLocks in the indexer for a given namespace.
func (s managementLockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagementLock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagementLock))
	})
	return ret, err
}

// Get retrieves the ManagementLock from the indexer for a given namespace and name.
func (s managementLockNamespaceLister) Get(name string) (*v1alpha1.ManagementLock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managementlock"), name)
	}
	return obj.(*v1alpha1.ManagementLock), nil
}
