/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BastionHostLister helps list BastionHosts.
type BastionHostLister interface {
	// List lists all BastionHosts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BastionHost, err error)
	// BastionHosts returns an object that can list and get BastionHosts.
	BastionHosts(namespace string) BastionHostNamespaceLister
	BastionHostListerExpansion
}

// bastionHostLister implements the BastionHostLister interface.
type bastionHostLister struct {
	indexer cache.Indexer
}

// NewBastionHostLister returns a new BastionHostLister.
func NewBastionHostLister(indexer cache.Indexer) BastionHostLister {
	return &bastionHostLister{indexer: indexer}
}

// List lists all BastionHosts in the indexer.
func (s *bastionHostLister) List(selector labels.Selector) (ret []*v1alpha1.BastionHost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BastionHost))
	})
	return ret, err
}

// BastionHosts returns an object that can list and get BastionHosts.
func (s *bastionHostLister) BastionHosts(namespace string) BastionHostNamespaceLister {
	return bastionHostNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BastionHostNamespaceLister helps list and get BastionHosts.
type BastionHostNamespaceLister interface {
	// List lists all BastionHosts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BastionHost, err error)
	// Get retrieves the BastionHost from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BastionHost, error)
	BastionHostNamespaceListerExpansion
}

// bastionHostNamespaceLister implements the BastionHostNamespaceLister
// interface.
type bastionHostNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BastionHosts in the indexer for a given namespace.
func (s bastionHostNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BastionHost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BastionHost))
	})
	return ret, err
}

// Get retrieves the BastionHost from the indexer for a given namespace and name.
func (s bastionHostNamespaceLister) Get(name string) (*v1alpha1.BastionHost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bastionhost"), name)
	}
	return obj.(*v1alpha1.BastionHost), nil
}
