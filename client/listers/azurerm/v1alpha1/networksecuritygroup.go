/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// NetworkSecurityGroupLister helps list NetworkSecurityGroups.
type NetworkSecurityGroupLister interface {
	// List lists all NetworkSecurityGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkSecurityGroup, err error)
	// NetworkSecurityGroups returns an object that can list and get NetworkSecurityGroups.
	NetworkSecurityGroups(namespace string) NetworkSecurityGroupNamespaceLister
	NetworkSecurityGroupListerExpansion
}

// networkSecurityGroupLister implements the NetworkSecurityGroupLister interface.
type networkSecurityGroupLister struct {
	indexer cache.Indexer
}

// NewNetworkSecurityGroupLister returns a new NetworkSecurityGroupLister.
func NewNetworkSecurityGroupLister(indexer cache.Indexer) NetworkSecurityGroupLister {
	return &networkSecurityGroupLister{indexer: indexer}
}

// List lists all NetworkSecurityGroups in the indexer.
func (s *networkSecurityGroupLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkSecurityGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkSecurityGroup))
	})
	return ret, err
}

// NetworkSecurityGroups returns an object that can list and get NetworkSecurityGroups.
func (s *networkSecurityGroupLister) NetworkSecurityGroups(namespace string) NetworkSecurityGroupNamespaceLister {
	return networkSecurityGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkSecurityGroupNamespaceLister helps list and get NetworkSecurityGroups.
type NetworkSecurityGroupNamespaceLister interface {
	// List lists all NetworkSecurityGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkSecurityGroup, err error)
	// Get retrieves the NetworkSecurityGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NetworkSecurityGroup, error)
	NetworkSecurityGroupNamespaceListerExpansion
}

// networkSecurityGroupNamespaceLister implements the NetworkSecurityGroupNamespaceLister
// interface.
type networkSecurityGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkSecurityGroups in the indexer for a given namespace.
func (s networkSecurityGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkSecurityGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkSecurityGroup))
	})
	return ret, err
}

// Get retrieves the NetworkSecurityGroup from the indexer for a given namespace and name.
func (s networkSecurityGroupNamespaceLister) Get(name string) (*v1alpha1.NetworkSecurityGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networksecuritygroup"), name)
	}
	return obj.(*v1alpha1.NetworkSecurityGroup), nil
}
