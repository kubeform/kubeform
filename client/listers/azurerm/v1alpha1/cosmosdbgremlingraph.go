/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CosmosdbGremlinGraphLister helps list CosmosdbGremlinGraphs.
type CosmosdbGremlinGraphLister interface {
	// List lists all CosmosdbGremlinGraphs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbGremlinGraph, err error)
	// CosmosdbGremlinGraphs returns an object that can list and get CosmosdbGremlinGraphs.
	CosmosdbGremlinGraphs(namespace string) CosmosdbGremlinGraphNamespaceLister
	CosmosdbGremlinGraphListerExpansion
}

// cosmosdbGremlinGraphLister implements the CosmosdbGremlinGraphLister interface.
type cosmosdbGremlinGraphLister struct {
	indexer cache.Indexer
}

// NewCosmosdbGremlinGraphLister returns a new CosmosdbGremlinGraphLister.
func NewCosmosdbGremlinGraphLister(indexer cache.Indexer) CosmosdbGremlinGraphLister {
	return &cosmosdbGremlinGraphLister{indexer: indexer}
}

// List lists all CosmosdbGremlinGraphs in the indexer.
func (s *cosmosdbGremlinGraphLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbGremlinGraph, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbGremlinGraph))
	})
	return ret, err
}

// CosmosdbGremlinGraphs returns an object that can list and get CosmosdbGremlinGraphs.
func (s *cosmosdbGremlinGraphLister) CosmosdbGremlinGraphs(namespace string) CosmosdbGremlinGraphNamespaceLister {
	return cosmosdbGremlinGraphNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CosmosdbGremlinGraphNamespaceLister helps list and get CosmosdbGremlinGraphs.
type CosmosdbGremlinGraphNamespaceLister interface {
	// List lists all CosmosdbGremlinGraphs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbGremlinGraph, err error)
	// Get retrieves the CosmosdbGremlinGraph from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CosmosdbGremlinGraph, error)
	CosmosdbGremlinGraphNamespaceListerExpansion
}

// cosmosdbGremlinGraphNamespaceLister implements the CosmosdbGremlinGraphNamespaceLister
// interface.
type cosmosdbGremlinGraphNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CosmosdbGremlinGraphs in the indexer for a given namespace.
func (s cosmosdbGremlinGraphNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbGremlinGraph, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbGremlinGraph))
	})
	return ret, err
}

// Get retrieves the CosmosdbGremlinGraph from the indexer for a given namespace and name.
func (s cosmosdbGremlinGraphNamespaceLister) Get(name string) (*v1alpha1.CosmosdbGremlinGraph, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cosmosdbgremlingraph"), name)
	}
	return obj.(*v1alpha1.CosmosdbGremlinGraph), nil
}
