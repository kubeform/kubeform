/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PostgresqlDatabaseLister helps list PostgresqlDatabases.
type PostgresqlDatabaseLister interface {
	// List lists all PostgresqlDatabases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresqlDatabase, err error)
	// PostgresqlDatabases returns an object that can list and get PostgresqlDatabases.
	PostgresqlDatabases(namespace string) PostgresqlDatabaseNamespaceLister
	PostgresqlDatabaseListerExpansion
}

// postgresqlDatabaseLister implements the PostgresqlDatabaseLister interface.
type postgresqlDatabaseLister struct {
	indexer cache.Indexer
}

// NewPostgresqlDatabaseLister returns a new PostgresqlDatabaseLister.
func NewPostgresqlDatabaseLister(indexer cache.Indexer) PostgresqlDatabaseLister {
	return &postgresqlDatabaseLister{indexer: indexer}
}

// List lists all PostgresqlDatabases in the indexer.
func (s *postgresqlDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresqlDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresqlDatabase))
	})
	return ret, err
}

// PostgresqlDatabases returns an object that can list and get PostgresqlDatabases.
func (s *postgresqlDatabaseLister) PostgresqlDatabases(namespace string) PostgresqlDatabaseNamespaceLister {
	return postgresqlDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PostgresqlDatabaseNamespaceLister helps list and get PostgresqlDatabases.
type PostgresqlDatabaseNamespaceLister interface {
	// List lists all PostgresqlDatabases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresqlDatabase, err error)
	// Get retrieves the PostgresqlDatabase from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PostgresqlDatabase, error)
	PostgresqlDatabaseNamespaceListerExpansion
}

// postgresqlDatabaseNamespaceLister implements the PostgresqlDatabaseNamespaceLister
// interface.
type postgresqlDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PostgresqlDatabases in the indexer for a given namespace.
func (s postgresqlDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresqlDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresqlDatabase))
	})
	return ret, err
}

// Get retrieves the PostgresqlDatabase from the indexer for a given namespace and name.
func (s postgresqlDatabaseNamespaceLister) Get(name string) (*v1alpha1.PostgresqlDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("postgresqldatabase"), name)
	}
	return obj.(*v1alpha1.PostgresqlDatabase), nil
}
