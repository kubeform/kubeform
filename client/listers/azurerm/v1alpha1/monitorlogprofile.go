/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// MonitorLogProfileLister helps list MonitorLogProfiles.
type MonitorLogProfileLister interface {
	// List lists all MonitorLogProfiles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorLogProfile, err error)
	// MonitorLogProfiles returns an object that can list and get MonitorLogProfiles.
	MonitorLogProfiles(namespace string) MonitorLogProfileNamespaceLister
	MonitorLogProfileListerExpansion
}

// monitorLogProfileLister implements the MonitorLogProfileLister interface.
type monitorLogProfileLister struct {
	indexer cache.Indexer
}

// NewMonitorLogProfileLister returns a new MonitorLogProfileLister.
func NewMonitorLogProfileLister(indexer cache.Indexer) MonitorLogProfileLister {
	return &monitorLogProfileLister{indexer: indexer}
}

// List lists all MonitorLogProfiles in the indexer.
func (s *monitorLogProfileLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorLogProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorLogProfile))
	})
	return ret, err
}

// MonitorLogProfiles returns an object that can list and get MonitorLogProfiles.
func (s *monitorLogProfileLister) MonitorLogProfiles(namespace string) MonitorLogProfileNamespaceLister {
	return monitorLogProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitorLogProfileNamespaceLister helps list and get MonitorLogProfiles.
type MonitorLogProfileNamespaceLister interface {
	// List lists all MonitorLogProfiles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorLogProfile, err error)
	// Get retrieves the MonitorLogProfile from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MonitorLogProfile, error)
	MonitorLogProfileNamespaceListerExpansion
}

// monitorLogProfileNamespaceLister implements the MonitorLogProfileNamespaceLister
// interface.
type monitorLogProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitorLogProfiles in the indexer for a given namespace.
func (s monitorLogProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorLogProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorLogProfile))
	})
	return ret, err
}

// Get retrieves the MonitorLogProfile from the indexer for a given namespace and name.
func (s monitorLogProfileNamespaceLister) Get(name string) (*v1alpha1.MonitorLogProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitorlogprofile"), name)
	}
	return obj.(*v1alpha1.MonitorLogProfile), nil
}
