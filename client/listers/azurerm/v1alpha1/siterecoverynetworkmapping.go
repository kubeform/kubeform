/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SiteRecoveryNetworkMappingLister helps list SiteRecoveryNetworkMappings.
type SiteRecoveryNetworkMappingLister interface {
	// List lists all SiteRecoveryNetworkMappings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SiteRecoveryNetworkMapping, err error)
	// SiteRecoveryNetworkMappings returns an object that can list and get SiteRecoveryNetworkMappings.
	SiteRecoveryNetworkMappings(namespace string) SiteRecoveryNetworkMappingNamespaceLister
	SiteRecoveryNetworkMappingListerExpansion
}

// siteRecoveryNetworkMappingLister implements the SiteRecoveryNetworkMappingLister interface.
type siteRecoveryNetworkMappingLister struct {
	indexer cache.Indexer
}

// NewSiteRecoveryNetworkMappingLister returns a new SiteRecoveryNetworkMappingLister.
func NewSiteRecoveryNetworkMappingLister(indexer cache.Indexer) SiteRecoveryNetworkMappingLister {
	return &siteRecoveryNetworkMappingLister{indexer: indexer}
}

// List lists all SiteRecoveryNetworkMappings in the indexer.
func (s *siteRecoveryNetworkMappingLister) List(selector labels.Selector) (ret []*v1alpha1.SiteRecoveryNetworkMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SiteRecoveryNetworkMapping))
	})
	return ret, err
}

// SiteRecoveryNetworkMappings returns an object that can list and get SiteRecoveryNetworkMappings.
func (s *siteRecoveryNetworkMappingLister) SiteRecoveryNetworkMappings(namespace string) SiteRecoveryNetworkMappingNamespaceLister {
	return siteRecoveryNetworkMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SiteRecoveryNetworkMappingNamespaceLister helps list and get SiteRecoveryNetworkMappings.
type SiteRecoveryNetworkMappingNamespaceLister interface {
	// List lists all SiteRecoveryNetworkMappings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SiteRecoveryNetworkMapping, err error)
	// Get retrieves the SiteRecoveryNetworkMapping from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SiteRecoveryNetworkMapping, error)
	SiteRecoveryNetworkMappingNamespaceListerExpansion
}

// siteRecoveryNetworkMappingNamespaceLister implements the SiteRecoveryNetworkMappingNamespaceLister
// interface.
type siteRecoveryNetworkMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SiteRecoveryNetworkMappings in the indexer for a given namespace.
func (s siteRecoveryNetworkMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SiteRecoveryNetworkMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SiteRecoveryNetworkMapping))
	})
	return ret, err
}

// Get retrieves the SiteRecoveryNetworkMapping from the indexer for a given namespace and name.
func (s siteRecoveryNetworkMappingNamespaceLister) Get(name string) (*v1alpha1.SiteRecoveryNetworkMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("siterecoverynetworkmapping"), name)
	}
	return obj.(*v1alpha1.SiteRecoveryNetworkMapping), nil
}
