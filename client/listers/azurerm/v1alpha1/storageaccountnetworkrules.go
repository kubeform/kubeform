/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageAccountNetworkRulesLister helps list StorageAccountNetworkRuleses.
type StorageAccountNetworkRulesLister interface {
	// List lists all StorageAccountNetworkRuleses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageAccountNetworkRules, err error)
	// StorageAccountNetworkRuleses returns an object that can list and get StorageAccountNetworkRuleses.
	StorageAccountNetworkRuleses(namespace string) StorageAccountNetworkRulesNamespaceLister
	StorageAccountNetworkRulesListerExpansion
}

// storageAccountNetworkRulesLister implements the StorageAccountNetworkRulesLister interface.
type storageAccountNetworkRulesLister struct {
	indexer cache.Indexer
}

// NewStorageAccountNetworkRulesLister returns a new StorageAccountNetworkRulesLister.
func NewStorageAccountNetworkRulesLister(indexer cache.Indexer) StorageAccountNetworkRulesLister {
	return &storageAccountNetworkRulesLister{indexer: indexer}
}

// List lists all StorageAccountNetworkRuleses in the indexer.
func (s *storageAccountNetworkRulesLister) List(selector labels.Selector) (ret []*v1alpha1.StorageAccountNetworkRules, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageAccountNetworkRules))
	})
	return ret, err
}

// StorageAccountNetworkRuleses returns an object that can list and get StorageAccountNetworkRuleses.
func (s *storageAccountNetworkRulesLister) StorageAccountNetworkRuleses(namespace string) StorageAccountNetworkRulesNamespaceLister {
	return storageAccountNetworkRulesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageAccountNetworkRulesNamespaceLister helps list and get StorageAccountNetworkRuleses.
type StorageAccountNetworkRulesNamespaceLister interface {
	// List lists all StorageAccountNetworkRuleses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageAccountNetworkRules, err error)
	// Get retrieves the StorageAccountNetworkRules from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageAccountNetworkRules, error)
	StorageAccountNetworkRulesNamespaceListerExpansion
}

// storageAccountNetworkRulesNamespaceLister implements the StorageAccountNetworkRulesNamespaceLister
// interface.
type storageAccountNetworkRulesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageAccountNetworkRuleses in the indexer for a given namespace.
func (s storageAccountNetworkRulesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageAccountNetworkRules, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageAccountNetworkRules))
	})
	return ret, err
}

// Get retrieves the StorageAccountNetworkRules from the indexer for a given namespace and name.
func (s storageAccountNetworkRulesNamespaceLister) Get(name string) (*v1alpha1.StorageAccountNetworkRules, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storageaccountnetworkrules"), name)
	}
	return obj.(*v1alpha1.StorageAccountNetworkRules), nil
}
