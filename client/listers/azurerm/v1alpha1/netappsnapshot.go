/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetappSnapshotLister helps list NetappSnapshots.
type NetappSnapshotLister interface {
	// List lists all NetappSnapshots in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NetappSnapshot, err error)
	// NetappSnapshots returns an object that can list and get NetappSnapshots.
	NetappSnapshots(namespace string) NetappSnapshotNamespaceLister
	NetappSnapshotListerExpansion
}

// netappSnapshotLister implements the NetappSnapshotLister interface.
type netappSnapshotLister struct {
	indexer cache.Indexer
}

// NewNetappSnapshotLister returns a new NetappSnapshotLister.
func NewNetappSnapshotLister(indexer cache.Indexer) NetappSnapshotLister {
	return &netappSnapshotLister{indexer: indexer}
}

// List lists all NetappSnapshots in the indexer.
func (s *netappSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.NetappSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetappSnapshot))
	})
	return ret, err
}

// NetappSnapshots returns an object that can list and get NetappSnapshots.
func (s *netappSnapshotLister) NetappSnapshots(namespace string) NetappSnapshotNamespaceLister {
	return netappSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetappSnapshotNamespaceLister helps list and get NetappSnapshots.
type NetappSnapshotNamespaceLister interface {
	// List lists all NetappSnapshots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NetappSnapshot, err error)
	// Get retrieves the NetappSnapshot from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NetappSnapshot, error)
	NetappSnapshotNamespaceListerExpansion
}

// netappSnapshotNamespaceLister implements the NetappSnapshotNamespaceLister
// interface.
type netappSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetappSnapshots in the indexer for a given namespace.
func (s netappSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetappSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetappSnapshot))
	})
	return ret, err
}

// Get retrieves the NetappSnapshot from the indexer for a given namespace and name.
func (s netappSnapshotNamespaceLister) Get(name string) (*v1alpha1.NetappSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("netappsnapshot"), name)
	}
	return obj.(*v1alpha1.NetappSnapshot), nil
}
