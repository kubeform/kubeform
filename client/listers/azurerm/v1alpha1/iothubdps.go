/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IothubDpsLister helps list IothubDpses.
type IothubDpsLister interface {
	// List lists all IothubDpses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IothubDps, err error)
	// IothubDpses returns an object that can list and get IothubDpses.
	IothubDpses(namespace string) IothubDpsNamespaceLister
	IothubDpsListerExpansion
}

// iothubDpsLister implements the IothubDpsLister interface.
type iothubDpsLister struct {
	indexer cache.Indexer
}

// NewIothubDpsLister returns a new IothubDpsLister.
func NewIothubDpsLister(indexer cache.Indexer) IothubDpsLister {
	return &iothubDpsLister{indexer: indexer}
}

// List lists all IothubDpses in the indexer.
func (s *iothubDpsLister) List(selector labels.Selector) (ret []*v1alpha1.IothubDps, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubDps))
	})
	return ret, err
}

// IothubDpses returns an object that can list and get IothubDpses.
func (s *iothubDpsLister) IothubDpses(namespace string) IothubDpsNamespaceLister {
	return iothubDpsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IothubDpsNamespaceLister helps list and get IothubDpses.
type IothubDpsNamespaceLister interface {
	// List lists all IothubDpses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IothubDps, err error)
	// Get retrieves the IothubDps from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IothubDps, error)
	IothubDpsNamespaceListerExpansion
}

// iothubDpsNamespaceLister implements the IothubDpsNamespaceLister
// interface.
type iothubDpsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IothubDpses in the indexer for a given namespace.
func (s iothubDpsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IothubDps, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubDps))
	})
	return ret, err
}

// Get retrieves the IothubDps from the indexer for a given namespace and name.
func (s iothubDpsNamespaceLister) Get(name string) (*v1alpha1.IothubDps, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iothubdps"), name)
	}
	return obj.(*v1alpha1.IothubDps), nil
}
