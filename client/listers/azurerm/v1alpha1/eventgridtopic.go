/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// EventgridTopicLister helps list EventgridTopics.
type EventgridTopicLister interface {
	// List lists all EventgridTopics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridTopic, err error)
	// EventgridTopics returns an object that can list and get EventgridTopics.
	EventgridTopics(namespace string) EventgridTopicNamespaceLister
	EventgridTopicListerExpansion
}

// eventgridTopicLister implements the EventgridTopicLister interface.
type eventgridTopicLister struct {
	indexer cache.Indexer
}

// NewEventgridTopicLister returns a new EventgridTopicLister.
func NewEventgridTopicLister(indexer cache.Indexer) EventgridTopicLister {
	return &eventgridTopicLister{indexer: indexer}
}

// List lists all EventgridTopics in the indexer.
func (s *eventgridTopicLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridTopic))
	})
	return ret, err
}

// EventgridTopics returns an object that can list and get EventgridTopics.
func (s *eventgridTopicLister) EventgridTopics(namespace string) EventgridTopicNamespaceLister {
	return eventgridTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventgridTopicNamespaceLister helps list and get EventgridTopics.
type EventgridTopicNamespaceLister interface {
	// List lists all EventgridTopics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridTopic, err error)
	// Get retrieves the EventgridTopic from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EventgridTopic, error)
	EventgridTopicNamespaceListerExpansion
}

// eventgridTopicNamespaceLister implements the EventgridTopicNamespaceLister
// interface.
type eventgridTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventgridTopics in the indexer for a given namespace.
func (s eventgridTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridTopic))
	})
	return ret, err
}

// Get retrieves the EventgridTopic from the indexer for a given namespace and name.
func (s eventgridTopicNamespaceLister) Get(name string) (*v1alpha1.EventgridTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventgridtopic"), name)
	}
	return obj.(*v1alpha1.EventgridTopic), nil
}
