/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CosmosdbAccountLister helps list CosmosdbAccounts.
type CosmosdbAccountLister interface {
	// List lists all CosmosdbAccounts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbAccount, err error)
	// CosmosdbAccounts returns an object that can list and get CosmosdbAccounts.
	CosmosdbAccounts(namespace string) CosmosdbAccountNamespaceLister
	CosmosdbAccountListerExpansion
}

// cosmosdbAccountLister implements the CosmosdbAccountLister interface.
type cosmosdbAccountLister struct {
	indexer cache.Indexer
}

// NewCosmosdbAccountLister returns a new CosmosdbAccountLister.
func NewCosmosdbAccountLister(indexer cache.Indexer) CosmosdbAccountLister {
	return &cosmosdbAccountLister{indexer: indexer}
}

// List lists all CosmosdbAccounts in the indexer.
func (s *cosmosdbAccountLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbAccount))
	})
	return ret, err
}

// CosmosdbAccounts returns an object that can list and get CosmosdbAccounts.
func (s *cosmosdbAccountLister) CosmosdbAccounts(namespace string) CosmosdbAccountNamespaceLister {
	return cosmosdbAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CosmosdbAccountNamespaceLister helps list and get CosmosdbAccounts.
type CosmosdbAccountNamespaceLister interface {
	// List lists all CosmosdbAccounts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbAccount, err error)
	// Get retrieves the CosmosdbAccount from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CosmosdbAccount, error)
	CosmosdbAccountNamespaceListerExpansion
}

// cosmosdbAccountNamespaceLister implements the CosmosdbAccountNamespaceLister
// interface.
type cosmosdbAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CosmosdbAccounts in the indexer for a given namespace.
func (s cosmosdbAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbAccount))
	})
	return ret, err
}

// Get retrieves the CosmosdbAccount from the indexer for a given namespace and name.
func (s cosmosdbAccountNamespaceLister) Get(name string) (*v1alpha1.CosmosdbAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cosmosdbaccount"), name)
	}
	return obj.(*v1alpha1.CosmosdbAccount), nil
}
