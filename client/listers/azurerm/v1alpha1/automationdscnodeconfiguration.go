/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// AutomationDscNodeconfigurationLister helps list AutomationDscNodeconfigurations.
type AutomationDscNodeconfigurationLister interface {
	// List lists all AutomationDscNodeconfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationDscNodeconfiguration, err error)
	// AutomationDscNodeconfigurations returns an object that can list and get AutomationDscNodeconfigurations.
	AutomationDscNodeconfigurations(namespace string) AutomationDscNodeconfigurationNamespaceLister
	AutomationDscNodeconfigurationListerExpansion
}

// automationDscNodeconfigurationLister implements the AutomationDscNodeconfigurationLister interface.
type automationDscNodeconfigurationLister struct {
	indexer cache.Indexer
}

// NewAutomationDscNodeconfigurationLister returns a new AutomationDscNodeconfigurationLister.
func NewAutomationDscNodeconfigurationLister(indexer cache.Indexer) AutomationDscNodeconfigurationLister {
	return &automationDscNodeconfigurationLister{indexer: indexer}
}

// List lists all AutomationDscNodeconfigurations in the indexer.
func (s *automationDscNodeconfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationDscNodeconfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationDscNodeconfiguration))
	})
	return ret, err
}

// AutomationDscNodeconfigurations returns an object that can list and get AutomationDscNodeconfigurations.
func (s *automationDscNodeconfigurationLister) AutomationDscNodeconfigurations(namespace string) AutomationDscNodeconfigurationNamespaceLister {
	return automationDscNodeconfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutomationDscNodeconfigurationNamespaceLister helps list and get AutomationDscNodeconfigurations.
type AutomationDscNodeconfigurationNamespaceLister interface {
	// List lists all AutomationDscNodeconfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationDscNodeconfiguration, err error)
	// Get retrieves the AutomationDscNodeconfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AutomationDscNodeconfiguration, error)
	AutomationDscNodeconfigurationNamespaceListerExpansion
}

// automationDscNodeconfigurationNamespaceLister implements the AutomationDscNodeconfigurationNamespaceLister
// interface.
type automationDscNodeconfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutomationDscNodeconfigurations in the indexer for a given namespace.
func (s automationDscNodeconfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationDscNodeconfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationDscNodeconfiguration))
	})
	return ret, err
}

// Get retrieves the AutomationDscNodeconfiguration from the indexer for a given namespace and name.
func (s automationDscNodeconfigurationNamespaceLister) Get(name string) (*v1alpha1.AutomationDscNodeconfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("automationdscnodeconfiguration"), name)
	}
	return obj.(*v1alpha1.AutomationDscNodeconfiguration), nil
}
