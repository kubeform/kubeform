/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// LbOutboundRuleLister helps list LbOutboundRules.
type LbOutboundRuleLister interface {
	// List lists all LbOutboundRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LbOutboundRule, err error)
	// LbOutboundRules returns an object that can list and get LbOutboundRules.
	LbOutboundRules(namespace string) LbOutboundRuleNamespaceLister
	LbOutboundRuleListerExpansion
}

// lbOutboundRuleLister implements the LbOutboundRuleLister interface.
type lbOutboundRuleLister struct {
	indexer cache.Indexer
}

// NewLbOutboundRuleLister returns a new LbOutboundRuleLister.
func NewLbOutboundRuleLister(indexer cache.Indexer) LbOutboundRuleLister {
	return &lbOutboundRuleLister{indexer: indexer}
}

// List lists all LbOutboundRules in the indexer.
func (s *lbOutboundRuleLister) List(selector labels.Selector) (ret []*v1alpha1.LbOutboundRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbOutboundRule))
	})
	return ret, err
}

// LbOutboundRules returns an object that can list and get LbOutboundRules.
func (s *lbOutboundRuleLister) LbOutboundRules(namespace string) LbOutboundRuleNamespaceLister {
	return lbOutboundRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LbOutboundRuleNamespaceLister helps list and get LbOutboundRules.
type LbOutboundRuleNamespaceLister interface {
	// List lists all LbOutboundRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LbOutboundRule, err error)
	// Get retrieves the LbOutboundRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LbOutboundRule, error)
	LbOutboundRuleNamespaceListerExpansion
}

// lbOutboundRuleNamespaceLister implements the LbOutboundRuleNamespaceLister
// interface.
type lbOutboundRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LbOutboundRules in the indexer for a given namespace.
func (s lbOutboundRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LbOutboundRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbOutboundRule))
	})
	return ret, err
}

// Get retrieves the LbOutboundRule from the indexer for a given namespace and name.
func (s lbOutboundRuleNamespaceLister) Get(name string) (*v1alpha1.LbOutboundRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lboutboundrule"), name)
	}
	return obj.(*v1alpha1.LbOutboundRule), nil
}
