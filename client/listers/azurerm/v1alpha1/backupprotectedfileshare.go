/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupProtectedFileShareLister helps list BackupProtectedFileShares.
type BackupProtectedFileShareLister interface {
	// List lists all BackupProtectedFileShares in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedFileShare, err error)
	// BackupProtectedFileShares returns an object that can list and get BackupProtectedFileShares.
	BackupProtectedFileShares(namespace string) BackupProtectedFileShareNamespaceLister
	BackupProtectedFileShareListerExpansion
}

// backupProtectedFileShareLister implements the BackupProtectedFileShareLister interface.
type backupProtectedFileShareLister struct {
	indexer cache.Indexer
}

// NewBackupProtectedFileShareLister returns a new BackupProtectedFileShareLister.
func NewBackupProtectedFileShareLister(indexer cache.Indexer) BackupProtectedFileShareLister {
	return &backupProtectedFileShareLister{indexer: indexer}
}

// List lists all BackupProtectedFileShares in the indexer.
func (s *backupProtectedFileShareLister) List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedFileShare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupProtectedFileShare))
	})
	return ret, err
}

// BackupProtectedFileShares returns an object that can list and get BackupProtectedFileShares.
func (s *backupProtectedFileShareLister) BackupProtectedFileShares(namespace string) BackupProtectedFileShareNamespaceLister {
	return backupProtectedFileShareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupProtectedFileShareNamespaceLister helps list and get BackupProtectedFileShares.
type BackupProtectedFileShareNamespaceLister interface {
	// List lists all BackupProtectedFileShares in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedFileShare, err error)
	// Get retrieves the BackupProtectedFileShare from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BackupProtectedFileShare, error)
	BackupProtectedFileShareNamespaceListerExpansion
}

// backupProtectedFileShareNamespaceLister implements the BackupProtectedFileShareNamespaceLister
// interface.
type backupProtectedFileShareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupProtectedFileShares in the indexer for a given namespace.
func (s backupProtectedFileShareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupProtectedFileShare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupProtectedFileShare))
	})
	return ret, err
}

// Get retrieves the BackupProtectedFileShare from the indexer for a given namespace and name.
func (s backupProtectedFileShareNamespaceLister) Get(name string) (*v1alpha1.BackupProtectedFileShare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backupprotectedfileshare"), name)
	}
	return obj.(*v1alpha1.BackupProtectedFileShare), nil
}
