/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FrontdoorFirewallPolicyLister helps list FrontdoorFirewallPolicies.
type FrontdoorFirewallPolicyLister interface {
	// List lists all FrontdoorFirewallPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FrontdoorFirewallPolicy, err error)
	// FrontdoorFirewallPolicies returns an object that can list and get FrontdoorFirewallPolicies.
	FrontdoorFirewallPolicies(namespace string) FrontdoorFirewallPolicyNamespaceLister
	FrontdoorFirewallPolicyListerExpansion
}

// frontdoorFirewallPolicyLister implements the FrontdoorFirewallPolicyLister interface.
type frontdoorFirewallPolicyLister struct {
	indexer cache.Indexer
}

// NewFrontdoorFirewallPolicyLister returns a new FrontdoorFirewallPolicyLister.
func NewFrontdoorFirewallPolicyLister(indexer cache.Indexer) FrontdoorFirewallPolicyLister {
	return &frontdoorFirewallPolicyLister{indexer: indexer}
}

// List lists all FrontdoorFirewallPolicies in the indexer.
func (s *frontdoorFirewallPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.FrontdoorFirewallPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FrontdoorFirewallPolicy))
	})
	return ret, err
}

// FrontdoorFirewallPolicies returns an object that can list and get FrontdoorFirewallPolicies.
func (s *frontdoorFirewallPolicyLister) FrontdoorFirewallPolicies(namespace string) FrontdoorFirewallPolicyNamespaceLister {
	return frontdoorFirewallPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FrontdoorFirewallPolicyNamespaceLister helps list and get FrontdoorFirewallPolicies.
type FrontdoorFirewallPolicyNamespaceLister interface {
	// List lists all FrontdoorFirewallPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FrontdoorFirewallPolicy, err error)
	// Get retrieves the FrontdoorFirewallPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FrontdoorFirewallPolicy, error)
	FrontdoorFirewallPolicyNamespaceListerExpansion
}

// frontdoorFirewallPolicyNamespaceLister implements the FrontdoorFirewallPolicyNamespaceLister
// interface.
type frontdoorFirewallPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FrontdoorFirewallPolicies in the indexer for a given namespace.
func (s frontdoorFirewallPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FrontdoorFirewallPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FrontdoorFirewallPolicy))
	})
	return ret, err
}

// Get retrieves the FrontdoorFirewallPolicy from the indexer for a given namespace and name.
func (s frontdoorFirewallPolicyNamespaceLister) Get(name string) (*v1alpha1.FrontdoorFirewallPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("frontdoorfirewallpolicy"), name)
	}
	return obj.(*v1alpha1.FrontdoorFirewallPolicy), nil
}
