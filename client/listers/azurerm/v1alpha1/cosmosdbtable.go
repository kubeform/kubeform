/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CosmosdbTableLister helps list CosmosdbTables.
type CosmosdbTableLister interface {
	// List lists all CosmosdbTables in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbTable, err error)
	// CosmosdbTables returns an object that can list and get CosmosdbTables.
	CosmosdbTables(namespace string) CosmosdbTableNamespaceLister
	CosmosdbTableListerExpansion
}

// cosmosdbTableLister implements the CosmosdbTableLister interface.
type cosmosdbTableLister struct {
	indexer cache.Indexer
}

// NewCosmosdbTableLister returns a new CosmosdbTableLister.
func NewCosmosdbTableLister(indexer cache.Indexer) CosmosdbTableLister {
	return &cosmosdbTableLister{indexer: indexer}
}

// List lists all CosmosdbTables in the indexer.
func (s *cosmosdbTableLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbTable))
	})
	return ret, err
}

// CosmosdbTables returns an object that can list and get CosmosdbTables.
func (s *cosmosdbTableLister) CosmosdbTables(namespace string) CosmosdbTableNamespaceLister {
	return cosmosdbTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CosmosdbTableNamespaceLister helps list and get CosmosdbTables.
type CosmosdbTableNamespaceLister interface {
	// List lists all CosmosdbTables in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CosmosdbTable, err error)
	// Get retrieves the CosmosdbTable from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CosmosdbTable, error)
	CosmosdbTableNamespaceListerExpansion
}

// cosmosdbTableNamespaceLister implements the CosmosdbTableNamespaceLister
// interface.
type cosmosdbTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CosmosdbTables in the indexer for a given namespace.
func (s cosmosdbTableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CosmosdbTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CosmosdbTable))
	})
	return ret, err
}

// Get retrieves the CosmosdbTable from the indexer for a given namespace and name.
func (s cosmosdbTableNamespaceLister) Get(name string) (*v1alpha1.CosmosdbTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cosmosdbtable"), name)
	}
	return obj.(*v1alpha1.CosmosdbTable), nil
}
