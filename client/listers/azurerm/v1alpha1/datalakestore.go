/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// DataLakeStoreLister helps list DataLakeStores.
type DataLakeStoreLister interface {
	// List lists all DataLakeStores in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeStore, err error)
	// DataLakeStores returns an object that can list and get DataLakeStores.
	DataLakeStores(namespace string) DataLakeStoreNamespaceLister
	DataLakeStoreListerExpansion
}

// dataLakeStoreLister implements the DataLakeStoreLister interface.
type dataLakeStoreLister struct {
	indexer cache.Indexer
}

// NewDataLakeStoreLister returns a new DataLakeStoreLister.
func NewDataLakeStoreLister(indexer cache.Indexer) DataLakeStoreLister {
	return &dataLakeStoreLister{indexer: indexer}
}

// List lists all DataLakeStores in the indexer.
func (s *dataLakeStoreLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeStore))
	})
	return ret, err
}

// DataLakeStores returns an object that can list and get DataLakeStores.
func (s *dataLakeStoreLister) DataLakeStores(namespace string) DataLakeStoreNamespaceLister {
	return dataLakeStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataLakeStoreNamespaceLister helps list and get DataLakeStores.
type DataLakeStoreNamespaceLister interface {
	// List lists all DataLakeStores in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeStore, err error)
	// Get retrieves the DataLakeStore from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataLakeStore, error)
	DataLakeStoreNamespaceListerExpansion
}

// dataLakeStoreNamespaceLister implements the DataLakeStoreNamespaceLister
// interface.
type dataLakeStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataLakeStores in the indexer for a given namespace.
func (s dataLakeStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeStore))
	})
	return ret, err
}

// Get retrieves the DataLakeStore from the indexer for a given namespace and name.
func (s dataLakeStoreNamespaceLister) Get(name string) (*v1alpha1.DataLakeStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datalakestore"), name)
	}
	return obj.(*v1alpha1.DataLakeStore), nil
}
