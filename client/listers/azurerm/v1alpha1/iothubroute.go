/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IothubRouteLister helps list IothubRoutes.
type IothubRouteLister interface {
	// List lists all IothubRoutes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IothubRoute, err error)
	// IothubRoutes returns an object that can list and get IothubRoutes.
	IothubRoutes(namespace string) IothubRouteNamespaceLister
	IothubRouteListerExpansion
}

// iothubRouteLister implements the IothubRouteLister interface.
type iothubRouteLister struct {
	indexer cache.Indexer
}

// NewIothubRouteLister returns a new IothubRouteLister.
func NewIothubRouteLister(indexer cache.Indexer) IothubRouteLister {
	return &iothubRouteLister{indexer: indexer}
}

// List lists all IothubRoutes in the indexer.
func (s *iothubRouteLister) List(selector labels.Selector) (ret []*v1alpha1.IothubRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubRoute))
	})
	return ret, err
}

// IothubRoutes returns an object that can list and get IothubRoutes.
func (s *iothubRouteLister) IothubRoutes(namespace string) IothubRouteNamespaceLister {
	return iothubRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IothubRouteNamespaceLister helps list and get IothubRoutes.
type IothubRouteNamespaceLister interface {
	// List lists all IothubRoutes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IothubRoute, err error)
	// Get retrieves the IothubRoute from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IothubRoute, error)
	IothubRouteNamespaceListerExpansion
}

// iothubRouteNamespaceLister implements the IothubRouteNamespaceLister
// interface.
type iothubRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IothubRoutes in the indexer for a given namespace.
func (s iothubRouteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IothubRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubRoute))
	})
	return ret, err
}

// Get retrieves the IothubRoute from the indexer for a given namespace and name.
func (s iothubRouteNamespaceLister) Get(name string) (*v1alpha1.IothubRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iothubroute"), name)
	}
	return obj.(*v1alpha1.IothubRoute), nil
}
