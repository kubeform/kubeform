/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiManagementAPIOperationPolicyLister helps list ApiManagementAPIOperationPolicies.
type ApiManagementAPIOperationPolicyLister interface {
	// List lists all ApiManagementAPIOperationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApiManagementAPIOperationPolicy, err error)
	// ApiManagementAPIOperationPolicies returns an object that can list and get ApiManagementAPIOperationPolicies.
	ApiManagementAPIOperationPolicies(namespace string) ApiManagementAPIOperationPolicyNamespaceLister
	ApiManagementAPIOperationPolicyListerExpansion
}

// apiManagementAPIOperationPolicyLister implements the ApiManagementAPIOperationPolicyLister interface.
type apiManagementAPIOperationPolicyLister struct {
	indexer cache.Indexer
}

// NewApiManagementAPIOperationPolicyLister returns a new ApiManagementAPIOperationPolicyLister.
func NewApiManagementAPIOperationPolicyLister(indexer cache.Indexer) ApiManagementAPIOperationPolicyLister {
	return &apiManagementAPIOperationPolicyLister{indexer: indexer}
}

// List lists all ApiManagementAPIOperationPolicies in the indexer.
func (s *apiManagementAPIOperationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ApiManagementAPIOperationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiManagementAPIOperationPolicy))
	})
	return ret, err
}

// ApiManagementAPIOperationPolicies returns an object that can list and get ApiManagementAPIOperationPolicies.
func (s *apiManagementAPIOperationPolicyLister) ApiManagementAPIOperationPolicies(namespace string) ApiManagementAPIOperationPolicyNamespaceLister {
	return apiManagementAPIOperationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiManagementAPIOperationPolicyNamespaceLister helps list and get ApiManagementAPIOperationPolicies.
type ApiManagementAPIOperationPolicyNamespaceLister interface {
	// List lists all ApiManagementAPIOperationPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApiManagementAPIOperationPolicy, err error)
	// Get retrieves the ApiManagementAPIOperationPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApiManagementAPIOperationPolicy, error)
	ApiManagementAPIOperationPolicyNamespaceListerExpansion
}

// apiManagementAPIOperationPolicyNamespaceLister implements the ApiManagementAPIOperationPolicyNamespaceLister
// interface.
type apiManagementAPIOperationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiManagementAPIOperationPolicies in the indexer for a given namespace.
func (s apiManagementAPIOperationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiManagementAPIOperationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiManagementAPIOperationPolicy))
	})
	return ret, err
}

// Get retrieves the ApiManagementAPIOperationPolicy from the indexer for a given namespace and name.
func (s apiManagementAPIOperationPolicyNamespaceLister) Get(name string) (*v1alpha1.ApiManagementAPIOperationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apimanagementapioperationpolicy"), name)
	}
	return obj.(*v1alpha1.ApiManagementAPIOperationPolicy), nil
}
