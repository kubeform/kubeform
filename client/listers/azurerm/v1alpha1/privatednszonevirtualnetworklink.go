/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateDNSZoneVirtualNetworkLinkLister helps list PrivateDNSZoneVirtualNetworkLinks.
type PrivateDNSZoneVirtualNetworkLinkLister interface {
	// List lists all PrivateDNSZoneVirtualNetworkLinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSZoneVirtualNetworkLink, err error)
	// PrivateDNSZoneVirtualNetworkLinks returns an object that can list and get PrivateDNSZoneVirtualNetworkLinks.
	PrivateDNSZoneVirtualNetworkLinks(namespace string) PrivateDNSZoneVirtualNetworkLinkNamespaceLister
	PrivateDNSZoneVirtualNetworkLinkListerExpansion
}

// privateDNSZoneVirtualNetworkLinkLister implements the PrivateDNSZoneVirtualNetworkLinkLister interface.
type privateDNSZoneVirtualNetworkLinkLister struct {
	indexer cache.Indexer
}

// NewPrivateDNSZoneVirtualNetworkLinkLister returns a new PrivateDNSZoneVirtualNetworkLinkLister.
func NewPrivateDNSZoneVirtualNetworkLinkLister(indexer cache.Indexer) PrivateDNSZoneVirtualNetworkLinkLister {
	return &privateDNSZoneVirtualNetworkLinkLister{indexer: indexer}
}

// List lists all PrivateDNSZoneVirtualNetworkLinks in the indexer.
func (s *privateDNSZoneVirtualNetworkLinkLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSZoneVirtualNetworkLink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSZoneVirtualNetworkLink))
	})
	return ret, err
}

// PrivateDNSZoneVirtualNetworkLinks returns an object that can list and get PrivateDNSZoneVirtualNetworkLinks.
func (s *privateDNSZoneVirtualNetworkLinkLister) PrivateDNSZoneVirtualNetworkLinks(namespace string) PrivateDNSZoneVirtualNetworkLinkNamespaceLister {
	return privateDNSZoneVirtualNetworkLinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateDNSZoneVirtualNetworkLinkNamespaceLister helps list and get PrivateDNSZoneVirtualNetworkLinks.
type PrivateDNSZoneVirtualNetworkLinkNamespaceLister interface {
	// List lists all PrivateDNSZoneVirtualNetworkLinks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSZoneVirtualNetworkLink, err error)
	// Get retrieves the PrivateDNSZoneVirtualNetworkLink from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PrivateDNSZoneVirtualNetworkLink, error)
	PrivateDNSZoneVirtualNetworkLinkNamespaceListerExpansion
}

// privateDNSZoneVirtualNetworkLinkNamespaceLister implements the PrivateDNSZoneVirtualNetworkLinkNamespaceLister
// interface.
type privateDNSZoneVirtualNetworkLinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateDNSZoneVirtualNetworkLinks in the indexer for a given namespace.
func (s privateDNSZoneVirtualNetworkLinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSZoneVirtualNetworkLink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSZoneVirtualNetworkLink))
	})
	return ret, err
}

// Get retrieves the PrivateDNSZoneVirtualNetworkLink from the indexer for a given namespace and name.
func (s privateDNSZoneVirtualNetworkLinkNamespaceLister) Get(name string) (*v1alpha1.PrivateDNSZoneVirtualNetworkLink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatednszonevirtualnetworklink"), name)
	}
	return obj.(*v1alpha1.PrivateDNSZoneVirtualNetworkLink), nil
}
