/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlActiveDirectoryAdministratorLister helps list SqlActiveDirectoryAdministrators.
type SqlActiveDirectoryAdministratorLister interface {
	// List lists all SqlActiveDirectoryAdministrators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SqlActiveDirectoryAdministrator, err error)
	// SqlActiveDirectoryAdministrators returns an object that can list and get SqlActiveDirectoryAdministrators.
	SqlActiveDirectoryAdministrators(namespace string) SqlActiveDirectoryAdministratorNamespaceLister
	SqlActiveDirectoryAdministratorListerExpansion
}

// sqlActiveDirectoryAdministratorLister implements the SqlActiveDirectoryAdministratorLister interface.
type sqlActiveDirectoryAdministratorLister struct {
	indexer cache.Indexer
}

// NewSqlActiveDirectoryAdministratorLister returns a new SqlActiveDirectoryAdministratorLister.
func NewSqlActiveDirectoryAdministratorLister(indexer cache.Indexer) SqlActiveDirectoryAdministratorLister {
	return &sqlActiveDirectoryAdministratorLister{indexer: indexer}
}

// List lists all SqlActiveDirectoryAdministrators in the indexer.
func (s *sqlActiveDirectoryAdministratorLister) List(selector labels.Selector) (ret []*v1alpha1.SqlActiveDirectoryAdministrator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlActiveDirectoryAdministrator))
	})
	return ret, err
}

// SqlActiveDirectoryAdministrators returns an object that can list and get SqlActiveDirectoryAdministrators.
func (s *sqlActiveDirectoryAdministratorLister) SqlActiveDirectoryAdministrators(namespace string) SqlActiveDirectoryAdministratorNamespaceLister {
	return sqlActiveDirectoryAdministratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlActiveDirectoryAdministratorNamespaceLister helps list and get SqlActiveDirectoryAdministrators.
type SqlActiveDirectoryAdministratorNamespaceLister interface {
	// List lists all SqlActiveDirectoryAdministrators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SqlActiveDirectoryAdministrator, err error)
	// Get retrieves the SqlActiveDirectoryAdministrator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SqlActiveDirectoryAdministrator, error)
	SqlActiveDirectoryAdministratorNamespaceListerExpansion
}

// sqlActiveDirectoryAdministratorNamespaceLister implements the SqlActiveDirectoryAdministratorNamespaceLister
// interface.
type sqlActiveDirectoryAdministratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlActiveDirectoryAdministrators in the indexer for a given namespace.
func (s sqlActiveDirectoryAdministratorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlActiveDirectoryAdministrator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlActiveDirectoryAdministrator))
	})
	return ret, err
}

// Get retrieves the SqlActiveDirectoryAdministrator from the indexer for a given namespace and name.
func (s sqlActiveDirectoryAdministratorNamespaceLister) Get(name string) (*v1alpha1.SqlActiveDirectoryAdministrator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlactivedirectoryadministrator"), name)
	}
	return obj.(*v1alpha1.SqlActiveDirectoryAdministrator), nil
}
