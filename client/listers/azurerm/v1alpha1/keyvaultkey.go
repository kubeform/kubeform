/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeyVaultKeyLister helps list KeyVaultKeys.
type KeyVaultKeyLister interface {
	// List lists all KeyVaultKeys in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KeyVaultKey, err error)
	// KeyVaultKeys returns an object that can list and get KeyVaultKeys.
	KeyVaultKeys(namespace string) KeyVaultKeyNamespaceLister
	KeyVaultKeyListerExpansion
}

// keyVaultKeyLister implements the KeyVaultKeyLister interface.
type keyVaultKeyLister struct {
	indexer cache.Indexer
}

// NewKeyVaultKeyLister returns a new KeyVaultKeyLister.
func NewKeyVaultKeyLister(indexer cache.Indexer) KeyVaultKeyLister {
	return &keyVaultKeyLister{indexer: indexer}
}

// List lists all KeyVaultKeys in the indexer.
func (s *keyVaultKeyLister) List(selector labels.Selector) (ret []*v1alpha1.KeyVaultKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyVaultKey))
	})
	return ret, err
}

// KeyVaultKeys returns an object that can list and get KeyVaultKeys.
func (s *keyVaultKeyLister) KeyVaultKeys(namespace string) KeyVaultKeyNamespaceLister {
	return keyVaultKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyVaultKeyNamespaceLister helps list and get KeyVaultKeys.
type KeyVaultKeyNamespaceLister interface {
	// List lists all KeyVaultKeys in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KeyVaultKey, err error)
	// Get retrieves the KeyVaultKey from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KeyVaultKey, error)
	KeyVaultKeyNamespaceListerExpansion
}

// keyVaultKeyNamespaceLister implements the KeyVaultKeyNamespaceLister
// interface.
type keyVaultKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyVaultKeys in the indexer for a given namespace.
func (s keyVaultKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyVaultKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyVaultKey))
	})
	return ret, err
}

// Get retrieves the KeyVaultKey from the indexer for a given namespace and name.
func (s keyVaultKeyNamespaceLister) Get(name string) (*v1alpha1.KeyVaultKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keyvaultkey"), name)
	}
	return obj.(*v1alpha1.KeyVaultKey), nil
}
