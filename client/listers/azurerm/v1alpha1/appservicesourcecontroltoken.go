/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppServiceSourceControlTokenLister helps list AppServiceSourceControlTokens.
type AppServiceSourceControlTokenLister interface {
	// List lists all AppServiceSourceControlTokens in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AppServiceSourceControlToken, err error)
	// AppServiceSourceControlTokens returns an object that can list and get AppServiceSourceControlTokens.
	AppServiceSourceControlTokens(namespace string) AppServiceSourceControlTokenNamespaceLister
	AppServiceSourceControlTokenListerExpansion
}

// appServiceSourceControlTokenLister implements the AppServiceSourceControlTokenLister interface.
type appServiceSourceControlTokenLister struct {
	indexer cache.Indexer
}

// NewAppServiceSourceControlTokenLister returns a new AppServiceSourceControlTokenLister.
func NewAppServiceSourceControlTokenLister(indexer cache.Indexer) AppServiceSourceControlTokenLister {
	return &appServiceSourceControlTokenLister{indexer: indexer}
}

// List lists all AppServiceSourceControlTokens in the indexer.
func (s *appServiceSourceControlTokenLister) List(selector labels.Selector) (ret []*v1alpha1.AppServiceSourceControlToken, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppServiceSourceControlToken))
	})
	return ret, err
}

// AppServiceSourceControlTokens returns an object that can list and get AppServiceSourceControlTokens.
func (s *appServiceSourceControlTokenLister) AppServiceSourceControlTokens(namespace string) AppServiceSourceControlTokenNamespaceLister {
	return appServiceSourceControlTokenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppServiceSourceControlTokenNamespaceLister helps list and get AppServiceSourceControlTokens.
type AppServiceSourceControlTokenNamespaceLister interface {
	// List lists all AppServiceSourceControlTokens in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AppServiceSourceControlToken, err error)
	// Get retrieves the AppServiceSourceControlToken from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AppServiceSourceControlToken, error)
	AppServiceSourceControlTokenNamespaceListerExpansion
}

// appServiceSourceControlTokenNamespaceLister implements the AppServiceSourceControlTokenNamespaceLister
// interface.
type appServiceSourceControlTokenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppServiceSourceControlTokens in the indexer for a given namespace.
func (s appServiceSourceControlTokenNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppServiceSourceControlToken, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppServiceSourceControlToken))
	})
	return ret, err
}

// Get retrieves the AppServiceSourceControlToken from the indexer for a given namespace and name.
func (s appServiceSourceControlTokenNamespaceLister) Get(name string) (*v1alpha1.AppServiceSourceControlToken, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appservicesourcecontroltoken"), name)
	}
	return obj.(*v1alpha1.AppServiceSourceControlToken), nil
}
