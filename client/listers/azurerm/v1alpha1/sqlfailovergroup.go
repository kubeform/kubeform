/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlFailoverGroupLister helps list SqlFailoverGroups.
type SqlFailoverGroupLister interface {
	// List lists all SqlFailoverGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SqlFailoverGroup, err error)
	// SqlFailoverGroups returns an object that can list and get SqlFailoverGroups.
	SqlFailoverGroups(namespace string) SqlFailoverGroupNamespaceLister
	SqlFailoverGroupListerExpansion
}

// sqlFailoverGroupLister implements the SqlFailoverGroupLister interface.
type sqlFailoverGroupLister struct {
	indexer cache.Indexer
}

// NewSqlFailoverGroupLister returns a new SqlFailoverGroupLister.
func NewSqlFailoverGroupLister(indexer cache.Indexer) SqlFailoverGroupLister {
	return &sqlFailoverGroupLister{indexer: indexer}
}

// List lists all SqlFailoverGroups in the indexer.
func (s *sqlFailoverGroupLister) List(selector labels.Selector) (ret []*v1alpha1.SqlFailoverGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlFailoverGroup))
	})
	return ret, err
}

// SqlFailoverGroups returns an object that can list and get SqlFailoverGroups.
func (s *sqlFailoverGroupLister) SqlFailoverGroups(namespace string) SqlFailoverGroupNamespaceLister {
	return sqlFailoverGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlFailoverGroupNamespaceLister helps list and get SqlFailoverGroups.
type SqlFailoverGroupNamespaceLister interface {
	// List lists all SqlFailoverGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SqlFailoverGroup, err error)
	// Get retrieves the SqlFailoverGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SqlFailoverGroup, error)
	SqlFailoverGroupNamespaceListerExpansion
}

// sqlFailoverGroupNamespaceLister implements the SqlFailoverGroupNamespaceLister
// interface.
type sqlFailoverGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlFailoverGroups in the indexer for a given namespace.
func (s sqlFailoverGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlFailoverGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlFailoverGroup))
	})
	return ret, err
}

// Get retrieves the SqlFailoverGroup from the indexer for a given namespace and name.
func (s sqlFailoverGroupNamespaceLister) Get(name string) (*v1alpha1.SqlFailoverGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlfailovergroup"), name)
	}
	return obj.(*v1alpha1.SqlFailoverGroup), nil
}
