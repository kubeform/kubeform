/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlElasticpoolLister helps list SqlElasticpools.
type SqlElasticpoolLister interface {
	// List lists all SqlElasticpools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SqlElasticpool, err error)
	// SqlElasticpools returns an object that can list and get SqlElasticpools.
	SqlElasticpools(namespace string) SqlElasticpoolNamespaceLister
	SqlElasticpoolListerExpansion
}

// sqlElasticpoolLister implements the SqlElasticpoolLister interface.
type sqlElasticpoolLister struct {
	indexer cache.Indexer
}

// NewSqlElasticpoolLister returns a new SqlElasticpoolLister.
func NewSqlElasticpoolLister(indexer cache.Indexer) SqlElasticpoolLister {
	return &sqlElasticpoolLister{indexer: indexer}
}

// List lists all SqlElasticpools in the indexer.
func (s *sqlElasticpoolLister) List(selector labels.Selector) (ret []*v1alpha1.SqlElasticpool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlElasticpool))
	})
	return ret, err
}

// SqlElasticpools returns an object that can list and get SqlElasticpools.
func (s *sqlElasticpoolLister) SqlElasticpools(namespace string) SqlElasticpoolNamespaceLister {
	return sqlElasticpoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlElasticpoolNamespaceLister helps list and get SqlElasticpools.
type SqlElasticpoolNamespaceLister interface {
	// List lists all SqlElasticpools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SqlElasticpool, err error)
	// Get retrieves the SqlElasticpool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SqlElasticpool, error)
	SqlElasticpoolNamespaceListerExpansion
}

// sqlElasticpoolNamespaceLister implements the SqlElasticpoolNamespaceLister
// interface.
type sqlElasticpoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlElasticpools in the indexer for a given namespace.
func (s sqlElasticpoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlElasticpool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlElasticpool))
	})
	return ret, err
}

// Get retrieves the SqlElasticpool from the indexer for a given namespace and name.
func (s sqlElasticpoolNamespaceLister) Get(name string) (*v1alpha1.SqlElasticpool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlelasticpool"), name)
	}
	return obj.(*v1alpha1.SqlElasticpool), nil
}
