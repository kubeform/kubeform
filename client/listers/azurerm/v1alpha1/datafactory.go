/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// DataFactoryLister helps list DataFactories.
type DataFactoryLister interface {
	// List lists all DataFactories in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactory, err error)
	// DataFactories returns an object that can list and get DataFactories.
	DataFactories(namespace string) DataFactoryNamespaceLister
	DataFactoryListerExpansion
}

// dataFactoryLister implements the DataFactoryLister interface.
type dataFactoryLister struct {
	indexer cache.Indexer
}

// NewDataFactoryLister returns a new DataFactoryLister.
func NewDataFactoryLister(indexer cache.Indexer) DataFactoryLister {
	return &dataFactoryLister{indexer: indexer}
}

// List lists all DataFactories in the indexer.
func (s *dataFactoryLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactory))
	})
	return ret, err
}

// DataFactories returns an object that can list and get DataFactories.
func (s *dataFactoryLister) DataFactories(namespace string) DataFactoryNamespaceLister {
	return dataFactoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryNamespaceLister helps list and get DataFactories.
type DataFactoryNamespaceLister interface {
	// List lists all DataFactories in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactory, err error)
	// Get retrieves the DataFactory from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactory, error)
	DataFactoryNamespaceListerExpansion
}

// dataFactoryNamespaceLister implements the DataFactoryNamespaceLister
// interface.
type dataFactoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactories in the indexer for a given namespace.
func (s dataFactoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactory))
	})
	return ret, err
}

// Get retrieves the DataFactory from the indexer for a given namespace and name.
func (s dataFactoryNamespaceLister) Get(name string) (*v1alpha1.DataFactory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactory"), name)
	}
	return obj.(*v1alpha1.DataFactory), nil
}
