/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicySetDefinitionLister helps list PolicySetDefinitions.
type PolicySetDefinitionLister interface {
	// List lists all PolicySetDefinitions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PolicySetDefinition, err error)
	// PolicySetDefinitions returns an object that can list and get PolicySetDefinitions.
	PolicySetDefinitions(namespace string) PolicySetDefinitionNamespaceLister
	PolicySetDefinitionListerExpansion
}

// policySetDefinitionLister implements the PolicySetDefinitionLister interface.
type policySetDefinitionLister struct {
	indexer cache.Indexer
}

// NewPolicySetDefinitionLister returns a new PolicySetDefinitionLister.
func NewPolicySetDefinitionLister(indexer cache.Indexer) PolicySetDefinitionLister {
	return &policySetDefinitionLister{indexer: indexer}
}

// List lists all PolicySetDefinitions in the indexer.
func (s *policySetDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.PolicySetDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicySetDefinition))
	})
	return ret, err
}

// PolicySetDefinitions returns an object that can list and get PolicySetDefinitions.
func (s *policySetDefinitionLister) PolicySetDefinitions(namespace string) PolicySetDefinitionNamespaceLister {
	return policySetDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicySetDefinitionNamespaceLister helps list and get PolicySetDefinitions.
type PolicySetDefinitionNamespaceLister interface {
	// List lists all PolicySetDefinitions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PolicySetDefinition, err error)
	// Get retrieves the PolicySetDefinition from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PolicySetDefinition, error)
	PolicySetDefinitionNamespaceListerExpansion
}

// policySetDefinitionNamespaceLister implements the PolicySetDefinitionNamespaceLister
// interface.
type policySetDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicySetDefinitions in the indexer for a given namespace.
func (s policySetDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicySetDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicySetDefinition))
	})
	return ret, err
}

// Get retrieves the PolicySetDefinition from the indexer for a given namespace and name.
func (s policySetDefinitionNamespaceLister) Get(name string) (*v1alpha1.PolicySetDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policysetdefinition"), name)
	}
	return obj.(*v1alpha1.PolicySetDefinition), nil
}
