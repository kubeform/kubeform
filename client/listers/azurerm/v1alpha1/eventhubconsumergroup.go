/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventhubConsumerGroupLister helps list EventhubConsumerGroups.
type EventhubConsumerGroupLister interface {
	// List lists all EventhubConsumerGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EventhubConsumerGroup, err error)
	// EventhubConsumerGroups returns an object that can list and get EventhubConsumerGroups.
	EventhubConsumerGroups(namespace string) EventhubConsumerGroupNamespaceLister
	EventhubConsumerGroupListerExpansion
}

// eventhubConsumerGroupLister implements the EventhubConsumerGroupLister interface.
type eventhubConsumerGroupLister struct {
	indexer cache.Indexer
}

// NewEventhubConsumerGroupLister returns a new EventhubConsumerGroupLister.
func NewEventhubConsumerGroupLister(indexer cache.Indexer) EventhubConsumerGroupLister {
	return &eventhubConsumerGroupLister{indexer: indexer}
}

// List lists all EventhubConsumerGroups in the indexer.
func (s *eventhubConsumerGroupLister) List(selector labels.Selector) (ret []*v1alpha1.EventhubConsumerGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventhubConsumerGroup))
	})
	return ret, err
}

// EventhubConsumerGroups returns an object that can list and get EventhubConsumerGroups.
func (s *eventhubConsumerGroupLister) EventhubConsumerGroups(namespace string) EventhubConsumerGroupNamespaceLister {
	return eventhubConsumerGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventhubConsumerGroupNamespaceLister helps list and get EventhubConsumerGroups.
type EventhubConsumerGroupNamespaceLister interface {
	// List lists all EventhubConsumerGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EventhubConsumerGroup, err error)
	// Get retrieves the EventhubConsumerGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EventhubConsumerGroup, error)
	EventhubConsumerGroupNamespaceListerExpansion
}

// eventhubConsumerGroupNamespaceLister implements the EventhubConsumerGroupNamespaceLister
// interface.
type eventhubConsumerGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventhubConsumerGroups in the indexer for a given namespace.
func (s eventhubConsumerGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventhubConsumerGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventhubConsumerGroup))
	})
	return ret, err
}

// Get retrieves the EventhubConsumerGroup from the indexer for a given namespace and name.
func (s eventhubConsumerGroupNamespaceLister) Get(name string) (*v1alpha1.EventhubConsumerGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventhubconsumergroup"), name)
	}
	return obj.(*v1alpha1.EventhubConsumerGroup), nil
}
