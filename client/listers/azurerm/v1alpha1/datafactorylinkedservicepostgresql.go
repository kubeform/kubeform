/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataFactoryLinkedServicePostgresqlLister helps list DataFactoryLinkedServicePostgresqls.
type DataFactoryLinkedServicePostgresqlLister interface {
	// List lists all DataFactoryLinkedServicePostgresqls in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServicePostgresql, err error)
	// DataFactoryLinkedServicePostgresqls returns an object that can list and get DataFactoryLinkedServicePostgresqls.
	DataFactoryLinkedServicePostgresqls(namespace string) DataFactoryLinkedServicePostgresqlNamespaceLister
	DataFactoryLinkedServicePostgresqlListerExpansion
}

// dataFactoryLinkedServicePostgresqlLister implements the DataFactoryLinkedServicePostgresqlLister interface.
type dataFactoryLinkedServicePostgresqlLister struct {
	indexer cache.Indexer
}

// NewDataFactoryLinkedServicePostgresqlLister returns a new DataFactoryLinkedServicePostgresqlLister.
func NewDataFactoryLinkedServicePostgresqlLister(indexer cache.Indexer) DataFactoryLinkedServicePostgresqlLister {
	return &dataFactoryLinkedServicePostgresqlLister{indexer: indexer}
}

// List lists all DataFactoryLinkedServicePostgresqls in the indexer.
func (s *dataFactoryLinkedServicePostgresqlLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServicePostgresql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryLinkedServicePostgresql))
	})
	return ret, err
}

// DataFactoryLinkedServicePostgresqls returns an object that can list and get DataFactoryLinkedServicePostgresqls.
func (s *dataFactoryLinkedServicePostgresqlLister) DataFactoryLinkedServicePostgresqls(namespace string) DataFactoryLinkedServicePostgresqlNamespaceLister {
	return dataFactoryLinkedServicePostgresqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryLinkedServicePostgresqlNamespaceLister helps list and get DataFactoryLinkedServicePostgresqls.
type DataFactoryLinkedServicePostgresqlNamespaceLister interface {
	// List lists all DataFactoryLinkedServicePostgresqls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServicePostgresql, err error)
	// Get retrieves the DataFactoryLinkedServicePostgresql from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactoryLinkedServicePostgresql, error)
	DataFactoryLinkedServicePostgresqlNamespaceListerExpansion
}

// dataFactoryLinkedServicePostgresqlNamespaceLister implements the DataFactoryLinkedServicePostgresqlNamespaceLister
// interface.
type dataFactoryLinkedServicePostgresqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactoryLinkedServicePostgresqls in the indexer for a given namespace.
func (s dataFactoryLinkedServicePostgresqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryLinkedServicePostgresql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryLinkedServicePostgresql))
	})
	return ret, err
}

// Get retrieves the DataFactoryLinkedServicePostgresql from the indexer for a given namespace and name.
func (s dataFactoryLinkedServicePostgresqlNamespaceLister) Get(name string) (*v1alpha1.DataFactoryLinkedServicePostgresql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactorylinkedservicepostgresql"), name)
	}
	return obj.(*v1alpha1.DataFactoryLinkedServicePostgresql), nil
}
