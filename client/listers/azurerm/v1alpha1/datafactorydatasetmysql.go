/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataFactoryDatasetMysqlLister helps list DataFactoryDatasetMysqls.
type DataFactoryDatasetMysqlLister interface {
	// List lists all DataFactoryDatasetMysqls in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetMysql, err error)
	// DataFactoryDatasetMysqls returns an object that can list and get DataFactoryDatasetMysqls.
	DataFactoryDatasetMysqls(namespace string) DataFactoryDatasetMysqlNamespaceLister
	DataFactoryDatasetMysqlListerExpansion
}

// dataFactoryDatasetMysqlLister implements the DataFactoryDatasetMysqlLister interface.
type dataFactoryDatasetMysqlLister struct {
	indexer cache.Indexer
}

// NewDataFactoryDatasetMysqlLister returns a new DataFactoryDatasetMysqlLister.
func NewDataFactoryDatasetMysqlLister(indexer cache.Indexer) DataFactoryDatasetMysqlLister {
	return &dataFactoryDatasetMysqlLister{indexer: indexer}
}

// List lists all DataFactoryDatasetMysqls in the indexer.
func (s *dataFactoryDatasetMysqlLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetMysql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryDatasetMysql))
	})
	return ret, err
}

// DataFactoryDatasetMysqls returns an object that can list and get DataFactoryDatasetMysqls.
func (s *dataFactoryDatasetMysqlLister) DataFactoryDatasetMysqls(namespace string) DataFactoryDatasetMysqlNamespaceLister {
	return dataFactoryDatasetMysqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataFactoryDatasetMysqlNamespaceLister helps list and get DataFactoryDatasetMysqls.
type DataFactoryDatasetMysqlNamespaceLister interface {
	// List lists all DataFactoryDatasetMysqls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetMysql, err error)
	// Get retrieves the DataFactoryDatasetMysql from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataFactoryDatasetMysql, error)
	DataFactoryDatasetMysqlNamespaceListerExpansion
}

// dataFactoryDatasetMysqlNamespaceLister implements the DataFactoryDatasetMysqlNamespaceLister
// interface.
type dataFactoryDatasetMysqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataFactoryDatasetMysqls in the indexer for a given namespace.
func (s dataFactoryDatasetMysqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataFactoryDatasetMysql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataFactoryDatasetMysql))
	})
	return ret, err
}

// Get retrieves the DataFactoryDatasetMysql from the indexer for a given namespace and name.
func (s dataFactoryDatasetMysqlNamespaceLister) Get(name string) (*v1alpha1.DataFactoryDatasetMysql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafactorydatasetmysql"), name)
	}
	return obj.(*v1alpha1.DataFactoryDatasetMysql), nil
}
