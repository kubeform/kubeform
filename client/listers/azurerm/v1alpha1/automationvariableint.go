/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutomationVariableIntLister helps list AutomationVariableInts.
type AutomationVariableIntLister interface {
	// List lists all AutomationVariableInts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationVariableInt, err error)
	// AutomationVariableInts returns an object that can list and get AutomationVariableInts.
	AutomationVariableInts(namespace string) AutomationVariableIntNamespaceLister
	AutomationVariableIntListerExpansion
}

// automationVariableIntLister implements the AutomationVariableIntLister interface.
type automationVariableIntLister struct {
	indexer cache.Indexer
}

// NewAutomationVariableIntLister returns a new AutomationVariableIntLister.
func NewAutomationVariableIntLister(indexer cache.Indexer) AutomationVariableIntLister {
	return &automationVariableIntLister{indexer: indexer}
}

// List lists all AutomationVariableInts in the indexer.
func (s *automationVariableIntLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationVariableInt, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationVariableInt))
	})
	return ret, err
}

// AutomationVariableInts returns an object that can list and get AutomationVariableInts.
func (s *automationVariableIntLister) AutomationVariableInts(namespace string) AutomationVariableIntNamespaceLister {
	return automationVariableIntNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutomationVariableIntNamespaceLister helps list and get AutomationVariableInts.
type AutomationVariableIntNamespaceLister interface {
	// List lists all AutomationVariableInts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationVariableInt, err error)
	// Get retrieves the AutomationVariableInt from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AutomationVariableInt, error)
	AutomationVariableIntNamespaceListerExpansion
}

// automationVariableIntNamespaceLister implements the AutomationVariableIntNamespaceLister
// interface.
type automationVariableIntNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutomationVariableInts in the indexer for a given namespace.
func (s automationVariableIntNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationVariableInt, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationVariableInt))
	})
	return ret, err
}

// Get retrieves the AutomationVariableInt from the indexer for a given namespace and name.
func (s automationVariableIntNamespaceLister) Get(name string) (*v1alpha1.AutomationVariableInt, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("automationvariableint"), name)
	}
	return obj.(*v1alpha1.AutomationVariableInt), nil
}
