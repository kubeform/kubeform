/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiManagementIdentityProviderAadLister helps list ApiManagementIdentityProviderAads.
type ApiManagementIdentityProviderAadLister interface {
	// List lists all ApiManagementIdentityProviderAads in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApiManagementIdentityProviderAad, err error)
	// ApiManagementIdentityProviderAads returns an object that can list and get ApiManagementIdentityProviderAads.
	ApiManagementIdentityProviderAads(namespace string) ApiManagementIdentityProviderAadNamespaceLister
	ApiManagementIdentityProviderAadListerExpansion
}

// apiManagementIdentityProviderAadLister implements the ApiManagementIdentityProviderAadLister interface.
type apiManagementIdentityProviderAadLister struct {
	indexer cache.Indexer
}

// NewApiManagementIdentityProviderAadLister returns a new ApiManagementIdentityProviderAadLister.
func NewApiManagementIdentityProviderAadLister(indexer cache.Indexer) ApiManagementIdentityProviderAadLister {
	return &apiManagementIdentityProviderAadLister{indexer: indexer}
}

// List lists all ApiManagementIdentityProviderAads in the indexer.
func (s *apiManagementIdentityProviderAadLister) List(selector labels.Selector) (ret []*v1alpha1.ApiManagementIdentityProviderAad, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiManagementIdentityProviderAad))
	})
	return ret, err
}

// ApiManagementIdentityProviderAads returns an object that can list and get ApiManagementIdentityProviderAads.
func (s *apiManagementIdentityProviderAadLister) ApiManagementIdentityProviderAads(namespace string) ApiManagementIdentityProviderAadNamespaceLister {
	return apiManagementIdentityProviderAadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiManagementIdentityProviderAadNamespaceLister helps list and get ApiManagementIdentityProviderAads.
type ApiManagementIdentityProviderAadNamespaceLister interface {
	// List lists all ApiManagementIdentityProviderAads in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApiManagementIdentityProviderAad, err error)
	// Get retrieves the ApiManagementIdentityProviderAad from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApiManagementIdentityProviderAad, error)
	ApiManagementIdentityProviderAadNamespaceListerExpansion
}

// apiManagementIdentityProviderAadNamespaceLister implements the ApiManagementIdentityProviderAadNamespaceLister
// interface.
type apiManagementIdentityProviderAadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiManagementIdentityProviderAads in the indexer for a given namespace.
func (s apiManagementIdentityProviderAadNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiManagementIdentityProviderAad, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiManagementIdentityProviderAad))
	})
	return ret, err
}

// Get retrieves the ApiManagementIdentityProviderAad from the indexer for a given namespace and name.
func (s apiManagementIdentityProviderAadNamespaceLister) Get(name string) (*v1alpha1.ApiManagementIdentityProviderAad, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apimanagementidentityprovideraad"), name)
	}
	return obj.(*v1alpha1.ApiManagementIdentityProviderAad), nil
}
