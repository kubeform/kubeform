/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiManagementCertificateLister helps list ApiManagementCertificates.
type ApiManagementCertificateLister interface {
	// List lists all ApiManagementCertificates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApiManagementCertificate, err error)
	// ApiManagementCertificates returns an object that can list and get ApiManagementCertificates.
	ApiManagementCertificates(namespace string) ApiManagementCertificateNamespaceLister
	ApiManagementCertificateListerExpansion
}

// apiManagementCertificateLister implements the ApiManagementCertificateLister interface.
type apiManagementCertificateLister struct {
	indexer cache.Indexer
}

// NewApiManagementCertificateLister returns a new ApiManagementCertificateLister.
func NewApiManagementCertificateLister(indexer cache.Indexer) ApiManagementCertificateLister {
	return &apiManagementCertificateLister{indexer: indexer}
}

// List lists all ApiManagementCertificates in the indexer.
func (s *apiManagementCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.ApiManagementCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiManagementCertificate))
	})
	return ret, err
}

// ApiManagementCertificates returns an object that can list and get ApiManagementCertificates.
func (s *apiManagementCertificateLister) ApiManagementCertificates(namespace string) ApiManagementCertificateNamespaceLister {
	return apiManagementCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiManagementCertificateNamespaceLister helps list and get ApiManagementCertificates.
type ApiManagementCertificateNamespaceLister interface {
	// List lists all ApiManagementCertificates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApiManagementCertificate, err error)
	// Get retrieves the ApiManagementCertificate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApiManagementCertificate, error)
	ApiManagementCertificateNamespaceListerExpansion
}

// apiManagementCertificateNamespaceLister implements the ApiManagementCertificateNamespaceLister
// interface.
type apiManagementCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiManagementCertificates in the indexer for a given namespace.
func (s apiManagementCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiManagementCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiManagementCertificate))
	})
	return ret, err
}

// Get retrieves the ApiManagementCertificate from the indexer for a given namespace and name.
func (s apiManagementCertificateNamespaceLister) Get(name string) (*v1alpha1.ApiManagementCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apimanagementcertificate"), name)
	}
	return obj.(*v1alpha1.ApiManagementCertificate), nil
}
