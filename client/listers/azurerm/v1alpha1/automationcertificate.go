/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutomationCertificateLister helps list AutomationCertificates.
type AutomationCertificateLister interface {
	// List lists all AutomationCertificates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationCertificate, err error)
	// AutomationCertificates returns an object that can list and get AutomationCertificates.
	AutomationCertificates(namespace string) AutomationCertificateNamespaceLister
	AutomationCertificateListerExpansion
}

// automationCertificateLister implements the AutomationCertificateLister interface.
type automationCertificateLister struct {
	indexer cache.Indexer
}

// NewAutomationCertificateLister returns a new AutomationCertificateLister.
func NewAutomationCertificateLister(indexer cache.Indexer) AutomationCertificateLister {
	return &automationCertificateLister{indexer: indexer}
}

// List lists all AutomationCertificates in the indexer.
func (s *automationCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationCertificate))
	})
	return ret, err
}

// AutomationCertificates returns an object that can list and get AutomationCertificates.
func (s *automationCertificateLister) AutomationCertificates(namespace string) AutomationCertificateNamespaceLister {
	return automationCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutomationCertificateNamespaceLister helps list and get AutomationCertificates.
type AutomationCertificateNamespaceLister interface {
	// List lists all AutomationCertificates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationCertificate, err error)
	// Get retrieves the AutomationCertificate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AutomationCertificate, error)
	AutomationCertificateNamespaceListerExpansion
}

// automationCertificateNamespaceLister implements the AutomationCertificateNamespaceLister
// interface.
type automationCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutomationCertificates in the indexer for a given namespace.
func (s automationCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationCertificate))
	})
	return ret, err
}

// Get retrieves the AutomationCertificate from the indexer for a given namespace and name.
func (s automationCertificateNamespaceLister) Get(name string) (*v1alpha1.AutomationCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("automationcertificate"), name)
	}
	return obj.(*v1alpha1.AutomationCertificate), nil
}
