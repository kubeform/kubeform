/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MariadbConfigurationLister helps list MariadbConfigurations.
type MariadbConfigurationLister interface {
	// List lists all MariadbConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MariadbConfiguration, err error)
	// MariadbConfigurations returns an object that can list and get MariadbConfigurations.
	MariadbConfigurations(namespace string) MariadbConfigurationNamespaceLister
	MariadbConfigurationListerExpansion
}

// mariadbConfigurationLister implements the MariadbConfigurationLister interface.
type mariadbConfigurationLister struct {
	indexer cache.Indexer
}

// NewMariadbConfigurationLister returns a new MariadbConfigurationLister.
func NewMariadbConfigurationLister(indexer cache.Indexer) MariadbConfigurationLister {
	return &mariadbConfigurationLister{indexer: indexer}
}

// List lists all MariadbConfigurations in the indexer.
func (s *mariadbConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.MariadbConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariadbConfiguration))
	})
	return ret, err
}

// MariadbConfigurations returns an object that can list and get MariadbConfigurations.
func (s *mariadbConfigurationLister) MariadbConfigurations(namespace string) MariadbConfigurationNamespaceLister {
	return mariadbConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MariadbConfigurationNamespaceLister helps list and get MariadbConfigurations.
type MariadbConfigurationNamespaceLister interface {
	// List lists all MariadbConfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MariadbConfiguration, err error)
	// Get retrieves the MariadbConfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MariadbConfiguration, error)
	MariadbConfigurationNamespaceListerExpansion
}

// mariadbConfigurationNamespaceLister implements the MariadbConfigurationNamespaceLister
// interface.
type mariadbConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MariadbConfigurations in the indexer for a given namespace.
func (s mariadbConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MariadbConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariadbConfiguration))
	})
	return ret, err
}

// Get retrieves the MariadbConfiguration from the indexer for a given namespace and name.
func (s mariadbConfigurationNamespaceLister) Get(name string) (*v1alpha1.MariadbConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mariadbconfiguration"), name)
	}
	return obj.(*v1alpha1.MariadbConfiguration), nil
}
