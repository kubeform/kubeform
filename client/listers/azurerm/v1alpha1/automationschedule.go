/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutomationScheduleLister helps list AutomationSchedules.
type AutomationScheduleLister interface {
	// List lists all AutomationSchedules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationSchedule, err error)
	// AutomationSchedules returns an object that can list and get AutomationSchedules.
	AutomationSchedules(namespace string) AutomationScheduleNamespaceLister
	AutomationScheduleListerExpansion
}

// automationScheduleLister implements the AutomationScheduleLister interface.
type automationScheduleLister struct {
	indexer cache.Indexer
}

// NewAutomationScheduleLister returns a new AutomationScheduleLister.
func NewAutomationScheduleLister(indexer cache.Indexer) AutomationScheduleLister {
	return &automationScheduleLister{indexer: indexer}
}

// List lists all AutomationSchedules in the indexer.
func (s *automationScheduleLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationSchedule))
	})
	return ret, err
}

// AutomationSchedules returns an object that can list and get AutomationSchedules.
func (s *automationScheduleLister) AutomationSchedules(namespace string) AutomationScheduleNamespaceLister {
	return automationScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutomationScheduleNamespaceLister helps list and get AutomationSchedules.
type AutomationScheduleNamespaceLister interface {
	// List lists all AutomationSchedules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationSchedule, err error)
	// Get retrieves the AutomationSchedule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AutomationSchedule, error)
	AutomationScheduleNamespaceListerExpansion
}

// automationScheduleNamespaceLister implements the AutomationScheduleNamespaceLister
// interface.
type automationScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutomationSchedules in the indexer for a given namespace.
func (s automationScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationSchedule))
	})
	return ret, err
}

// Get retrieves the AutomationSchedule from the indexer for a given namespace and name.
func (s automationScheduleNamespaceLister) Get(name string) (*v1alpha1.AutomationSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("automationschedule"), name)
	}
	return obj.(*v1alpha1.AutomationSchedule), nil
}
