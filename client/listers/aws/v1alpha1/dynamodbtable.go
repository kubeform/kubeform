/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DynamodbTableLister helps list DynamodbTables.
type DynamodbTableLister interface {
	// List lists all DynamodbTables in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DynamodbTable, err error)
	// DynamodbTables returns an object that can list and get DynamodbTables.
	DynamodbTables(namespace string) DynamodbTableNamespaceLister
	DynamodbTableListerExpansion
}

// dynamodbTableLister implements the DynamodbTableLister interface.
type dynamodbTableLister struct {
	indexer cache.Indexer
}

// NewDynamodbTableLister returns a new DynamodbTableLister.
func NewDynamodbTableLister(indexer cache.Indexer) DynamodbTableLister {
	return &dynamodbTableLister{indexer: indexer}
}

// List lists all DynamodbTables in the indexer.
func (s *dynamodbTableLister) List(selector labels.Selector) (ret []*v1alpha1.DynamodbTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DynamodbTable))
	})
	return ret, err
}

// DynamodbTables returns an object that can list and get DynamodbTables.
func (s *dynamodbTableLister) DynamodbTables(namespace string) DynamodbTableNamespaceLister {
	return dynamodbTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DynamodbTableNamespaceLister helps list and get DynamodbTables.
type DynamodbTableNamespaceLister interface {
	// List lists all DynamodbTables in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DynamodbTable, err error)
	// Get retrieves the DynamodbTable from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DynamodbTable, error)
	DynamodbTableNamespaceListerExpansion
}

// dynamodbTableNamespaceLister implements the DynamodbTableNamespaceLister
// interface.
type dynamodbTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DynamodbTables in the indexer for a given namespace.
func (s dynamodbTableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DynamodbTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DynamodbTable))
	})
	return ret, err
}

// Get retrieves the DynamodbTable from the indexer for a given namespace and name.
func (s dynamodbTableNamespaceLister) Get(name string) (*v1alpha1.DynamodbTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dynamodbtable"), name)
	}
	return obj.(*v1alpha1.DynamodbTable), nil
}
