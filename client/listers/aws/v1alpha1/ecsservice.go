/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EcsServiceLister helps list EcsServices.
type EcsServiceLister interface {
	// List lists all EcsServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EcsService, err error)
	// EcsServices returns an object that can list and get EcsServices.
	EcsServices(namespace string) EcsServiceNamespaceLister
	EcsServiceListerExpansion
}

// ecsServiceLister implements the EcsServiceLister interface.
type ecsServiceLister struct {
	indexer cache.Indexer
}

// NewEcsServiceLister returns a new EcsServiceLister.
func NewEcsServiceLister(indexer cache.Indexer) EcsServiceLister {
	return &ecsServiceLister{indexer: indexer}
}

// List lists all EcsServices in the indexer.
func (s *ecsServiceLister) List(selector labels.Selector) (ret []*v1alpha1.EcsService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcsService))
	})
	return ret, err
}

// EcsServices returns an object that can list and get EcsServices.
func (s *ecsServiceLister) EcsServices(namespace string) EcsServiceNamespaceLister {
	return ecsServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EcsServiceNamespaceLister helps list and get EcsServices.
type EcsServiceNamespaceLister interface {
	// List lists all EcsServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EcsService, err error)
	// Get retrieves the EcsService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EcsService, error)
	EcsServiceNamespaceListerExpansion
}

// ecsServiceNamespaceLister implements the EcsServiceNamespaceLister
// interface.
type ecsServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EcsServices in the indexer for a given namespace.
func (s ecsServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EcsService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcsService))
	})
	return ret, err
}

// Get retrieves the EcsService from the indexer for a given namespace and name.
func (s ecsServiceNamespaceLister) Get(name string) (*v1alpha1.EcsService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ecsservice"), name)
	}
	return obj.(*v1alpha1.EcsService), nil
}
