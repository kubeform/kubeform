/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// WafRegexPatternSetLister helps list WafRegexPatternSets.
type WafRegexPatternSetLister interface {
	// List lists all WafRegexPatternSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WafRegexPatternSet, err error)
	// WafRegexPatternSets returns an object that can list and get WafRegexPatternSets.
	WafRegexPatternSets(namespace string) WafRegexPatternSetNamespaceLister
	WafRegexPatternSetListerExpansion
}

// wafRegexPatternSetLister implements the WafRegexPatternSetLister interface.
type wafRegexPatternSetLister struct {
	indexer cache.Indexer
}

// NewWafRegexPatternSetLister returns a new WafRegexPatternSetLister.
func NewWafRegexPatternSetLister(indexer cache.Indexer) WafRegexPatternSetLister {
	return &wafRegexPatternSetLister{indexer: indexer}
}

// List lists all WafRegexPatternSets in the indexer.
func (s *wafRegexPatternSetLister) List(selector labels.Selector) (ret []*v1alpha1.WafRegexPatternSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WafRegexPatternSet))
	})
	return ret, err
}

// WafRegexPatternSets returns an object that can list and get WafRegexPatternSets.
func (s *wafRegexPatternSetLister) WafRegexPatternSets(namespace string) WafRegexPatternSetNamespaceLister {
	return wafRegexPatternSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WafRegexPatternSetNamespaceLister helps list and get WafRegexPatternSets.
type WafRegexPatternSetNamespaceLister interface {
	// List lists all WafRegexPatternSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WafRegexPatternSet, err error)
	// Get retrieves the WafRegexPatternSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WafRegexPatternSet, error)
	WafRegexPatternSetNamespaceListerExpansion
}

// wafRegexPatternSetNamespaceLister implements the WafRegexPatternSetNamespaceLister
// interface.
type wafRegexPatternSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WafRegexPatternSets in the indexer for a given namespace.
func (s wafRegexPatternSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WafRegexPatternSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WafRegexPatternSet))
	})
	return ret, err
}

// Get retrieves the WafRegexPatternSet from the indexer for a given namespace and name.
func (s wafRegexPatternSetNamespaceLister) Get(name string) (*v1alpha1.WafRegexPatternSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wafregexpatternset"), name)
	}
	return obj.(*v1alpha1.WafRegexPatternSet), nil
}
