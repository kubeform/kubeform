/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// DatasyncLocationS3Lister helps list DatasyncLocationS3s.
type DatasyncLocationS3Lister interface {
	// List lists all DatasyncLocationS3s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatasyncLocationS3, err error)
	// DatasyncLocationS3s returns an object that can list and get DatasyncLocationS3s.
	DatasyncLocationS3s(namespace string) DatasyncLocationS3NamespaceLister
	DatasyncLocationS3ListerExpansion
}

// datasyncLocationS3Lister implements the DatasyncLocationS3Lister interface.
type datasyncLocationS3Lister struct {
	indexer cache.Indexer
}

// NewDatasyncLocationS3Lister returns a new DatasyncLocationS3Lister.
func NewDatasyncLocationS3Lister(indexer cache.Indexer) DatasyncLocationS3Lister {
	return &datasyncLocationS3Lister{indexer: indexer}
}

// List lists all DatasyncLocationS3s in the indexer.
func (s *datasyncLocationS3Lister) List(selector labels.Selector) (ret []*v1alpha1.DatasyncLocationS3, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatasyncLocationS3))
	})
	return ret, err
}

// DatasyncLocationS3s returns an object that can list and get DatasyncLocationS3s.
func (s *datasyncLocationS3Lister) DatasyncLocationS3s(namespace string) DatasyncLocationS3NamespaceLister {
	return datasyncLocationS3NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatasyncLocationS3NamespaceLister helps list and get DatasyncLocationS3s.
type DatasyncLocationS3NamespaceLister interface {
	// List lists all DatasyncLocationS3s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatasyncLocationS3, err error)
	// Get retrieves the DatasyncLocationS3 from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatasyncLocationS3, error)
	DatasyncLocationS3NamespaceListerExpansion
}

// datasyncLocationS3NamespaceLister implements the DatasyncLocationS3NamespaceLister
// interface.
type datasyncLocationS3NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatasyncLocationS3s in the indexer for a given namespace.
func (s datasyncLocationS3NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatasyncLocationS3, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatasyncLocationS3))
	})
	return ret, err
}

// Get retrieves the DatasyncLocationS3 from the indexer for a given namespace and name.
func (s datasyncLocationS3NamespaceLister) Get(name string) (*v1alpha1.DatasyncLocationS3, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datasynclocations3"), name)
	}
	return obj.(*v1alpha1.DatasyncLocationS3), nil
}
