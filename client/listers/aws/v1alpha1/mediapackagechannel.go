/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MediaPackageChannelLister helps list MediaPackageChannels.
type MediaPackageChannelLister interface {
	// List lists all MediaPackageChannels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MediaPackageChannel, err error)
	// MediaPackageChannels returns an object that can list and get MediaPackageChannels.
	MediaPackageChannels(namespace string) MediaPackageChannelNamespaceLister
	MediaPackageChannelListerExpansion
}

// mediaPackageChannelLister implements the MediaPackageChannelLister interface.
type mediaPackageChannelLister struct {
	indexer cache.Indexer
}

// NewMediaPackageChannelLister returns a new MediaPackageChannelLister.
func NewMediaPackageChannelLister(indexer cache.Indexer) MediaPackageChannelLister {
	return &mediaPackageChannelLister{indexer: indexer}
}

// List lists all MediaPackageChannels in the indexer.
func (s *mediaPackageChannelLister) List(selector labels.Selector) (ret []*v1alpha1.MediaPackageChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MediaPackageChannel))
	})
	return ret, err
}

// MediaPackageChannels returns an object that can list and get MediaPackageChannels.
func (s *mediaPackageChannelLister) MediaPackageChannels(namespace string) MediaPackageChannelNamespaceLister {
	return mediaPackageChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MediaPackageChannelNamespaceLister helps list and get MediaPackageChannels.
type MediaPackageChannelNamespaceLister interface {
	// List lists all MediaPackageChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MediaPackageChannel, err error)
	// Get retrieves the MediaPackageChannel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MediaPackageChannel, error)
	MediaPackageChannelNamespaceListerExpansion
}

// mediaPackageChannelNamespaceLister implements the MediaPackageChannelNamespaceLister
// interface.
type mediaPackageChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MediaPackageChannels in the indexer for a given namespace.
func (s mediaPackageChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MediaPackageChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MediaPackageChannel))
	})
	return ret, err
}

// Get retrieves the MediaPackageChannel from the indexer for a given namespace and name.
func (s mediaPackageChannelNamespaceLister) Get(name string) (*v1alpha1.MediaPackageChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mediapackagechannel"), name)
	}
	return obj.(*v1alpha1.MediaPackageChannel), nil
}
