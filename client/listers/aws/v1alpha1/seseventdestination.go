/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SesEventDestinationLister helps list SesEventDestinations.
type SesEventDestinationLister interface {
	// List lists all SesEventDestinations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SesEventDestination, err error)
	// SesEventDestinations returns an object that can list and get SesEventDestinations.
	SesEventDestinations(namespace string) SesEventDestinationNamespaceLister
	SesEventDestinationListerExpansion
}

// sesEventDestinationLister implements the SesEventDestinationLister interface.
type sesEventDestinationLister struct {
	indexer cache.Indexer
}

// NewSesEventDestinationLister returns a new SesEventDestinationLister.
func NewSesEventDestinationLister(indexer cache.Indexer) SesEventDestinationLister {
	return &sesEventDestinationLister{indexer: indexer}
}

// List lists all SesEventDestinations in the indexer.
func (s *sesEventDestinationLister) List(selector labels.Selector) (ret []*v1alpha1.SesEventDestination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SesEventDestination))
	})
	return ret, err
}

// SesEventDestinations returns an object that can list and get SesEventDestinations.
func (s *sesEventDestinationLister) SesEventDestinations(namespace string) SesEventDestinationNamespaceLister {
	return sesEventDestinationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SesEventDestinationNamespaceLister helps list and get SesEventDestinations.
type SesEventDestinationNamespaceLister interface {
	// List lists all SesEventDestinations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SesEventDestination, err error)
	// Get retrieves the SesEventDestination from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SesEventDestination, error)
	SesEventDestinationNamespaceListerExpansion
}

// sesEventDestinationNamespaceLister implements the SesEventDestinationNamespaceLister
// interface.
type sesEventDestinationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SesEventDestinations in the indexer for a given namespace.
func (s sesEventDestinationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SesEventDestination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SesEventDestination))
	})
	return ret, err
}

// Get retrieves the SesEventDestination from the indexer for a given namespace and name.
func (s sesEventDestinationNamespaceLister) Get(name string) (*v1alpha1.SesEventDestination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("seseventdestination"), name)
	}
	return obj.(*v1alpha1.SesEventDestination), nil
}
