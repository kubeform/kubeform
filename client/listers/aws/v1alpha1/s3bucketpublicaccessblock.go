/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// S3BucketPublicAccessBlockLister helps list S3BucketPublicAccessBlocks.
type S3BucketPublicAccessBlockLister interface {
	// List lists all S3BucketPublicAccessBlocks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.S3BucketPublicAccessBlock, err error)
	// S3BucketPublicAccessBlocks returns an object that can list and get S3BucketPublicAccessBlocks.
	S3BucketPublicAccessBlocks(namespace string) S3BucketPublicAccessBlockNamespaceLister
	S3BucketPublicAccessBlockListerExpansion
}

// s3BucketPublicAccessBlockLister implements the S3BucketPublicAccessBlockLister interface.
type s3BucketPublicAccessBlockLister struct {
	indexer cache.Indexer
}

// NewS3BucketPublicAccessBlockLister returns a new S3BucketPublicAccessBlockLister.
func NewS3BucketPublicAccessBlockLister(indexer cache.Indexer) S3BucketPublicAccessBlockLister {
	return &s3BucketPublicAccessBlockLister{indexer: indexer}
}

// List lists all S3BucketPublicAccessBlocks in the indexer.
func (s *s3BucketPublicAccessBlockLister) List(selector labels.Selector) (ret []*v1alpha1.S3BucketPublicAccessBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3BucketPublicAccessBlock))
	})
	return ret, err
}

// S3BucketPublicAccessBlocks returns an object that can list and get S3BucketPublicAccessBlocks.
func (s *s3BucketPublicAccessBlockLister) S3BucketPublicAccessBlocks(namespace string) S3BucketPublicAccessBlockNamespaceLister {
	return s3BucketPublicAccessBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// S3BucketPublicAccessBlockNamespaceLister helps list and get S3BucketPublicAccessBlocks.
type S3BucketPublicAccessBlockNamespaceLister interface {
	// List lists all S3BucketPublicAccessBlocks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.S3BucketPublicAccessBlock, err error)
	// Get retrieves the S3BucketPublicAccessBlock from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.S3BucketPublicAccessBlock, error)
	S3BucketPublicAccessBlockNamespaceListerExpansion
}

// s3BucketPublicAccessBlockNamespaceLister implements the S3BucketPublicAccessBlockNamespaceLister
// interface.
type s3BucketPublicAccessBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all S3BucketPublicAccessBlocks in the indexer for a given namespace.
func (s s3BucketPublicAccessBlockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.S3BucketPublicAccessBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3BucketPublicAccessBlock))
	})
	return ret, err
}

// Get retrieves the S3BucketPublicAccessBlock from the indexer for a given namespace and name.
func (s s3BucketPublicAccessBlockNamespaceLister) Get(name string) (*v1alpha1.S3BucketPublicAccessBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("s3bucketpublicaccessblock"), name)
	}
	return obj.(*v1alpha1.S3BucketPublicAccessBlock), nil
}
