/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EbsEncryptionByDefaultLister helps list EbsEncryptionByDefaults.
type EbsEncryptionByDefaultLister interface {
	// List lists all EbsEncryptionByDefaults in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EbsEncryptionByDefault, err error)
	// EbsEncryptionByDefaults returns an object that can list and get EbsEncryptionByDefaults.
	EbsEncryptionByDefaults(namespace string) EbsEncryptionByDefaultNamespaceLister
	EbsEncryptionByDefaultListerExpansion
}

// ebsEncryptionByDefaultLister implements the EbsEncryptionByDefaultLister interface.
type ebsEncryptionByDefaultLister struct {
	indexer cache.Indexer
}

// NewEbsEncryptionByDefaultLister returns a new EbsEncryptionByDefaultLister.
func NewEbsEncryptionByDefaultLister(indexer cache.Indexer) EbsEncryptionByDefaultLister {
	return &ebsEncryptionByDefaultLister{indexer: indexer}
}

// List lists all EbsEncryptionByDefaults in the indexer.
func (s *ebsEncryptionByDefaultLister) List(selector labels.Selector) (ret []*v1alpha1.EbsEncryptionByDefault, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EbsEncryptionByDefault))
	})
	return ret, err
}

// EbsEncryptionByDefaults returns an object that can list and get EbsEncryptionByDefaults.
func (s *ebsEncryptionByDefaultLister) EbsEncryptionByDefaults(namespace string) EbsEncryptionByDefaultNamespaceLister {
	return ebsEncryptionByDefaultNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EbsEncryptionByDefaultNamespaceLister helps list and get EbsEncryptionByDefaults.
type EbsEncryptionByDefaultNamespaceLister interface {
	// List lists all EbsEncryptionByDefaults in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EbsEncryptionByDefault, err error)
	// Get retrieves the EbsEncryptionByDefault from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EbsEncryptionByDefault, error)
	EbsEncryptionByDefaultNamespaceListerExpansion
}

// ebsEncryptionByDefaultNamespaceLister implements the EbsEncryptionByDefaultNamespaceLister
// interface.
type ebsEncryptionByDefaultNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EbsEncryptionByDefaults in the indexer for a given namespace.
func (s ebsEncryptionByDefaultNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EbsEncryptionByDefault, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EbsEncryptionByDefault))
	})
	return ret, err
}

// Get retrieves the EbsEncryptionByDefault from the indexer for a given namespace and name.
func (s ebsEncryptionByDefaultNamespaceLister) Get(name string) (*v1alpha1.EbsEncryptionByDefault, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ebsencryptionbydefault"), name)
	}
	return obj.(*v1alpha1.EbsEncryptionByDefault), nil
}
