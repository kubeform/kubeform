/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CognitoIdentityProviderLister helps list CognitoIdentityProviders.
type CognitoIdentityProviderLister interface {
	// List lists all CognitoIdentityProviders in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityProvider, err error)
	// CognitoIdentityProviders returns an object that can list and get CognitoIdentityProviders.
	CognitoIdentityProviders(namespace string) CognitoIdentityProviderNamespaceLister
	CognitoIdentityProviderListerExpansion
}

// cognitoIdentityProviderLister implements the CognitoIdentityProviderLister interface.
type cognitoIdentityProviderLister struct {
	indexer cache.Indexer
}

// NewCognitoIdentityProviderLister returns a new CognitoIdentityProviderLister.
func NewCognitoIdentityProviderLister(indexer cache.Indexer) CognitoIdentityProviderLister {
	return &cognitoIdentityProviderLister{indexer: indexer}
}

// List lists all CognitoIdentityProviders in the indexer.
func (s *cognitoIdentityProviderLister) List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CognitoIdentityProvider))
	})
	return ret, err
}

// CognitoIdentityProviders returns an object that can list and get CognitoIdentityProviders.
func (s *cognitoIdentityProviderLister) CognitoIdentityProviders(namespace string) CognitoIdentityProviderNamespaceLister {
	return cognitoIdentityProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CognitoIdentityProviderNamespaceLister helps list and get CognitoIdentityProviders.
type CognitoIdentityProviderNamespaceLister interface {
	// List lists all CognitoIdentityProviders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityProvider, err error)
	// Get retrieves the CognitoIdentityProvider from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CognitoIdentityProvider, error)
	CognitoIdentityProviderNamespaceListerExpansion
}

// cognitoIdentityProviderNamespaceLister implements the CognitoIdentityProviderNamespaceLister
// interface.
type cognitoIdentityProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CognitoIdentityProviders in the indexer for a given namespace.
func (s cognitoIdentityProviderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CognitoIdentityProvider))
	})
	return ret, err
}

// Get retrieves the CognitoIdentityProvider from the indexer for a given namespace and name.
func (s cognitoIdentityProviderNamespaceLister) Get(name string) (*v1alpha1.CognitoIdentityProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cognitoidentityprovider"), name)
	}
	return obj.(*v1alpha1.CognitoIdentityProvider), nil
}
