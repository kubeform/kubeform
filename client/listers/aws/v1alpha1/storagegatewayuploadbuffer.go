/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoragegatewayUploadBufferLister helps list StoragegatewayUploadBuffers.
type StoragegatewayUploadBufferLister interface {
	// List lists all StoragegatewayUploadBuffers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayUploadBuffer, err error)
	// StoragegatewayUploadBuffers returns an object that can list and get StoragegatewayUploadBuffers.
	StoragegatewayUploadBuffers(namespace string) StoragegatewayUploadBufferNamespaceLister
	StoragegatewayUploadBufferListerExpansion
}

// storagegatewayUploadBufferLister implements the StoragegatewayUploadBufferLister interface.
type storagegatewayUploadBufferLister struct {
	indexer cache.Indexer
}

// NewStoragegatewayUploadBufferLister returns a new StoragegatewayUploadBufferLister.
func NewStoragegatewayUploadBufferLister(indexer cache.Indexer) StoragegatewayUploadBufferLister {
	return &storagegatewayUploadBufferLister{indexer: indexer}
}

// List lists all StoragegatewayUploadBuffers in the indexer.
func (s *storagegatewayUploadBufferLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayUploadBuffer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayUploadBuffer))
	})
	return ret, err
}

// StoragegatewayUploadBuffers returns an object that can list and get StoragegatewayUploadBuffers.
func (s *storagegatewayUploadBufferLister) StoragegatewayUploadBuffers(namespace string) StoragegatewayUploadBufferNamespaceLister {
	return storagegatewayUploadBufferNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoragegatewayUploadBufferNamespaceLister helps list and get StoragegatewayUploadBuffers.
type StoragegatewayUploadBufferNamespaceLister interface {
	// List lists all StoragegatewayUploadBuffers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayUploadBuffer, err error)
	// Get retrieves the StoragegatewayUploadBuffer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StoragegatewayUploadBuffer, error)
	StoragegatewayUploadBufferNamespaceListerExpansion
}

// storagegatewayUploadBufferNamespaceLister implements the StoragegatewayUploadBufferNamespaceLister
// interface.
type storagegatewayUploadBufferNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoragegatewayUploadBuffers in the indexer for a given namespace.
func (s storagegatewayUploadBufferNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayUploadBuffer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayUploadBuffer))
	})
	return ret, err
}

// Get retrieves the StoragegatewayUploadBuffer from the indexer for a given namespace and name.
func (s storagegatewayUploadBufferNamespaceLister) Get(name string) (*v1alpha1.StoragegatewayUploadBuffer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagegatewayuploadbuffer"), name)
	}
	return obj.(*v1alpha1.StoragegatewayUploadBuffer), nil
}
