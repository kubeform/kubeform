/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CodepipelineWebhookLister helps list CodepipelineWebhooks.
type CodepipelineWebhookLister interface {
	// List lists all CodepipelineWebhooks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CodepipelineWebhook, err error)
	// CodepipelineWebhooks returns an object that can list and get CodepipelineWebhooks.
	CodepipelineWebhooks(namespace string) CodepipelineWebhookNamespaceLister
	CodepipelineWebhookListerExpansion
}

// codepipelineWebhookLister implements the CodepipelineWebhookLister interface.
type codepipelineWebhookLister struct {
	indexer cache.Indexer
}

// NewCodepipelineWebhookLister returns a new CodepipelineWebhookLister.
func NewCodepipelineWebhookLister(indexer cache.Indexer) CodepipelineWebhookLister {
	return &codepipelineWebhookLister{indexer: indexer}
}

// List lists all CodepipelineWebhooks in the indexer.
func (s *codepipelineWebhookLister) List(selector labels.Selector) (ret []*v1alpha1.CodepipelineWebhook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CodepipelineWebhook))
	})
	return ret, err
}

// CodepipelineWebhooks returns an object that can list and get CodepipelineWebhooks.
func (s *codepipelineWebhookLister) CodepipelineWebhooks(namespace string) CodepipelineWebhookNamespaceLister {
	return codepipelineWebhookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CodepipelineWebhookNamespaceLister helps list and get CodepipelineWebhooks.
type CodepipelineWebhookNamespaceLister interface {
	// List lists all CodepipelineWebhooks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CodepipelineWebhook, err error)
	// Get retrieves the CodepipelineWebhook from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CodepipelineWebhook, error)
	CodepipelineWebhookNamespaceListerExpansion
}

// codepipelineWebhookNamespaceLister implements the CodepipelineWebhookNamespaceLister
// interface.
type codepipelineWebhookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CodepipelineWebhooks in the indexer for a given namespace.
func (s codepipelineWebhookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CodepipelineWebhook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CodepipelineWebhook))
	})
	return ret, err
}

// Get retrieves the CodepipelineWebhook from the indexer for a given namespace and name.
func (s codepipelineWebhookNamespaceLister) Get(name string) (*v1alpha1.CodepipelineWebhook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("codepipelinewebhook"), name)
	}
	return obj.(*v1alpha1.CodepipelineWebhook), nil
}
