/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudwatchEventRuleLister helps list CloudwatchEventRules.
type CloudwatchEventRuleLister interface {
	// List lists all CloudwatchEventRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CloudwatchEventRule, err error)
	// CloudwatchEventRules returns an object that can list and get CloudwatchEventRules.
	CloudwatchEventRules(namespace string) CloudwatchEventRuleNamespaceLister
	CloudwatchEventRuleListerExpansion
}

// cloudwatchEventRuleLister implements the CloudwatchEventRuleLister interface.
type cloudwatchEventRuleLister struct {
	indexer cache.Indexer
}

// NewCloudwatchEventRuleLister returns a new CloudwatchEventRuleLister.
func NewCloudwatchEventRuleLister(indexer cache.Indexer) CloudwatchEventRuleLister {
	return &cloudwatchEventRuleLister{indexer: indexer}
}

// List lists all CloudwatchEventRules in the indexer.
func (s *cloudwatchEventRuleLister) List(selector labels.Selector) (ret []*v1alpha1.CloudwatchEventRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudwatchEventRule))
	})
	return ret, err
}

// CloudwatchEventRules returns an object that can list and get CloudwatchEventRules.
func (s *cloudwatchEventRuleLister) CloudwatchEventRules(namespace string) CloudwatchEventRuleNamespaceLister {
	return cloudwatchEventRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudwatchEventRuleNamespaceLister helps list and get CloudwatchEventRules.
type CloudwatchEventRuleNamespaceLister interface {
	// List lists all CloudwatchEventRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CloudwatchEventRule, err error)
	// Get retrieves the CloudwatchEventRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CloudwatchEventRule, error)
	CloudwatchEventRuleNamespaceListerExpansion
}

// cloudwatchEventRuleNamespaceLister implements the CloudwatchEventRuleNamespaceLister
// interface.
type cloudwatchEventRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudwatchEventRules in the indexer for a given namespace.
func (s cloudwatchEventRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudwatchEventRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudwatchEventRule))
	})
	return ret, err
}

// Get retrieves the CloudwatchEventRule from the indexer for a given namespace and name.
func (s cloudwatchEventRuleNamespaceLister) Get(name string) (*v1alpha1.CloudwatchEventRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudwatcheventrule"), name)
	}
	return obj.(*v1alpha1.CloudwatchEventRule), nil
}
