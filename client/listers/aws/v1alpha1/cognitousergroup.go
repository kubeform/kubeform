/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// CognitoUserGroupLister helps list CognitoUserGroups.
type CognitoUserGroupLister interface {
	// List lists all CognitoUserGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CognitoUserGroup, err error)
	// CognitoUserGroups returns an object that can list and get CognitoUserGroups.
	CognitoUserGroups(namespace string) CognitoUserGroupNamespaceLister
	CognitoUserGroupListerExpansion
}

// cognitoUserGroupLister implements the CognitoUserGroupLister interface.
type cognitoUserGroupLister struct {
	indexer cache.Indexer
}

// NewCognitoUserGroupLister returns a new CognitoUserGroupLister.
func NewCognitoUserGroupLister(indexer cache.Indexer) CognitoUserGroupLister {
	return &cognitoUserGroupLister{indexer: indexer}
}

// List lists all CognitoUserGroups in the indexer.
func (s *cognitoUserGroupLister) List(selector labels.Selector) (ret []*v1alpha1.CognitoUserGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CognitoUserGroup))
	})
	return ret, err
}

// CognitoUserGroups returns an object that can list and get CognitoUserGroups.
func (s *cognitoUserGroupLister) CognitoUserGroups(namespace string) CognitoUserGroupNamespaceLister {
	return cognitoUserGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CognitoUserGroupNamespaceLister helps list and get CognitoUserGroups.
type CognitoUserGroupNamespaceLister interface {
	// List lists all CognitoUserGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CognitoUserGroup, err error)
	// Get retrieves the CognitoUserGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CognitoUserGroup, error)
	CognitoUserGroupNamespaceListerExpansion
}

// cognitoUserGroupNamespaceLister implements the CognitoUserGroupNamespaceLister
// interface.
type cognitoUserGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CognitoUserGroups in the indexer for a given namespace.
func (s cognitoUserGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CognitoUserGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CognitoUserGroup))
	})
	return ret, err
}

// Get retrieves the CognitoUserGroup from the indexer for a given namespace and name.
func (s cognitoUserGroupNamespaceLister) Get(name string) (*v1alpha1.CognitoUserGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cognitousergroup"), name)
	}
	return obj.(*v1alpha1.CognitoUserGroup), nil
}
