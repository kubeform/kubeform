/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// MediaStoreContainerPolicyLister helps list MediaStoreContainerPolicies.
type MediaStoreContainerPolicyLister interface {
	// List lists all MediaStoreContainerPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MediaStoreContainerPolicy, err error)
	// MediaStoreContainerPolicies returns an object that can list and get MediaStoreContainerPolicies.
	MediaStoreContainerPolicies(namespace string) MediaStoreContainerPolicyNamespaceLister
	MediaStoreContainerPolicyListerExpansion
}

// mediaStoreContainerPolicyLister implements the MediaStoreContainerPolicyLister interface.
type mediaStoreContainerPolicyLister struct {
	indexer cache.Indexer
}

// NewMediaStoreContainerPolicyLister returns a new MediaStoreContainerPolicyLister.
func NewMediaStoreContainerPolicyLister(indexer cache.Indexer) MediaStoreContainerPolicyLister {
	return &mediaStoreContainerPolicyLister{indexer: indexer}
}

// List lists all MediaStoreContainerPolicies in the indexer.
func (s *mediaStoreContainerPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.MediaStoreContainerPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MediaStoreContainerPolicy))
	})
	return ret, err
}

// MediaStoreContainerPolicies returns an object that can list and get MediaStoreContainerPolicies.
func (s *mediaStoreContainerPolicyLister) MediaStoreContainerPolicies(namespace string) MediaStoreContainerPolicyNamespaceLister {
	return mediaStoreContainerPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MediaStoreContainerPolicyNamespaceLister helps list and get MediaStoreContainerPolicies.
type MediaStoreContainerPolicyNamespaceLister interface {
	// List lists all MediaStoreContainerPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MediaStoreContainerPolicy, err error)
	// Get retrieves the MediaStoreContainerPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MediaStoreContainerPolicy, error)
	MediaStoreContainerPolicyNamespaceListerExpansion
}

// mediaStoreContainerPolicyNamespaceLister implements the MediaStoreContainerPolicyNamespaceLister
// interface.
type mediaStoreContainerPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MediaStoreContainerPolicies in the indexer for a given namespace.
func (s mediaStoreContainerPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MediaStoreContainerPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MediaStoreContainerPolicy))
	})
	return ret, err
}

// Get retrieves the MediaStoreContainerPolicy from the indexer for a given namespace and name.
func (s mediaStoreContainerPolicyNamespaceLister) Get(name string) (*v1alpha1.MediaStoreContainerPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mediastorecontainerpolicy"), name)
	}
	return obj.(*v1alpha1.MediaStoreContainerPolicy), nil
}
