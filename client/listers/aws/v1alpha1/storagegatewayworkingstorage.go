/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoragegatewayWorkingStorageLister helps list StoragegatewayWorkingStorages.
type StoragegatewayWorkingStorageLister interface {
	// List lists all StoragegatewayWorkingStorages in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayWorkingStorage, err error)
	// StoragegatewayWorkingStorages returns an object that can list and get StoragegatewayWorkingStorages.
	StoragegatewayWorkingStorages(namespace string) StoragegatewayWorkingStorageNamespaceLister
	StoragegatewayWorkingStorageListerExpansion
}

// storagegatewayWorkingStorageLister implements the StoragegatewayWorkingStorageLister interface.
type storagegatewayWorkingStorageLister struct {
	indexer cache.Indexer
}

// NewStoragegatewayWorkingStorageLister returns a new StoragegatewayWorkingStorageLister.
func NewStoragegatewayWorkingStorageLister(indexer cache.Indexer) StoragegatewayWorkingStorageLister {
	return &storagegatewayWorkingStorageLister{indexer: indexer}
}

// List lists all StoragegatewayWorkingStorages in the indexer.
func (s *storagegatewayWorkingStorageLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayWorkingStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayWorkingStorage))
	})
	return ret, err
}

// StoragegatewayWorkingStorages returns an object that can list and get StoragegatewayWorkingStorages.
func (s *storagegatewayWorkingStorageLister) StoragegatewayWorkingStorages(namespace string) StoragegatewayWorkingStorageNamespaceLister {
	return storagegatewayWorkingStorageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoragegatewayWorkingStorageNamespaceLister helps list and get StoragegatewayWorkingStorages.
type StoragegatewayWorkingStorageNamespaceLister interface {
	// List lists all StoragegatewayWorkingStorages in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayWorkingStorage, err error)
	// Get retrieves the StoragegatewayWorkingStorage from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StoragegatewayWorkingStorage, error)
	StoragegatewayWorkingStorageNamespaceListerExpansion
}

// storagegatewayWorkingStorageNamespaceLister implements the StoragegatewayWorkingStorageNamespaceLister
// interface.
type storagegatewayWorkingStorageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoragegatewayWorkingStorages in the indexer for a given namespace.
func (s storagegatewayWorkingStorageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayWorkingStorage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayWorkingStorage))
	})
	return ret, err
}

// Get retrieves the StoragegatewayWorkingStorage from the indexer for a given namespace and name.
func (s storagegatewayWorkingStorageNamespaceLister) Get(name string) (*v1alpha1.StoragegatewayWorkingStorage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagegatewayworkingstorage"), name)
	}
	return obj.(*v1alpha1.StoragegatewayWorkingStorage), nil
}
