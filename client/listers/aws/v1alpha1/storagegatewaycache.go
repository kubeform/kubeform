/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoragegatewayCacheLister helps list StoragegatewayCaches.
type StoragegatewayCacheLister interface {
	// List lists all StoragegatewayCaches in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayCache, err error)
	// StoragegatewayCaches returns an object that can list and get StoragegatewayCaches.
	StoragegatewayCaches(namespace string) StoragegatewayCacheNamespaceLister
	StoragegatewayCacheListerExpansion
}

// storagegatewayCacheLister implements the StoragegatewayCacheLister interface.
type storagegatewayCacheLister struct {
	indexer cache.Indexer
}

// NewStoragegatewayCacheLister returns a new StoragegatewayCacheLister.
func NewStoragegatewayCacheLister(indexer cache.Indexer) StoragegatewayCacheLister {
	return &storagegatewayCacheLister{indexer: indexer}
}

// List lists all StoragegatewayCaches in the indexer.
func (s *storagegatewayCacheLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayCache, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayCache))
	})
	return ret, err
}

// StoragegatewayCaches returns an object that can list and get StoragegatewayCaches.
func (s *storagegatewayCacheLister) StoragegatewayCaches(namespace string) StoragegatewayCacheNamespaceLister {
	return storagegatewayCacheNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoragegatewayCacheNamespaceLister helps list and get StoragegatewayCaches.
type StoragegatewayCacheNamespaceLister interface {
	// List lists all StoragegatewayCaches in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayCache, err error)
	// Get retrieves the StoragegatewayCache from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StoragegatewayCache, error)
	StoragegatewayCacheNamespaceListerExpansion
}

// storagegatewayCacheNamespaceLister implements the StoragegatewayCacheNamespaceLister
// interface.
type storagegatewayCacheNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoragegatewayCaches in the indexer for a given namespace.
func (s storagegatewayCacheNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayCache, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayCache))
	})
	return ret, err
}

// Get retrieves the StoragegatewayCache from the indexer for a given namespace and name.
func (s storagegatewayCacheNamespaceLister) Get(name string) (*v1alpha1.StoragegatewayCache, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagegatewaycache"), name)
	}
	return obj.(*v1alpha1.StoragegatewayCache), nil
}
