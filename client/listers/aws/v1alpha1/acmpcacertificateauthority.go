/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AcmpcaCertificateAuthorityLister helps list AcmpcaCertificateAuthorities.
type AcmpcaCertificateAuthorityLister interface {
	// List lists all AcmpcaCertificateAuthorities in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AcmpcaCertificateAuthority, err error)
	// AcmpcaCertificateAuthorities returns an object that can list and get AcmpcaCertificateAuthorities.
	AcmpcaCertificateAuthorities(namespace string) AcmpcaCertificateAuthorityNamespaceLister
	AcmpcaCertificateAuthorityListerExpansion
}

// acmpcaCertificateAuthorityLister implements the AcmpcaCertificateAuthorityLister interface.
type acmpcaCertificateAuthorityLister struct {
	indexer cache.Indexer
}

// NewAcmpcaCertificateAuthorityLister returns a new AcmpcaCertificateAuthorityLister.
func NewAcmpcaCertificateAuthorityLister(indexer cache.Indexer) AcmpcaCertificateAuthorityLister {
	return &acmpcaCertificateAuthorityLister{indexer: indexer}
}

// List lists all AcmpcaCertificateAuthorities in the indexer.
func (s *acmpcaCertificateAuthorityLister) List(selector labels.Selector) (ret []*v1alpha1.AcmpcaCertificateAuthority, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AcmpcaCertificateAuthority))
	})
	return ret, err
}

// AcmpcaCertificateAuthorities returns an object that can list and get AcmpcaCertificateAuthorities.
func (s *acmpcaCertificateAuthorityLister) AcmpcaCertificateAuthorities(namespace string) AcmpcaCertificateAuthorityNamespaceLister {
	return acmpcaCertificateAuthorityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AcmpcaCertificateAuthorityNamespaceLister helps list and get AcmpcaCertificateAuthorities.
type AcmpcaCertificateAuthorityNamespaceLister interface {
	// List lists all AcmpcaCertificateAuthorities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AcmpcaCertificateAuthority, err error)
	// Get retrieves the AcmpcaCertificateAuthority from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AcmpcaCertificateAuthority, error)
	AcmpcaCertificateAuthorityNamespaceListerExpansion
}

// acmpcaCertificateAuthorityNamespaceLister implements the AcmpcaCertificateAuthorityNamespaceLister
// interface.
type acmpcaCertificateAuthorityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AcmpcaCertificateAuthorities in the indexer for a given namespace.
func (s acmpcaCertificateAuthorityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AcmpcaCertificateAuthority, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AcmpcaCertificateAuthority))
	})
	return ret, err
}

// Get retrieves the AcmpcaCertificateAuthority from the indexer for a given namespace and name.
func (s acmpcaCertificateAuthorityNamespaceLister) Get(name string) (*v1alpha1.AcmpcaCertificateAuthority, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("acmpcacertificateauthority"), name)
	}
	return obj.(*v1alpha1.AcmpcaCertificateAuthority), nil
}
