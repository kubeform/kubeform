/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppmeshVirtualNodeLister helps list AppmeshVirtualNodes.
type AppmeshVirtualNodeLister interface {
	// List lists all AppmeshVirtualNodes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AppmeshVirtualNode, err error)
	// AppmeshVirtualNodes returns an object that can list and get AppmeshVirtualNodes.
	AppmeshVirtualNodes(namespace string) AppmeshVirtualNodeNamespaceLister
	AppmeshVirtualNodeListerExpansion
}

// appmeshVirtualNodeLister implements the AppmeshVirtualNodeLister interface.
type appmeshVirtualNodeLister struct {
	indexer cache.Indexer
}

// NewAppmeshVirtualNodeLister returns a new AppmeshVirtualNodeLister.
func NewAppmeshVirtualNodeLister(indexer cache.Indexer) AppmeshVirtualNodeLister {
	return &appmeshVirtualNodeLister{indexer: indexer}
}

// List lists all AppmeshVirtualNodes in the indexer.
func (s *appmeshVirtualNodeLister) List(selector labels.Selector) (ret []*v1alpha1.AppmeshVirtualNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppmeshVirtualNode))
	})
	return ret, err
}

// AppmeshVirtualNodes returns an object that can list and get AppmeshVirtualNodes.
func (s *appmeshVirtualNodeLister) AppmeshVirtualNodes(namespace string) AppmeshVirtualNodeNamespaceLister {
	return appmeshVirtualNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppmeshVirtualNodeNamespaceLister helps list and get AppmeshVirtualNodes.
type AppmeshVirtualNodeNamespaceLister interface {
	// List lists all AppmeshVirtualNodes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AppmeshVirtualNode, err error)
	// Get retrieves the AppmeshVirtualNode from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AppmeshVirtualNode, error)
	AppmeshVirtualNodeNamespaceListerExpansion
}

// appmeshVirtualNodeNamespaceLister implements the AppmeshVirtualNodeNamespaceLister
// interface.
type appmeshVirtualNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppmeshVirtualNodes in the indexer for a given namespace.
func (s appmeshVirtualNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppmeshVirtualNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppmeshVirtualNode))
	})
	return ret, err
}

// Get retrieves the AppmeshVirtualNode from the indexer for a given namespace and name.
func (s appmeshVirtualNodeNamespaceLister) Get(name string) (*v1alpha1.AppmeshVirtualNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appmeshvirtualnode"), name)
	}
	return obj.(*v1alpha1.AppmeshVirtualNode), nil
}
