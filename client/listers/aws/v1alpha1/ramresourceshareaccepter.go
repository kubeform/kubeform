/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RamResourceShareAccepterLister helps list RamResourceShareAccepters.
type RamResourceShareAccepterLister interface {
	// List lists all RamResourceShareAccepters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RamResourceShareAccepter, err error)
	// RamResourceShareAccepters returns an object that can list and get RamResourceShareAccepters.
	RamResourceShareAccepters(namespace string) RamResourceShareAccepterNamespaceLister
	RamResourceShareAccepterListerExpansion
}

// ramResourceShareAccepterLister implements the RamResourceShareAccepterLister interface.
type ramResourceShareAccepterLister struct {
	indexer cache.Indexer
}

// NewRamResourceShareAccepterLister returns a new RamResourceShareAccepterLister.
func NewRamResourceShareAccepterLister(indexer cache.Indexer) RamResourceShareAccepterLister {
	return &ramResourceShareAccepterLister{indexer: indexer}
}

// List lists all RamResourceShareAccepters in the indexer.
func (s *ramResourceShareAccepterLister) List(selector labels.Selector) (ret []*v1alpha1.RamResourceShareAccepter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RamResourceShareAccepter))
	})
	return ret, err
}

// RamResourceShareAccepters returns an object that can list and get RamResourceShareAccepters.
func (s *ramResourceShareAccepterLister) RamResourceShareAccepters(namespace string) RamResourceShareAccepterNamespaceLister {
	return ramResourceShareAccepterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RamResourceShareAccepterNamespaceLister helps list and get RamResourceShareAccepters.
type RamResourceShareAccepterNamespaceLister interface {
	// List lists all RamResourceShareAccepters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RamResourceShareAccepter, err error)
	// Get retrieves the RamResourceShareAccepter from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RamResourceShareAccepter, error)
	RamResourceShareAccepterNamespaceListerExpansion
}

// ramResourceShareAccepterNamespaceLister implements the RamResourceShareAccepterNamespaceLister
// interface.
type ramResourceShareAccepterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RamResourceShareAccepters in the indexer for a given namespace.
func (s ramResourceShareAccepterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RamResourceShareAccepter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RamResourceShareAccepter))
	})
	return ret, err
}

// Get retrieves the RamResourceShareAccepter from the indexer for a given namespace and name.
func (s ramResourceShareAccepterNamespaceLister) Get(name string) (*v1alpha1.RamResourceShareAccepter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ramresourceshareaccepter"), name)
	}
	return obj.(*v1alpha1.RamResourceShareAccepter), nil
}
