/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiGatewayIntegrationLister helps list ApiGatewayIntegrations.
type ApiGatewayIntegrationLister interface {
	// List lists all ApiGatewayIntegrations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayIntegration, err error)
	// ApiGatewayIntegrations returns an object that can list and get ApiGatewayIntegrations.
	ApiGatewayIntegrations(namespace string) ApiGatewayIntegrationNamespaceLister
	ApiGatewayIntegrationListerExpansion
}

// apiGatewayIntegrationLister implements the ApiGatewayIntegrationLister interface.
type apiGatewayIntegrationLister struct {
	indexer cache.Indexer
}

// NewApiGatewayIntegrationLister returns a new ApiGatewayIntegrationLister.
func NewApiGatewayIntegrationLister(indexer cache.Indexer) ApiGatewayIntegrationLister {
	return &apiGatewayIntegrationLister{indexer: indexer}
}

// List lists all ApiGatewayIntegrations in the indexer.
func (s *apiGatewayIntegrationLister) List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayIntegration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiGatewayIntegration))
	})
	return ret, err
}

// ApiGatewayIntegrations returns an object that can list and get ApiGatewayIntegrations.
func (s *apiGatewayIntegrationLister) ApiGatewayIntegrations(namespace string) ApiGatewayIntegrationNamespaceLister {
	return apiGatewayIntegrationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiGatewayIntegrationNamespaceLister helps list and get ApiGatewayIntegrations.
type ApiGatewayIntegrationNamespaceLister interface {
	// List lists all ApiGatewayIntegrations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayIntegration, err error)
	// Get retrieves the ApiGatewayIntegration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApiGatewayIntegration, error)
	ApiGatewayIntegrationNamespaceListerExpansion
}

// apiGatewayIntegrationNamespaceLister implements the ApiGatewayIntegrationNamespaceLister
// interface.
type apiGatewayIntegrationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiGatewayIntegrations in the indexer for a given namespace.
func (s apiGatewayIntegrationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayIntegration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiGatewayIntegration))
	})
	return ret, err
}

// Get retrieves the ApiGatewayIntegration from the indexer for a given namespace and name.
func (s apiGatewayIntegrationNamespaceLister) Get(name string) (*v1alpha1.ApiGatewayIntegration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apigatewayintegration"), name)
	}
	return obj.(*v1alpha1.ApiGatewayIntegration), nil
}
