/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SagemakerNotebookInstanceLister helps list SagemakerNotebookInstances.
type SagemakerNotebookInstanceLister interface {
	// List lists all SagemakerNotebookInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SagemakerNotebookInstance, err error)
	// SagemakerNotebookInstances returns an object that can list and get SagemakerNotebookInstances.
	SagemakerNotebookInstances(namespace string) SagemakerNotebookInstanceNamespaceLister
	SagemakerNotebookInstanceListerExpansion
}

// sagemakerNotebookInstanceLister implements the SagemakerNotebookInstanceLister interface.
type sagemakerNotebookInstanceLister struct {
	indexer cache.Indexer
}

// NewSagemakerNotebookInstanceLister returns a new SagemakerNotebookInstanceLister.
func NewSagemakerNotebookInstanceLister(indexer cache.Indexer) SagemakerNotebookInstanceLister {
	return &sagemakerNotebookInstanceLister{indexer: indexer}
}

// List lists all SagemakerNotebookInstances in the indexer.
func (s *sagemakerNotebookInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.SagemakerNotebookInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SagemakerNotebookInstance))
	})
	return ret, err
}

// SagemakerNotebookInstances returns an object that can list and get SagemakerNotebookInstances.
func (s *sagemakerNotebookInstanceLister) SagemakerNotebookInstances(namespace string) SagemakerNotebookInstanceNamespaceLister {
	return sagemakerNotebookInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SagemakerNotebookInstanceNamespaceLister helps list and get SagemakerNotebookInstances.
type SagemakerNotebookInstanceNamespaceLister interface {
	// List lists all SagemakerNotebookInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SagemakerNotebookInstance, err error)
	// Get retrieves the SagemakerNotebookInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SagemakerNotebookInstance, error)
	SagemakerNotebookInstanceNamespaceListerExpansion
}

// sagemakerNotebookInstanceNamespaceLister implements the SagemakerNotebookInstanceNamespaceLister
// interface.
type sagemakerNotebookInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SagemakerNotebookInstances in the indexer for a given namespace.
func (s sagemakerNotebookInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SagemakerNotebookInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SagemakerNotebookInstance))
	})
	return ret, err
}

// Get retrieves the SagemakerNotebookInstance from the indexer for a given namespace and name.
func (s sagemakerNotebookInstanceNamespaceLister) Get(name string) (*v1alpha1.SagemakerNotebookInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sagemakernotebookinstance"), name)
	}
	return obj.(*v1alpha1.SagemakerNotebookInstance), nil
}
