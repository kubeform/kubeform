/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// RdsGlobalClusterLister helps list RdsGlobalClusters.
type RdsGlobalClusterLister interface {
	// List lists all RdsGlobalClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RdsGlobalCluster, err error)
	// RdsGlobalClusters returns an object that can list and get RdsGlobalClusters.
	RdsGlobalClusters(namespace string) RdsGlobalClusterNamespaceLister
	RdsGlobalClusterListerExpansion
}

// rdsGlobalClusterLister implements the RdsGlobalClusterLister interface.
type rdsGlobalClusterLister struct {
	indexer cache.Indexer
}

// NewRdsGlobalClusterLister returns a new RdsGlobalClusterLister.
func NewRdsGlobalClusterLister(indexer cache.Indexer) RdsGlobalClusterLister {
	return &rdsGlobalClusterLister{indexer: indexer}
}

// List lists all RdsGlobalClusters in the indexer.
func (s *rdsGlobalClusterLister) List(selector labels.Selector) (ret []*v1alpha1.RdsGlobalCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RdsGlobalCluster))
	})
	return ret, err
}

// RdsGlobalClusters returns an object that can list and get RdsGlobalClusters.
func (s *rdsGlobalClusterLister) RdsGlobalClusters(namespace string) RdsGlobalClusterNamespaceLister {
	return rdsGlobalClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RdsGlobalClusterNamespaceLister helps list and get RdsGlobalClusters.
type RdsGlobalClusterNamespaceLister interface {
	// List lists all RdsGlobalClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RdsGlobalCluster, err error)
	// Get retrieves the RdsGlobalCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RdsGlobalCluster, error)
	RdsGlobalClusterNamespaceListerExpansion
}

// rdsGlobalClusterNamespaceLister implements the RdsGlobalClusterNamespaceLister
// interface.
type rdsGlobalClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RdsGlobalClusters in the indexer for a given namespace.
func (s rdsGlobalClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RdsGlobalCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RdsGlobalCluster))
	})
	return ret, err
}

// Get retrieves the RdsGlobalCluster from the indexer for a given namespace and name.
func (s rdsGlobalClusterNamespaceLister) Get(name string) (*v1alpha1.RdsGlobalCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rdsglobalcluster"), name)
	}
	return obj.(*v1alpha1.RdsGlobalCluster), nil
}
