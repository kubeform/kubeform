/*
Copyright 2019 The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// AwsDatasyncLocationS3Lister helps list AwsDatasyncLocationS3s.
type AwsDatasyncLocationS3Lister interface {
	// List lists all AwsDatasyncLocationS3s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AwsDatasyncLocationS3, err error)
	// Get retrieves the AwsDatasyncLocationS3 from the index for a given name.
	Get(name string) (*v1alpha1.AwsDatasyncLocationS3, error)
	AwsDatasyncLocationS3ListerExpansion
}

// awsDatasyncLocationS3Lister implements the AwsDatasyncLocationS3Lister interface.
type awsDatasyncLocationS3Lister struct {
	indexer cache.Indexer
}

// NewAwsDatasyncLocationS3Lister returns a new AwsDatasyncLocationS3Lister.
func NewAwsDatasyncLocationS3Lister(indexer cache.Indexer) AwsDatasyncLocationS3Lister {
	return &awsDatasyncLocationS3Lister{indexer: indexer}
}

// List lists all AwsDatasyncLocationS3s in the indexer.
func (s *awsDatasyncLocationS3Lister) List(selector labels.Selector) (ret []*v1alpha1.AwsDatasyncLocationS3, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AwsDatasyncLocationS3))
	})
	return ret, err
}

// Get retrieves the AwsDatasyncLocationS3 from the index for a given name.
func (s *awsDatasyncLocationS3Lister) Get(name string) (*v1alpha1.AwsDatasyncLocationS3, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awsdatasynclocations3"), name)
	}
	return obj.(*v1alpha1.AwsDatasyncLocationS3), nil
}
