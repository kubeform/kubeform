/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KinesisAnalyticsApplicationLister helps list KinesisAnalyticsApplications.
type KinesisAnalyticsApplicationLister interface {
	// List lists all KinesisAnalyticsApplications in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KinesisAnalyticsApplication, err error)
	// KinesisAnalyticsApplications returns an object that can list and get KinesisAnalyticsApplications.
	KinesisAnalyticsApplications(namespace string) KinesisAnalyticsApplicationNamespaceLister
	KinesisAnalyticsApplicationListerExpansion
}

// kinesisAnalyticsApplicationLister implements the KinesisAnalyticsApplicationLister interface.
type kinesisAnalyticsApplicationLister struct {
	indexer cache.Indexer
}

// NewKinesisAnalyticsApplicationLister returns a new KinesisAnalyticsApplicationLister.
func NewKinesisAnalyticsApplicationLister(indexer cache.Indexer) KinesisAnalyticsApplicationLister {
	return &kinesisAnalyticsApplicationLister{indexer: indexer}
}

// List lists all KinesisAnalyticsApplications in the indexer.
func (s *kinesisAnalyticsApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.KinesisAnalyticsApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KinesisAnalyticsApplication))
	})
	return ret, err
}

// KinesisAnalyticsApplications returns an object that can list and get KinesisAnalyticsApplications.
func (s *kinesisAnalyticsApplicationLister) KinesisAnalyticsApplications(namespace string) KinesisAnalyticsApplicationNamespaceLister {
	return kinesisAnalyticsApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KinesisAnalyticsApplicationNamespaceLister helps list and get KinesisAnalyticsApplications.
type KinesisAnalyticsApplicationNamespaceLister interface {
	// List lists all KinesisAnalyticsApplications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KinesisAnalyticsApplication, err error)
	// Get retrieves the KinesisAnalyticsApplication from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KinesisAnalyticsApplication, error)
	KinesisAnalyticsApplicationNamespaceListerExpansion
}

// kinesisAnalyticsApplicationNamespaceLister implements the KinesisAnalyticsApplicationNamespaceLister
// interface.
type kinesisAnalyticsApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KinesisAnalyticsApplications in the indexer for a given namespace.
func (s kinesisAnalyticsApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KinesisAnalyticsApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KinesisAnalyticsApplication))
	})
	return ret, err
}

// Get retrieves the KinesisAnalyticsApplication from the indexer for a given namespace and name.
func (s kinesisAnalyticsApplicationNamespaceLister) Get(name string) (*v1alpha1.KinesisAnalyticsApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kinesisanalyticsapplication"), name)
	}
	return obj.(*v1alpha1.KinesisAnalyticsApplication), nil
}
