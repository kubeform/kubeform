/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DirectoryServiceLogSubscriptionLister helps list DirectoryServiceLogSubscriptions.
type DirectoryServiceLogSubscriptionLister interface {
	// List lists all DirectoryServiceLogSubscriptions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DirectoryServiceLogSubscription, err error)
	// DirectoryServiceLogSubscriptions returns an object that can list and get DirectoryServiceLogSubscriptions.
	DirectoryServiceLogSubscriptions(namespace string) DirectoryServiceLogSubscriptionNamespaceLister
	DirectoryServiceLogSubscriptionListerExpansion
}

// directoryServiceLogSubscriptionLister implements the DirectoryServiceLogSubscriptionLister interface.
type directoryServiceLogSubscriptionLister struct {
	indexer cache.Indexer
}

// NewDirectoryServiceLogSubscriptionLister returns a new DirectoryServiceLogSubscriptionLister.
func NewDirectoryServiceLogSubscriptionLister(indexer cache.Indexer) DirectoryServiceLogSubscriptionLister {
	return &directoryServiceLogSubscriptionLister{indexer: indexer}
}

// List lists all DirectoryServiceLogSubscriptions in the indexer.
func (s *directoryServiceLogSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.DirectoryServiceLogSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DirectoryServiceLogSubscription))
	})
	return ret, err
}

// DirectoryServiceLogSubscriptions returns an object that can list and get DirectoryServiceLogSubscriptions.
func (s *directoryServiceLogSubscriptionLister) DirectoryServiceLogSubscriptions(namespace string) DirectoryServiceLogSubscriptionNamespaceLister {
	return directoryServiceLogSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DirectoryServiceLogSubscriptionNamespaceLister helps list and get DirectoryServiceLogSubscriptions.
type DirectoryServiceLogSubscriptionNamespaceLister interface {
	// List lists all DirectoryServiceLogSubscriptions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DirectoryServiceLogSubscription, err error)
	// Get retrieves the DirectoryServiceLogSubscription from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DirectoryServiceLogSubscription, error)
	DirectoryServiceLogSubscriptionNamespaceListerExpansion
}

// directoryServiceLogSubscriptionNamespaceLister implements the DirectoryServiceLogSubscriptionNamespaceLister
// interface.
type directoryServiceLogSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DirectoryServiceLogSubscriptions in the indexer for a given namespace.
func (s directoryServiceLogSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DirectoryServiceLogSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DirectoryServiceLogSubscription))
	})
	return ret, err
}

// Get retrieves the DirectoryServiceLogSubscription from the indexer for a given namespace and name.
func (s directoryServiceLogSubscriptionNamespaceLister) Get(name string) (*v1alpha1.DirectoryServiceLogSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("directoryservicelogsubscription"), name)
	}
	return obj.(*v1alpha1.DirectoryServiceLogSubscription), nil
}
