/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticBeanstalkApplicationVersionLister helps list ElasticBeanstalkApplicationVersions.
type ElasticBeanstalkApplicationVersionLister interface {
	// List lists all ElasticBeanstalkApplicationVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticBeanstalkApplicationVersion, err error)
	// ElasticBeanstalkApplicationVersions returns an object that can list and get ElasticBeanstalkApplicationVersions.
	ElasticBeanstalkApplicationVersions(namespace string) ElasticBeanstalkApplicationVersionNamespaceLister
	ElasticBeanstalkApplicationVersionListerExpansion
}

// elasticBeanstalkApplicationVersionLister implements the ElasticBeanstalkApplicationVersionLister interface.
type elasticBeanstalkApplicationVersionLister struct {
	indexer cache.Indexer
}

// NewElasticBeanstalkApplicationVersionLister returns a new ElasticBeanstalkApplicationVersionLister.
func NewElasticBeanstalkApplicationVersionLister(indexer cache.Indexer) ElasticBeanstalkApplicationVersionLister {
	return &elasticBeanstalkApplicationVersionLister{indexer: indexer}
}

// List lists all ElasticBeanstalkApplicationVersions in the indexer.
func (s *elasticBeanstalkApplicationVersionLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticBeanstalkApplicationVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticBeanstalkApplicationVersion))
	})
	return ret, err
}

// ElasticBeanstalkApplicationVersions returns an object that can list and get ElasticBeanstalkApplicationVersions.
func (s *elasticBeanstalkApplicationVersionLister) ElasticBeanstalkApplicationVersions(namespace string) ElasticBeanstalkApplicationVersionNamespaceLister {
	return elasticBeanstalkApplicationVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticBeanstalkApplicationVersionNamespaceLister helps list and get ElasticBeanstalkApplicationVersions.
type ElasticBeanstalkApplicationVersionNamespaceLister interface {
	// List lists all ElasticBeanstalkApplicationVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticBeanstalkApplicationVersion, err error)
	// Get retrieves the ElasticBeanstalkApplicationVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ElasticBeanstalkApplicationVersion, error)
	ElasticBeanstalkApplicationVersionNamespaceListerExpansion
}

// elasticBeanstalkApplicationVersionNamespaceLister implements the ElasticBeanstalkApplicationVersionNamespaceLister
// interface.
type elasticBeanstalkApplicationVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticBeanstalkApplicationVersions in the indexer for a given namespace.
func (s elasticBeanstalkApplicationVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticBeanstalkApplicationVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticBeanstalkApplicationVersion))
	})
	return ret, err
}

// Get retrieves the ElasticBeanstalkApplicationVersion from the indexer for a given namespace and name.
func (s elasticBeanstalkApplicationVersionNamespaceLister) Get(name string) (*v1alpha1.ElasticBeanstalkApplicationVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticbeanstalkapplicationversion"), name)
	}
	return obj.(*v1alpha1.ElasticBeanstalkApplicationVersion), nil
}
