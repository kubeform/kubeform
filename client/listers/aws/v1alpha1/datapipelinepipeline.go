/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatapipelinePipelineLister helps list DatapipelinePipelines.
type DatapipelinePipelineLister interface {
	// List lists all DatapipelinePipelines in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatapipelinePipeline, err error)
	// DatapipelinePipelines returns an object that can list and get DatapipelinePipelines.
	DatapipelinePipelines(namespace string) DatapipelinePipelineNamespaceLister
	DatapipelinePipelineListerExpansion
}

// datapipelinePipelineLister implements the DatapipelinePipelineLister interface.
type datapipelinePipelineLister struct {
	indexer cache.Indexer
}

// NewDatapipelinePipelineLister returns a new DatapipelinePipelineLister.
func NewDatapipelinePipelineLister(indexer cache.Indexer) DatapipelinePipelineLister {
	return &datapipelinePipelineLister{indexer: indexer}
}

// List lists all DatapipelinePipelines in the indexer.
func (s *datapipelinePipelineLister) List(selector labels.Selector) (ret []*v1alpha1.DatapipelinePipeline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatapipelinePipeline))
	})
	return ret, err
}

// DatapipelinePipelines returns an object that can list and get DatapipelinePipelines.
func (s *datapipelinePipelineLister) DatapipelinePipelines(namespace string) DatapipelinePipelineNamespaceLister {
	return datapipelinePipelineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatapipelinePipelineNamespaceLister helps list and get DatapipelinePipelines.
type DatapipelinePipelineNamespaceLister interface {
	// List lists all DatapipelinePipelines in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatapipelinePipeline, err error)
	// Get retrieves the DatapipelinePipeline from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatapipelinePipeline, error)
	DatapipelinePipelineNamespaceListerExpansion
}

// datapipelinePipelineNamespaceLister implements the DatapipelinePipelineNamespaceLister
// interface.
type datapipelinePipelineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatapipelinePipelines in the indexer for a given namespace.
func (s datapipelinePipelineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatapipelinePipeline, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatapipelinePipeline))
	})
	return ret, err
}

// Get retrieves the DatapipelinePipeline from the indexer for a given namespace and name.
func (s datapipelinePipelineNamespaceLister) Get(name string) (*v1alpha1.DatapipelinePipeline, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datapipelinepipeline"), name)
	}
	return obj.(*v1alpha1.DatapipelinePipeline), nil
}
