/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LightsailStaticIPAttachmentLister helps list LightsailStaticIPAttachments.
type LightsailStaticIPAttachmentLister interface {
	// List lists all LightsailStaticIPAttachments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIPAttachment, err error)
	// LightsailStaticIPAttachments returns an object that can list and get LightsailStaticIPAttachments.
	LightsailStaticIPAttachments(namespace string) LightsailStaticIPAttachmentNamespaceLister
	LightsailStaticIPAttachmentListerExpansion
}

// lightsailStaticIPAttachmentLister implements the LightsailStaticIPAttachmentLister interface.
type lightsailStaticIPAttachmentLister struct {
	indexer cache.Indexer
}

// NewLightsailStaticIPAttachmentLister returns a new LightsailStaticIPAttachmentLister.
func NewLightsailStaticIPAttachmentLister(indexer cache.Indexer) LightsailStaticIPAttachmentLister {
	return &lightsailStaticIPAttachmentLister{indexer: indexer}
}

// List lists all LightsailStaticIPAttachments in the indexer.
func (s *lightsailStaticIPAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIPAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LightsailStaticIPAttachment))
	})
	return ret, err
}

// LightsailStaticIPAttachments returns an object that can list and get LightsailStaticIPAttachments.
func (s *lightsailStaticIPAttachmentLister) LightsailStaticIPAttachments(namespace string) LightsailStaticIPAttachmentNamespaceLister {
	return lightsailStaticIPAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LightsailStaticIPAttachmentNamespaceLister helps list and get LightsailStaticIPAttachments.
type LightsailStaticIPAttachmentNamespaceLister interface {
	// List lists all LightsailStaticIPAttachments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIPAttachment, err error)
	// Get retrieves the LightsailStaticIPAttachment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LightsailStaticIPAttachment, error)
	LightsailStaticIPAttachmentNamespaceListerExpansion
}

// lightsailStaticIPAttachmentNamespaceLister implements the LightsailStaticIPAttachmentNamespaceLister
// interface.
type lightsailStaticIPAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LightsailStaticIPAttachments in the indexer for a given namespace.
func (s lightsailStaticIPAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIPAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LightsailStaticIPAttachment))
	})
	return ret, err
}

// Get retrieves the LightsailStaticIPAttachment from the indexer for a given namespace and name.
func (s lightsailStaticIPAttachmentNamespaceLister) Get(name string) (*v1alpha1.LightsailStaticIPAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lightsailstaticipattachment"), name)
	}
	return obj.(*v1alpha1.LightsailStaticIPAttachment), nil
}
