/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlacierVaultLockLister helps list GlacierVaultLocks.
type GlacierVaultLockLister interface {
	// List lists all GlacierVaultLocks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GlacierVaultLock, err error)
	// GlacierVaultLocks returns an object that can list and get GlacierVaultLocks.
	GlacierVaultLocks(namespace string) GlacierVaultLockNamespaceLister
	GlacierVaultLockListerExpansion
}

// glacierVaultLockLister implements the GlacierVaultLockLister interface.
type glacierVaultLockLister struct {
	indexer cache.Indexer
}

// NewGlacierVaultLockLister returns a new GlacierVaultLockLister.
func NewGlacierVaultLockLister(indexer cache.Indexer) GlacierVaultLockLister {
	return &glacierVaultLockLister{indexer: indexer}
}

// List lists all GlacierVaultLocks in the indexer.
func (s *glacierVaultLockLister) List(selector labels.Selector) (ret []*v1alpha1.GlacierVaultLock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlacierVaultLock))
	})
	return ret, err
}

// GlacierVaultLocks returns an object that can list and get GlacierVaultLocks.
func (s *glacierVaultLockLister) GlacierVaultLocks(namespace string) GlacierVaultLockNamespaceLister {
	return glacierVaultLockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlacierVaultLockNamespaceLister helps list and get GlacierVaultLocks.
type GlacierVaultLockNamespaceLister interface {
	// List lists all GlacierVaultLocks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GlacierVaultLock, err error)
	// Get retrieves the GlacierVaultLock from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GlacierVaultLock, error)
	GlacierVaultLockNamespaceListerExpansion
}

// glacierVaultLockNamespaceLister implements the GlacierVaultLockNamespaceLister
// interface.
type glacierVaultLockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlacierVaultLocks in the indexer for a given namespace.
func (s glacierVaultLockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlacierVaultLock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlacierVaultLock))
	})
	return ret, err
}

// Get retrieves the GlacierVaultLock from the indexer for a given namespace and name.
func (s glacierVaultLockNamespaceLister) Get(name string) (*v1alpha1.GlacierVaultLock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("glaciervaultlock"), name)
	}
	return obj.(*v1alpha1.GlacierVaultLock), nil
}
