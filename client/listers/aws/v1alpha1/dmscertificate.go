/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DmsCertificateLister helps list DmsCertificates.
type DmsCertificateLister interface {
	// List lists all DmsCertificates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DmsCertificate, err error)
	// DmsCertificates returns an object that can list and get DmsCertificates.
	DmsCertificates(namespace string) DmsCertificateNamespaceLister
	DmsCertificateListerExpansion
}

// dmsCertificateLister implements the DmsCertificateLister interface.
type dmsCertificateLister struct {
	indexer cache.Indexer
}

// NewDmsCertificateLister returns a new DmsCertificateLister.
func NewDmsCertificateLister(indexer cache.Indexer) DmsCertificateLister {
	return &dmsCertificateLister{indexer: indexer}
}

// List lists all DmsCertificates in the indexer.
func (s *dmsCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.DmsCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DmsCertificate))
	})
	return ret, err
}

// DmsCertificates returns an object that can list and get DmsCertificates.
func (s *dmsCertificateLister) DmsCertificates(namespace string) DmsCertificateNamespaceLister {
	return dmsCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DmsCertificateNamespaceLister helps list and get DmsCertificates.
type DmsCertificateNamespaceLister interface {
	// List lists all DmsCertificates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DmsCertificate, err error)
	// Get retrieves the DmsCertificate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DmsCertificate, error)
	DmsCertificateNamespaceListerExpansion
}

// dmsCertificateNamespaceLister implements the DmsCertificateNamespaceLister
// interface.
type dmsCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DmsCertificates in the indexer for a given namespace.
func (s dmsCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DmsCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DmsCertificate))
	})
	return ret, err
}

// Get retrieves the DmsCertificate from the indexer for a given namespace and name.
func (s dmsCertificateNamespaceLister) Get(name string) (*v1alpha1.DmsCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dmscertificate"), name)
	}
	return obj.(*v1alpha1.DmsCertificate), nil
}
