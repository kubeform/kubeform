/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnsTopicSubscriptionLister helps list SnsTopicSubscriptions.
type SnsTopicSubscriptionLister interface {
	// List lists all SnsTopicSubscriptions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SnsTopicSubscription, err error)
	// SnsTopicSubscriptions returns an object that can list and get SnsTopicSubscriptions.
	SnsTopicSubscriptions(namespace string) SnsTopicSubscriptionNamespaceLister
	SnsTopicSubscriptionListerExpansion
}

// snsTopicSubscriptionLister implements the SnsTopicSubscriptionLister interface.
type snsTopicSubscriptionLister struct {
	indexer cache.Indexer
}

// NewSnsTopicSubscriptionLister returns a new SnsTopicSubscriptionLister.
func NewSnsTopicSubscriptionLister(indexer cache.Indexer) SnsTopicSubscriptionLister {
	return &snsTopicSubscriptionLister{indexer: indexer}
}

// List lists all SnsTopicSubscriptions in the indexer.
func (s *snsTopicSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.SnsTopicSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnsTopicSubscription))
	})
	return ret, err
}

// SnsTopicSubscriptions returns an object that can list and get SnsTopicSubscriptions.
func (s *snsTopicSubscriptionLister) SnsTopicSubscriptions(namespace string) SnsTopicSubscriptionNamespaceLister {
	return snsTopicSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnsTopicSubscriptionNamespaceLister helps list and get SnsTopicSubscriptions.
type SnsTopicSubscriptionNamespaceLister interface {
	// List lists all SnsTopicSubscriptions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SnsTopicSubscription, err error)
	// Get retrieves the SnsTopicSubscription from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SnsTopicSubscription, error)
	SnsTopicSubscriptionNamespaceListerExpansion
}

// snsTopicSubscriptionNamespaceLister implements the SnsTopicSubscriptionNamespaceLister
// interface.
type snsTopicSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnsTopicSubscriptions in the indexer for a given namespace.
func (s snsTopicSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SnsTopicSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnsTopicSubscription))
	})
	return ret, err
}

// Get retrieves the SnsTopicSubscription from the indexer for a given namespace and name.
func (s snsTopicSubscriptionNamespaceLister) Get(name string) (*v1alpha1.SnsTopicSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("snstopicsubscription"), name)
	}
	return obj.(*v1alpha1.SnsTopicSubscription), nil
}
