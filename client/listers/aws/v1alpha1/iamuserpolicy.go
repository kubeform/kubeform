/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IamUserPolicyLister helps list IamUserPolicies.
type IamUserPolicyLister interface {
	// List lists all IamUserPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IamUserPolicy, err error)
	// IamUserPolicies returns an object that can list and get IamUserPolicies.
	IamUserPolicies(namespace string) IamUserPolicyNamespaceLister
	IamUserPolicyListerExpansion
}

// iamUserPolicyLister implements the IamUserPolicyLister interface.
type iamUserPolicyLister struct {
	indexer cache.Indexer
}

// NewIamUserPolicyLister returns a new IamUserPolicyLister.
func NewIamUserPolicyLister(indexer cache.Indexer) IamUserPolicyLister {
	return &iamUserPolicyLister{indexer: indexer}
}

// List lists all IamUserPolicies in the indexer.
func (s *iamUserPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.IamUserPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamUserPolicy))
	})
	return ret, err
}

// IamUserPolicies returns an object that can list and get IamUserPolicies.
func (s *iamUserPolicyLister) IamUserPolicies(namespace string) IamUserPolicyNamespaceLister {
	return iamUserPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IamUserPolicyNamespaceLister helps list and get IamUserPolicies.
type IamUserPolicyNamespaceLister interface {
	// List lists all IamUserPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IamUserPolicy, err error)
	// Get retrieves the IamUserPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IamUserPolicy, error)
	IamUserPolicyNamespaceListerExpansion
}

// iamUserPolicyNamespaceLister implements the IamUserPolicyNamespaceLister
// interface.
type iamUserPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IamUserPolicies in the indexer for a given namespace.
func (s iamUserPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IamUserPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamUserPolicy))
	})
	return ret, err
}

// Get retrieves the IamUserPolicy from the indexer for a given namespace and name.
func (s iamUserPolicyNamespaceLister) Get(name string) (*v1alpha1.IamUserPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iamuserpolicy"), name)
	}
	return obj.(*v1alpha1.IamUserPolicy), nil
}
