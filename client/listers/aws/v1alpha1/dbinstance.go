/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DbInstanceLister helps list DbInstances.
type DbInstanceLister interface {
	// List lists all DbInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DbInstance, err error)
	// DbInstances returns an object that can list and get DbInstances.
	DbInstances(namespace string) DbInstanceNamespaceLister
	DbInstanceListerExpansion
}

// dbInstanceLister implements the DbInstanceLister interface.
type dbInstanceLister struct {
	indexer cache.Indexer
}

// NewDbInstanceLister returns a new DbInstanceLister.
func NewDbInstanceLister(indexer cache.Indexer) DbInstanceLister {
	return &dbInstanceLister{indexer: indexer}
}

// List lists all DbInstances in the indexer.
func (s *dbInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.DbInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DbInstance))
	})
	return ret, err
}

// DbInstances returns an object that can list and get DbInstances.
func (s *dbInstanceLister) DbInstances(namespace string) DbInstanceNamespaceLister {
	return dbInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DbInstanceNamespaceLister helps list and get DbInstances.
type DbInstanceNamespaceLister interface {
	// List lists all DbInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DbInstance, err error)
	// Get retrieves the DbInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DbInstance, error)
	DbInstanceNamespaceListerExpansion
}

// dbInstanceNamespaceLister implements the DbInstanceNamespaceLister
// interface.
type dbInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DbInstances in the indexer for a given namespace.
func (s dbInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DbInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DbInstance))
	})
	return ret, err
}

// Get retrieves the DbInstance from the indexer for a given namespace and name.
func (s dbInstanceNamespaceLister) Get(name string) (*v1alpha1.DbInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dbinstance"), name)
	}
	return obj.(*v1alpha1.DbInstance), nil
}
