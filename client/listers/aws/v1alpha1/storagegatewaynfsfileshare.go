/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoragegatewayNfsFileShareLister helps list StoragegatewayNfsFileShares.
type StoragegatewayNfsFileShareLister interface {
	// List lists all StoragegatewayNfsFileShares in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayNfsFileShare, err error)
	// StoragegatewayNfsFileShares returns an object that can list and get StoragegatewayNfsFileShares.
	StoragegatewayNfsFileShares(namespace string) StoragegatewayNfsFileShareNamespaceLister
	StoragegatewayNfsFileShareListerExpansion
}

// storagegatewayNfsFileShareLister implements the StoragegatewayNfsFileShareLister interface.
type storagegatewayNfsFileShareLister struct {
	indexer cache.Indexer
}

// NewStoragegatewayNfsFileShareLister returns a new StoragegatewayNfsFileShareLister.
func NewStoragegatewayNfsFileShareLister(indexer cache.Indexer) StoragegatewayNfsFileShareLister {
	return &storagegatewayNfsFileShareLister{indexer: indexer}
}

// List lists all StoragegatewayNfsFileShares in the indexer.
func (s *storagegatewayNfsFileShareLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayNfsFileShare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayNfsFileShare))
	})
	return ret, err
}

// StoragegatewayNfsFileShares returns an object that can list and get StoragegatewayNfsFileShares.
func (s *storagegatewayNfsFileShareLister) StoragegatewayNfsFileShares(namespace string) StoragegatewayNfsFileShareNamespaceLister {
	return storagegatewayNfsFileShareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoragegatewayNfsFileShareNamespaceLister helps list and get StoragegatewayNfsFileShares.
type StoragegatewayNfsFileShareNamespaceLister interface {
	// List lists all StoragegatewayNfsFileShares in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayNfsFileShare, err error)
	// Get retrieves the StoragegatewayNfsFileShare from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StoragegatewayNfsFileShare, error)
	StoragegatewayNfsFileShareNamespaceListerExpansion
}

// storagegatewayNfsFileShareNamespaceLister implements the StoragegatewayNfsFileShareNamespaceLister
// interface.
type storagegatewayNfsFileShareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoragegatewayNfsFileShares in the indexer for a given namespace.
func (s storagegatewayNfsFileShareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StoragegatewayNfsFileShare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoragegatewayNfsFileShare))
	})
	return ret, err
}

// Get retrieves the StoragegatewayNfsFileShare from the indexer for a given namespace and name.
func (s storagegatewayNfsFileShareNamespaceLister) Get(name string) (*v1alpha1.StoragegatewayNfsFileShare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagegatewaynfsfileshare"), name)
	}
	return obj.(*v1alpha1.StoragegatewayNfsFileShare), nil
}
