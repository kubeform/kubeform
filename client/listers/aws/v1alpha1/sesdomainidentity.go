/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// SesDomainIdentityLister helps list SesDomainIdentities.
type SesDomainIdentityLister interface {
	// List lists all SesDomainIdentities in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SesDomainIdentity, err error)
	// SesDomainIdentities returns an object that can list and get SesDomainIdentities.
	SesDomainIdentities(namespace string) SesDomainIdentityNamespaceLister
	SesDomainIdentityListerExpansion
}

// sesDomainIdentityLister implements the SesDomainIdentityLister interface.
type sesDomainIdentityLister struct {
	indexer cache.Indexer
}

// NewSesDomainIdentityLister returns a new SesDomainIdentityLister.
func NewSesDomainIdentityLister(indexer cache.Indexer) SesDomainIdentityLister {
	return &sesDomainIdentityLister{indexer: indexer}
}

// List lists all SesDomainIdentities in the indexer.
func (s *sesDomainIdentityLister) List(selector labels.Selector) (ret []*v1alpha1.SesDomainIdentity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SesDomainIdentity))
	})
	return ret, err
}

// SesDomainIdentities returns an object that can list and get SesDomainIdentities.
func (s *sesDomainIdentityLister) SesDomainIdentities(namespace string) SesDomainIdentityNamespaceLister {
	return sesDomainIdentityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SesDomainIdentityNamespaceLister helps list and get SesDomainIdentities.
type SesDomainIdentityNamespaceLister interface {
	// List lists all SesDomainIdentities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SesDomainIdentity, err error)
	// Get retrieves the SesDomainIdentity from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SesDomainIdentity, error)
	SesDomainIdentityNamespaceListerExpansion
}

// sesDomainIdentityNamespaceLister implements the SesDomainIdentityNamespaceLister
// interface.
type sesDomainIdentityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SesDomainIdentities in the indexer for a given namespace.
func (s sesDomainIdentityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SesDomainIdentity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SesDomainIdentity))
	})
	return ret, err
}

// Get retrieves the SesDomainIdentity from the indexer for a given namespace and name.
func (s sesDomainIdentityNamespaceLister) Get(name string) (*v1alpha1.SesDomainIdentity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sesdomainidentity"), name)
	}
	return obj.(*v1alpha1.SesDomainIdentity), nil
}
