/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InspectorAssessmentTargetLister helps list InspectorAssessmentTargets.
type InspectorAssessmentTargetLister interface {
	// List lists all InspectorAssessmentTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.InspectorAssessmentTarget, err error)
	// InspectorAssessmentTargets returns an object that can list and get InspectorAssessmentTargets.
	InspectorAssessmentTargets(namespace string) InspectorAssessmentTargetNamespaceLister
	InspectorAssessmentTargetListerExpansion
}

// inspectorAssessmentTargetLister implements the InspectorAssessmentTargetLister interface.
type inspectorAssessmentTargetLister struct {
	indexer cache.Indexer
}

// NewInspectorAssessmentTargetLister returns a new InspectorAssessmentTargetLister.
func NewInspectorAssessmentTargetLister(indexer cache.Indexer) InspectorAssessmentTargetLister {
	return &inspectorAssessmentTargetLister{indexer: indexer}
}

// List lists all InspectorAssessmentTargets in the indexer.
func (s *inspectorAssessmentTargetLister) List(selector labels.Selector) (ret []*v1alpha1.InspectorAssessmentTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InspectorAssessmentTarget))
	})
	return ret, err
}

// InspectorAssessmentTargets returns an object that can list and get InspectorAssessmentTargets.
func (s *inspectorAssessmentTargetLister) InspectorAssessmentTargets(namespace string) InspectorAssessmentTargetNamespaceLister {
	return inspectorAssessmentTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InspectorAssessmentTargetNamespaceLister helps list and get InspectorAssessmentTargets.
type InspectorAssessmentTargetNamespaceLister interface {
	// List lists all InspectorAssessmentTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.InspectorAssessmentTarget, err error)
	// Get retrieves the InspectorAssessmentTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.InspectorAssessmentTarget, error)
	InspectorAssessmentTargetNamespaceListerExpansion
}

// inspectorAssessmentTargetNamespaceLister implements the InspectorAssessmentTargetNamespaceLister
// interface.
type inspectorAssessmentTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InspectorAssessmentTargets in the indexer for a given namespace.
func (s inspectorAssessmentTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InspectorAssessmentTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InspectorAssessmentTarget))
	})
	return ret, err
}

// Get retrieves the InspectorAssessmentTarget from the indexer for a given namespace and name.
func (s inspectorAssessmentTargetNamespaceLister) Get(name string) (*v1alpha1.InspectorAssessmentTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("inspectorassessmenttarget"), name)
	}
	return obj.(*v1alpha1.InspectorAssessmentTarget), nil
}
