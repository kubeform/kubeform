/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IotThingLister helps list IotThings.
type IotThingLister interface {
	// List lists all IotThings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IotThing, err error)
	// IotThings returns an object that can list and get IotThings.
	IotThings(namespace string) IotThingNamespaceLister
	IotThingListerExpansion
}

// iotThingLister implements the IotThingLister interface.
type iotThingLister struct {
	indexer cache.Indexer
}

// NewIotThingLister returns a new IotThingLister.
func NewIotThingLister(indexer cache.Indexer) IotThingLister {
	return &iotThingLister{indexer: indexer}
}

// List lists all IotThings in the indexer.
func (s *iotThingLister) List(selector labels.Selector) (ret []*v1alpha1.IotThing, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IotThing))
	})
	return ret, err
}

// IotThings returns an object that can list and get IotThings.
func (s *iotThingLister) IotThings(namespace string) IotThingNamespaceLister {
	return iotThingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IotThingNamespaceLister helps list and get IotThings.
type IotThingNamespaceLister interface {
	// List lists all IotThings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IotThing, err error)
	// Get retrieves the IotThing from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IotThing, error)
	IotThingNamespaceListerExpansion
}

// iotThingNamespaceLister implements the IotThingNamespaceLister
// interface.
type iotThingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IotThings in the indexer for a given namespace.
func (s iotThingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IotThing, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IotThing))
	})
	return ret, err
}

// Get retrieves the IotThing from the indexer for a given namespace and name.
func (s iotThingNamespaceLister) Get(name string) (*v1alpha1.IotThing, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iotthing"), name)
	}
	return obj.(*v1alpha1.IotThing), nil
}
