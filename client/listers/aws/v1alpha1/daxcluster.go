/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DaxClusterLister helps list DaxClusters.
type DaxClusterLister interface {
	// List lists all DaxClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DaxCluster, err error)
	// DaxClusters returns an object that can list and get DaxClusters.
	DaxClusters(namespace string) DaxClusterNamespaceLister
	DaxClusterListerExpansion
}

// daxClusterLister implements the DaxClusterLister interface.
type daxClusterLister struct {
	indexer cache.Indexer
}

// NewDaxClusterLister returns a new DaxClusterLister.
func NewDaxClusterLister(indexer cache.Indexer) DaxClusterLister {
	return &daxClusterLister{indexer: indexer}
}

// List lists all DaxClusters in the indexer.
func (s *daxClusterLister) List(selector labels.Selector) (ret []*v1alpha1.DaxCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DaxCluster))
	})
	return ret, err
}

// DaxClusters returns an object that can list and get DaxClusters.
func (s *daxClusterLister) DaxClusters(namespace string) DaxClusterNamespaceLister {
	return daxClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DaxClusterNamespaceLister helps list and get DaxClusters.
type DaxClusterNamespaceLister interface {
	// List lists all DaxClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DaxCluster, err error)
	// Get retrieves the DaxCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DaxCluster, error)
	DaxClusterNamespaceListerExpansion
}

// daxClusterNamespaceLister implements the DaxClusterNamespaceLister
// interface.
type daxClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DaxClusters in the indexer for a given namespace.
func (s daxClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DaxCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DaxCluster))
	})
	return ret, err
}

// Get retrieves the DaxCluster from the indexer for a given namespace and name.
func (s daxClusterNamespaceLister) Get(name string) (*v1alpha1.DaxCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("daxcluster"), name)
	}
	return obj.(*v1alpha1.DaxCluster), nil
}
