/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NeptuneParameterGroupLister helps list NeptuneParameterGroups.
type NeptuneParameterGroupLister interface {
	// List lists all NeptuneParameterGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NeptuneParameterGroup, err error)
	// NeptuneParameterGroups returns an object that can list and get NeptuneParameterGroups.
	NeptuneParameterGroups(namespace string) NeptuneParameterGroupNamespaceLister
	NeptuneParameterGroupListerExpansion
}

// neptuneParameterGroupLister implements the NeptuneParameterGroupLister interface.
type neptuneParameterGroupLister struct {
	indexer cache.Indexer
}

// NewNeptuneParameterGroupLister returns a new NeptuneParameterGroupLister.
func NewNeptuneParameterGroupLister(indexer cache.Indexer) NeptuneParameterGroupLister {
	return &neptuneParameterGroupLister{indexer: indexer}
}

// List lists all NeptuneParameterGroups in the indexer.
func (s *neptuneParameterGroupLister) List(selector labels.Selector) (ret []*v1alpha1.NeptuneParameterGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NeptuneParameterGroup))
	})
	return ret, err
}

// NeptuneParameterGroups returns an object that can list and get NeptuneParameterGroups.
func (s *neptuneParameterGroupLister) NeptuneParameterGroups(namespace string) NeptuneParameterGroupNamespaceLister {
	return neptuneParameterGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NeptuneParameterGroupNamespaceLister helps list and get NeptuneParameterGroups.
type NeptuneParameterGroupNamespaceLister interface {
	// List lists all NeptuneParameterGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NeptuneParameterGroup, err error)
	// Get retrieves the NeptuneParameterGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NeptuneParameterGroup, error)
	NeptuneParameterGroupNamespaceListerExpansion
}

// neptuneParameterGroupNamespaceLister implements the NeptuneParameterGroupNamespaceLister
// interface.
type neptuneParameterGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NeptuneParameterGroups in the indexer for a given namespace.
func (s neptuneParameterGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NeptuneParameterGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NeptuneParameterGroup))
	})
	return ret, err
}

// Get retrieves the NeptuneParameterGroup from the indexer for a given namespace and name.
func (s neptuneParameterGroupNamespaceLister) Get(name string) (*v1alpha1.NeptuneParameterGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("neptuneparametergroup"), name)
	}
	return obj.(*v1alpha1.NeptuneParameterGroup), nil
}
