/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DefaultSubnetLister helps list DefaultSubnets.
type DefaultSubnetLister interface {
	// List lists all DefaultSubnets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultSubnet, err error)
	// DefaultSubnets returns an object that can list and get DefaultSubnets.
	DefaultSubnets(namespace string) DefaultSubnetNamespaceLister
	DefaultSubnetListerExpansion
}

// defaultSubnetLister implements the DefaultSubnetLister interface.
type defaultSubnetLister struct {
	indexer cache.Indexer
}

// NewDefaultSubnetLister returns a new DefaultSubnetLister.
func NewDefaultSubnetLister(indexer cache.Indexer) DefaultSubnetLister {
	return &defaultSubnetLister{indexer: indexer}
}

// List lists all DefaultSubnets in the indexer.
func (s *defaultSubnetLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultSubnet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultSubnet))
	})
	return ret, err
}

// DefaultSubnets returns an object that can list and get DefaultSubnets.
func (s *defaultSubnetLister) DefaultSubnets(namespace string) DefaultSubnetNamespaceLister {
	return defaultSubnetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DefaultSubnetNamespaceLister helps list and get DefaultSubnets.
type DefaultSubnetNamespaceLister interface {
	// List lists all DefaultSubnets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultSubnet, err error)
	// Get retrieves the DefaultSubnet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DefaultSubnet, error)
	DefaultSubnetNamespaceListerExpansion
}

// defaultSubnetNamespaceLister implements the DefaultSubnetNamespaceLister
// interface.
type defaultSubnetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DefaultSubnets in the indexer for a given namespace.
func (s defaultSubnetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultSubnet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultSubnet))
	})
	return ret, err
}

// Get retrieves the DefaultSubnet from the indexer for a given namespace and name.
func (s defaultSubnetNamespaceLister) Get(name string) (*v1alpha1.DefaultSubnet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("defaultsubnet"), name)
	}
	return obj.(*v1alpha1.DefaultSubnet), nil
}
