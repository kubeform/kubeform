/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlbListenerCertificateLister helps list AlbListenerCertificates.
type AlbListenerCertificateLister interface {
	// List lists all AlbListenerCertificates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AlbListenerCertificate, err error)
	// AlbListenerCertificates returns an object that can list and get AlbListenerCertificates.
	AlbListenerCertificates(namespace string) AlbListenerCertificateNamespaceLister
	AlbListenerCertificateListerExpansion
}

// albListenerCertificateLister implements the AlbListenerCertificateLister interface.
type albListenerCertificateLister struct {
	indexer cache.Indexer
}

// NewAlbListenerCertificateLister returns a new AlbListenerCertificateLister.
func NewAlbListenerCertificateLister(indexer cache.Indexer) AlbListenerCertificateLister {
	return &albListenerCertificateLister{indexer: indexer}
}

// List lists all AlbListenerCertificates in the indexer.
func (s *albListenerCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.AlbListenerCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlbListenerCertificate))
	})
	return ret, err
}

// AlbListenerCertificates returns an object that can list and get AlbListenerCertificates.
func (s *albListenerCertificateLister) AlbListenerCertificates(namespace string) AlbListenerCertificateNamespaceLister {
	return albListenerCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlbListenerCertificateNamespaceLister helps list and get AlbListenerCertificates.
type AlbListenerCertificateNamespaceLister interface {
	// List lists all AlbListenerCertificates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AlbListenerCertificate, err error)
	// Get retrieves the AlbListenerCertificate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AlbListenerCertificate, error)
	AlbListenerCertificateNamespaceListerExpansion
}

// albListenerCertificateNamespaceLister implements the AlbListenerCertificateNamespaceLister
// interface.
type albListenerCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlbListenerCertificates in the indexer for a given namespace.
func (s albListenerCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlbListenerCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlbListenerCertificate))
	})
	return ret, err
}

// Get retrieves the AlbListenerCertificate from the indexer for a given namespace and name.
func (s albListenerCertificateNamespaceLister) Get(name string) (*v1alpha1.AlbListenerCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("alblistenercertificate"), name)
	}
	return obj.(*v1alpha1.AlbListenerCertificate), nil
}
