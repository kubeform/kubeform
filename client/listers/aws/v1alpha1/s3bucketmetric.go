/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// S3BucketMetricLister helps list S3BucketMetrics.
type S3BucketMetricLister interface {
	// List lists all S3BucketMetrics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.S3BucketMetric, err error)
	// S3BucketMetrics returns an object that can list and get S3BucketMetrics.
	S3BucketMetrics(namespace string) S3BucketMetricNamespaceLister
	S3BucketMetricListerExpansion
}

// s3BucketMetricLister implements the S3BucketMetricLister interface.
type s3BucketMetricLister struct {
	indexer cache.Indexer
}

// NewS3BucketMetricLister returns a new S3BucketMetricLister.
func NewS3BucketMetricLister(indexer cache.Indexer) S3BucketMetricLister {
	return &s3BucketMetricLister{indexer: indexer}
}

// List lists all S3BucketMetrics in the indexer.
func (s *s3BucketMetricLister) List(selector labels.Selector) (ret []*v1alpha1.S3BucketMetric, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3BucketMetric))
	})
	return ret, err
}

// S3BucketMetrics returns an object that can list and get S3BucketMetrics.
func (s *s3BucketMetricLister) S3BucketMetrics(namespace string) S3BucketMetricNamespaceLister {
	return s3BucketMetricNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// S3BucketMetricNamespaceLister helps list and get S3BucketMetrics.
type S3BucketMetricNamespaceLister interface {
	// List lists all S3BucketMetrics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.S3BucketMetric, err error)
	// Get retrieves the S3BucketMetric from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.S3BucketMetric, error)
	S3BucketMetricNamespaceListerExpansion
}

// s3BucketMetricNamespaceLister implements the S3BucketMetricNamespaceLister
// interface.
type s3BucketMetricNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all S3BucketMetrics in the indexer for a given namespace.
func (s s3BucketMetricNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.S3BucketMetric, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3BucketMetric))
	})
	return ret, err
}

// Get retrieves the S3BucketMetric from the indexer for a given namespace and name.
func (s s3BucketMetricNamespaceLister) Get(name string) (*v1alpha1.S3BucketMetric, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("s3bucketmetric"), name)
	}
	return obj.(*v1alpha1.S3BucketMetric), nil
}
