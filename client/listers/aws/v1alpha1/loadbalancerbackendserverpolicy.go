/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoadBalancerBackendServerPolicyLister helps list LoadBalancerBackendServerPolicies.
type LoadBalancerBackendServerPolicyLister interface {
	// List lists all LoadBalancerBackendServerPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerBackendServerPolicy, err error)
	// LoadBalancerBackendServerPolicies returns an object that can list and get LoadBalancerBackendServerPolicies.
	LoadBalancerBackendServerPolicies(namespace string) LoadBalancerBackendServerPolicyNamespaceLister
	LoadBalancerBackendServerPolicyListerExpansion
}

// loadBalancerBackendServerPolicyLister implements the LoadBalancerBackendServerPolicyLister interface.
type loadBalancerBackendServerPolicyLister struct {
	indexer cache.Indexer
}

// NewLoadBalancerBackendServerPolicyLister returns a new LoadBalancerBackendServerPolicyLister.
func NewLoadBalancerBackendServerPolicyLister(indexer cache.Indexer) LoadBalancerBackendServerPolicyLister {
	return &loadBalancerBackendServerPolicyLister{indexer: indexer}
}

// List lists all LoadBalancerBackendServerPolicies in the indexer.
func (s *loadBalancerBackendServerPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerBackendServerPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoadBalancerBackendServerPolicy))
	})
	return ret, err
}

// LoadBalancerBackendServerPolicies returns an object that can list and get LoadBalancerBackendServerPolicies.
func (s *loadBalancerBackendServerPolicyLister) LoadBalancerBackendServerPolicies(namespace string) LoadBalancerBackendServerPolicyNamespaceLister {
	return loadBalancerBackendServerPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoadBalancerBackendServerPolicyNamespaceLister helps list and get LoadBalancerBackendServerPolicies.
type LoadBalancerBackendServerPolicyNamespaceLister interface {
	// List lists all LoadBalancerBackendServerPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerBackendServerPolicy, err error)
	// Get retrieves the LoadBalancerBackendServerPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LoadBalancerBackendServerPolicy, error)
	LoadBalancerBackendServerPolicyNamespaceListerExpansion
}

// loadBalancerBackendServerPolicyNamespaceLister implements the LoadBalancerBackendServerPolicyNamespaceLister
// interface.
type loadBalancerBackendServerPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoadBalancerBackendServerPolicies in the indexer for a given namespace.
func (s loadBalancerBackendServerPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerBackendServerPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoadBalancerBackendServerPolicy))
	})
	return ret, err
}

// Get retrieves the LoadBalancerBackendServerPolicy from the indexer for a given namespace and name.
func (s loadBalancerBackendServerPolicyNamespaceLister) Get(name string) (*v1alpha1.LoadBalancerBackendServerPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loadbalancerbackendserverpolicy"), name)
	}
	return obj.(*v1alpha1.LoadBalancerBackendServerPolicy), nil
}
