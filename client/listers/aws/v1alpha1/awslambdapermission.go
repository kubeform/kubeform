/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// AwsLambdaPermissionLister helps list AwsLambdaPermissions.
type AwsLambdaPermissionLister interface {
	// List lists all AwsLambdaPermissions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AwsLambdaPermission, err error)
	// Get retrieves the AwsLambdaPermission from the index for a given name.
	Get(name string) (*v1alpha1.AwsLambdaPermission, error)
	AwsLambdaPermissionListerExpansion
}

// awsLambdaPermissionLister implements the AwsLambdaPermissionLister interface.
type awsLambdaPermissionLister struct {
	indexer cache.Indexer
}

// NewAwsLambdaPermissionLister returns a new AwsLambdaPermissionLister.
func NewAwsLambdaPermissionLister(indexer cache.Indexer) AwsLambdaPermissionLister {
	return &awsLambdaPermissionLister{indexer: indexer}
}

// List lists all AwsLambdaPermissions in the indexer.
func (s *awsLambdaPermissionLister) List(selector labels.Selector) (ret []*v1alpha1.AwsLambdaPermission, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AwsLambdaPermission))
	})
	return ret, err
}

// Get retrieves the AwsLambdaPermission from the index for a given name.
func (s *awsLambdaPermissionLister) Get(name string) (*v1alpha1.AwsLambdaPermission, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awslambdapermission"), name)
	}
	return obj.(*v1alpha1.AwsLambdaPermission), nil
}
