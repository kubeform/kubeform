/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QuicksightGroupLister helps list QuicksightGroups.
type QuicksightGroupLister interface {
	// List lists all QuicksightGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.QuicksightGroup, err error)
	// QuicksightGroups returns an object that can list and get QuicksightGroups.
	QuicksightGroups(namespace string) QuicksightGroupNamespaceLister
	QuicksightGroupListerExpansion
}

// quicksightGroupLister implements the QuicksightGroupLister interface.
type quicksightGroupLister struct {
	indexer cache.Indexer
}

// NewQuicksightGroupLister returns a new QuicksightGroupLister.
func NewQuicksightGroupLister(indexer cache.Indexer) QuicksightGroupLister {
	return &quicksightGroupLister{indexer: indexer}
}

// List lists all QuicksightGroups in the indexer.
func (s *quicksightGroupLister) List(selector labels.Selector) (ret []*v1alpha1.QuicksightGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QuicksightGroup))
	})
	return ret, err
}

// QuicksightGroups returns an object that can list and get QuicksightGroups.
func (s *quicksightGroupLister) QuicksightGroups(namespace string) QuicksightGroupNamespaceLister {
	return quicksightGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QuicksightGroupNamespaceLister helps list and get QuicksightGroups.
type QuicksightGroupNamespaceLister interface {
	// List lists all QuicksightGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.QuicksightGroup, err error)
	// Get retrieves the QuicksightGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.QuicksightGroup, error)
	QuicksightGroupNamespaceListerExpansion
}

// quicksightGroupNamespaceLister implements the QuicksightGroupNamespaceLister
// interface.
type quicksightGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QuicksightGroups in the indexer for a given namespace.
func (s quicksightGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QuicksightGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QuicksightGroup))
	})
	return ret, err
}

// Get retrieves the QuicksightGroup from the indexer for a given namespace and name.
func (s quicksightGroupNamespaceLister) Get(name string) (*v1alpha1.QuicksightGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("quicksightgroup"), name)
	}
	return obj.(*v1alpha1.QuicksightGroup), nil
}
