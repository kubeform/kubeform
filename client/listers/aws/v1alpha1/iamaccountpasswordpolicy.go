/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// IamAccountPasswordPolicyLister helps list IamAccountPasswordPolicies.
type IamAccountPasswordPolicyLister interface {
	// List lists all IamAccountPasswordPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IamAccountPasswordPolicy, err error)
	// IamAccountPasswordPolicies returns an object that can list and get IamAccountPasswordPolicies.
	IamAccountPasswordPolicies(namespace string) IamAccountPasswordPolicyNamespaceLister
	IamAccountPasswordPolicyListerExpansion
}

// iamAccountPasswordPolicyLister implements the IamAccountPasswordPolicyLister interface.
type iamAccountPasswordPolicyLister struct {
	indexer cache.Indexer
}

// NewIamAccountPasswordPolicyLister returns a new IamAccountPasswordPolicyLister.
func NewIamAccountPasswordPolicyLister(indexer cache.Indexer) IamAccountPasswordPolicyLister {
	return &iamAccountPasswordPolicyLister{indexer: indexer}
}

// List lists all IamAccountPasswordPolicies in the indexer.
func (s *iamAccountPasswordPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.IamAccountPasswordPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamAccountPasswordPolicy))
	})
	return ret, err
}

// IamAccountPasswordPolicies returns an object that can list and get IamAccountPasswordPolicies.
func (s *iamAccountPasswordPolicyLister) IamAccountPasswordPolicies(namespace string) IamAccountPasswordPolicyNamespaceLister {
	return iamAccountPasswordPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IamAccountPasswordPolicyNamespaceLister helps list and get IamAccountPasswordPolicies.
type IamAccountPasswordPolicyNamespaceLister interface {
	// List lists all IamAccountPasswordPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IamAccountPasswordPolicy, err error)
	// Get retrieves the IamAccountPasswordPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IamAccountPasswordPolicy, error)
	IamAccountPasswordPolicyNamespaceListerExpansion
}

// iamAccountPasswordPolicyNamespaceLister implements the IamAccountPasswordPolicyNamespaceLister
// interface.
type iamAccountPasswordPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IamAccountPasswordPolicies in the indexer for a given namespace.
func (s iamAccountPasswordPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IamAccountPasswordPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamAccountPasswordPolicy))
	})
	return ret, err
}

// Get retrieves the IamAccountPasswordPolicy from the indexer for a given namespace and name.
func (s iamAccountPasswordPolicyNamespaceLister) Get(name string) (*v1alpha1.IamAccountPasswordPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iamaccountpasswordpolicy"), name)
	}
	return obj.(*v1alpha1.IamAccountPasswordPolicy), nil
}
