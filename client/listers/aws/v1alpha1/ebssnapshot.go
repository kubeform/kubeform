/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EbsSnapshotLister helps list EbsSnapshots.
type EbsSnapshotLister interface {
	// List lists all EbsSnapshots in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EbsSnapshot, err error)
	// EbsSnapshots returns an object that can list and get EbsSnapshots.
	EbsSnapshots(namespace string) EbsSnapshotNamespaceLister
	EbsSnapshotListerExpansion
}

// ebsSnapshotLister implements the EbsSnapshotLister interface.
type ebsSnapshotLister struct {
	indexer cache.Indexer
}

// NewEbsSnapshotLister returns a new EbsSnapshotLister.
func NewEbsSnapshotLister(indexer cache.Indexer) EbsSnapshotLister {
	return &ebsSnapshotLister{indexer: indexer}
}

// List lists all EbsSnapshots in the indexer.
func (s *ebsSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.EbsSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EbsSnapshot))
	})
	return ret, err
}

// EbsSnapshots returns an object that can list and get EbsSnapshots.
func (s *ebsSnapshotLister) EbsSnapshots(namespace string) EbsSnapshotNamespaceLister {
	return ebsSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EbsSnapshotNamespaceLister helps list and get EbsSnapshots.
type EbsSnapshotNamespaceLister interface {
	// List lists all EbsSnapshots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EbsSnapshot, err error)
	// Get retrieves the EbsSnapshot from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EbsSnapshot, error)
	EbsSnapshotNamespaceListerExpansion
}

// ebsSnapshotNamespaceLister implements the EbsSnapshotNamespaceLister
// interface.
type ebsSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EbsSnapshots in the indexer for a given namespace.
func (s ebsSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EbsSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EbsSnapshot))
	})
	return ret, err
}

// Get retrieves the EbsSnapshot from the indexer for a given namespace and name.
func (s ebsSnapshotNamespaceLister) Get(name string) (*v1alpha1.EbsSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ebssnapshot"), name)
	}
	return obj.(*v1alpha1.EbsSnapshot), nil
}
