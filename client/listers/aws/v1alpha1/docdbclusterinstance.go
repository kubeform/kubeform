/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// DocdbClusterInstanceLister helps list DocdbClusterInstances.
type DocdbClusterInstanceLister interface {
	// List lists all DocdbClusterInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DocdbClusterInstance, err error)
	// DocdbClusterInstances returns an object that can list and get DocdbClusterInstances.
	DocdbClusterInstances(namespace string) DocdbClusterInstanceNamespaceLister
	DocdbClusterInstanceListerExpansion
}

// docdbClusterInstanceLister implements the DocdbClusterInstanceLister interface.
type docdbClusterInstanceLister struct {
	indexer cache.Indexer
}

// NewDocdbClusterInstanceLister returns a new DocdbClusterInstanceLister.
func NewDocdbClusterInstanceLister(indexer cache.Indexer) DocdbClusterInstanceLister {
	return &docdbClusterInstanceLister{indexer: indexer}
}

// List lists all DocdbClusterInstances in the indexer.
func (s *docdbClusterInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.DocdbClusterInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DocdbClusterInstance))
	})
	return ret, err
}

// DocdbClusterInstances returns an object that can list and get DocdbClusterInstances.
func (s *docdbClusterInstanceLister) DocdbClusterInstances(namespace string) DocdbClusterInstanceNamespaceLister {
	return docdbClusterInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DocdbClusterInstanceNamespaceLister helps list and get DocdbClusterInstances.
type DocdbClusterInstanceNamespaceLister interface {
	// List lists all DocdbClusterInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DocdbClusterInstance, err error)
	// Get retrieves the DocdbClusterInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DocdbClusterInstance, error)
	DocdbClusterInstanceNamespaceListerExpansion
}

// docdbClusterInstanceNamespaceLister implements the DocdbClusterInstanceNamespaceLister
// interface.
type docdbClusterInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DocdbClusterInstances in the indexer for a given namespace.
func (s docdbClusterInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DocdbClusterInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DocdbClusterInstance))
	})
	return ret, err
}

// Get retrieves the DocdbClusterInstance from the indexer for a given namespace and name.
func (s docdbClusterInstanceNamespaceLister) Get(name string) (*v1alpha1.DocdbClusterInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("docdbclusterinstance"), name)
	}
	return obj.(*v1alpha1.DocdbClusterInstance), nil
}
