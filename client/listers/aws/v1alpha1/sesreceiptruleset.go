/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SesReceiptRuleSetLister helps list SesReceiptRuleSets.
type SesReceiptRuleSetLister interface {
	// List lists all SesReceiptRuleSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SesReceiptRuleSet, err error)
	// SesReceiptRuleSets returns an object that can list and get SesReceiptRuleSets.
	SesReceiptRuleSets(namespace string) SesReceiptRuleSetNamespaceLister
	SesReceiptRuleSetListerExpansion
}

// sesReceiptRuleSetLister implements the SesReceiptRuleSetLister interface.
type sesReceiptRuleSetLister struct {
	indexer cache.Indexer
}

// NewSesReceiptRuleSetLister returns a new SesReceiptRuleSetLister.
func NewSesReceiptRuleSetLister(indexer cache.Indexer) SesReceiptRuleSetLister {
	return &sesReceiptRuleSetLister{indexer: indexer}
}

// List lists all SesReceiptRuleSets in the indexer.
func (s *sesReceiptRuleSetLister) List(selector labels.Selector) (ret []*v1alpha1.SesReceiptRuleSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SesReceiptRuleSet))
	})
	return ret, err
}

// SesReceiptRuleSets returns an object that can list and get SesReceiptRuleSets.
func (s *sesReceiptRuleSetLister) SesReceiptRuleSets(namespace string) SesReceiptRuleSetNamespaceLister {
	return sesReceiptRuleSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SesReceiptRuleSetNamespaceLister helps list and get SesReceiptRuleSets.
type SesReceiptRuleSetNamespaceLister interface {
	// List lists all SesReceiptRuleSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SesReceiptRuleSet, err error)
	// Get retrieves the SesReceiptRuleSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SesReceiptRuleSet, error)
	SesReceiptRuleSetNamespaceListerExpansion
}

// sesReceiptRuleSetNamespaceLister implements the SesReceiptRuleSetNamespaceLister
// interface.
type sesReceiptRuleSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SesReceiptRuleSets in the indexer for a given namespace.
func (s sesReceiptRuleSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SesReceiptRuleSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SesReceiptRuleSet))
	})
	return ret, err
}

// Get retrieves the SesReceiptRuleSet from the indexer for a given namespace and name.
func (s sesReceiptRuleSetNamespaceLister) Get(name string) (*v1alpha1.SesReceiptRuleSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sesreceiptruleset"), name)
	}
	return obj.(*v1alpha1.SesReceiptRuleSet), nil
}
