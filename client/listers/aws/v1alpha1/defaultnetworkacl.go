/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DefaultNetworkACLLister helps list DefaultNetworkACLs.
type DefaultNetworkACLLister interface {
	// List lists all DefaultNetworkACLs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultNetworkACL, err error)
	// DefaultNetworkACLs returns an object that can list and get DefaultNetworkACLs.
	DefaultNetworkACLs(namespace string) DefaultNetworkACLNamespaceLister
	DefaultNetworkACLListerExpansion
}

// defaultNetworkACLLister implements the DefaultNetworkACLLister interface.
type defaultNetworkACLLister struct {
	indexer cache.Indexer
}

// NewDefaultNetworkACLLister returns a new DefaultNetworkACLLister.
func NewDefaultNetworkACLLister(indexer cache.Indexer) DefaultNetworkACLLister {
	return &defaultNetworkACLLister{indexer: indexer}
}

// List lists all DefaultNetworkACLs in the indexer.
func (s *defaultNetworkACLLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultNetworkACL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultNetworkACL))
	})
	return ret, err
}

// DefaultNetworkACLs returns an object that can list and get DefaultNetworkACLs.
func (s *defaultNetworkACLLister) DefaultNetworkACLs(namespace string) DefaultNetworkACLNamespaceLister {
	return defaultNetworkACLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DefaultNetworkACLNamespaceLister helps list and get DefaultNetworkACLs.
type DefaultNetworkACLNamespaceLister interface {
	// List lists all DefaultNetworkACLs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultNetworkACL, err error)
	// Get retrieves the DefaultNetworkACL from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DefaultNetworkACL, error)
	DefaultNetworkACLNamespaceListerExpansion
}

// defaultNetworkACLNamespaceLister implements the DefaultNetworkACLNamespaceLister
// interface.
type defaultNetworkACLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DefaultNetworkACLs in the indexer for a given namespace.
func (s defaultNetworkACLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultNetworkACL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultNetworkACL))
	})
	return ret, err
}

// Get retrieves the DefaultNetworkACL from the indexer for a given namespace and name.
func (s defaultNetworkACLNamespaceLister) Get(name string) (*v1alpha1.DefaultNetworkACL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("defaultnetworkacl"), name)
	}
	return obj.(*v1alpha1.DefaultNetworkACL), nil
}
