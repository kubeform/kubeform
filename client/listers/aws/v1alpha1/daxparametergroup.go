/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// DaxParameterGroupLister helps list DaxParameterGroups.
type DaxParameterGroupLister interface {
	// List lists all DaxParameterGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DaxParameterGroup, err error)
	// DaxParameterGroups returns an object that can list and get DaxParameterGroups.
	DaxParameterGroups(namespace string) DaxParameterGroupNamespaceLister
	DaxParameterGroupListerExpansion
}

// daxParameterGroupLister implements the DaxParameterGroupLister interface.
type daxParameterGroupLister struct {
	indexer cache.Indexer
}

// NewDaxParameterGroupLister returns a new DaxParameterGroupLister.
func NewDaxParameterGroupLister(indexer cache.Indexer) DaxParameterGroupLister {
	return &daxParameterGroupLister{indexer: indexer}
}

// List lists all DaxParameterGroups in the indexer.
func (s *daxParameterGroupLister) List(selector labels.Selector) (ret []*v1alpha1.DaxParameterGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DaxParameterGroup))
	})
	return ret, err
}

// DaxParameterGroups returns an object that can list and get DaxParameterGroups.
func (s *daxParameterGroupLister) DaxParameterGroups(namespace string) DaxParameterGroupNamespaceLister {
	return daxParameterGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DaxParameterGroupNamespaceLister helps list and get DaxParameterGroups.
type DaxParameterGroupNamespaceLister interface {
	// List lists all DaxParameterGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DaxParameterGroup, err error)
	// Get retrieves the DaxParameterGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DaxParameterGroup, error)
	DaxParameterGroupNamespaceListerExpansion
}

// daxParameterGroupNamespaceLister implements the DaxParameterGroupNamespaceLister
// interface.
type daxParameterGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DaxParameterGroups in the indexer for a given namespace.
func (s daxParameterGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DaxParameterGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DaxParameterGroup))
	})
	return ret, err
}

// Get retrieves the DaxParameterGroup from the indexer for a given namespace and name.
func (s daxParameterGroupNamespaceLister) Get(name string) (*v1alpha1.DaxParameterGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("daxparametergroup"), name)
	}
	return obj.(*v1alpha1.DaxParameterGroup), nil
}
