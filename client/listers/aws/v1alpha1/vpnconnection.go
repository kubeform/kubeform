/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpnConnectionLister helps list VpnConnections.
type VpnConnectionLister interface {
	// List lists all VpnConnections in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VpnConnection, err error)
	// VpnConnections returns an object that can list and get VpnConnections.
	VpnConnections(namespace string) VpnConnectionNamespaceLister
	VpnConnectionListerExpansion
}

// vpnConnectionLister implements the VpnConnectionLister interface.
type vpnConnectionLister struct {
	indexer cache.Indexer
}

// NewVpnConnectionLister returns a new VpnConnectionLister.
func NewVpnConnectionLister(indexer cache.Indexer) VpnConnectionLister {
	return &vpnConnectionLister{indexer: indexer}
}

// List lists all VpnConnections in the indexer.
func (s *vpnConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.VpnConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnConnection))
	})
	return ret, err
}

// VpnConnections returns an object that can list and get VpnConnections.
func (s *vpnConnectionLister) VpnConnections(namespace string) VpnConnectionNamespaceLister {
	return vpnConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpnConnectionNamespaceLister helps list and get VpnConnections.
type VpnConnectionNamespaceLister interface {
	// List lists all VpnConnections in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VpnConnection, err error)
	// Get retrieves the VpnConnection from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VpnConnection, error)
	VpnConnectionNamespaceListerExpansion
}

// vpnConnectionNamespaceLister implements the VpnConnectionNamespaceLister
// interface.
type vpnConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpnConnections in the indexer for a given namespace.
func (s vpnConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpnConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnConnection))
	})
	return ret, err
}

// Get retrieves the VpnConnection from the indexer for a given namespace and name.
func (s vpnConnectionNamespaceLister) Get(name string) (*v1alpha1.VpnConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpnconnection"), name)
	}
	return obj.(*v1alpha1.VpnConnection), nil
}
