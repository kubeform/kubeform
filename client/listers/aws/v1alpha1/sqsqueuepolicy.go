/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqsQueuePolicyLister helps list SqsQueuePolicies.
type SqsQueuePolicyLister interface {
	// List lists all SqsQueuePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SqsQueuePolicy, err error)
	// SqsQueuePolicies returns an object that can list and get SqsQueuePolicies.
	SqsQueuePolicies(namespace string) SqsQueuePolicyNamespaceLister
	SqsQueuePolicyListerExpansion
}

// sqsQueuePolicyLister implements the SqsQueuePolicyLister interface.
type sqsQueuePolicyLister struct {
	indexer cache.Indexer
}

// NewSqsQueuePolicyLister returns a new SqsQueuePolicyLister.
func NewSqsQueuePolicyLister(indexer cache.Indexer) SqsQueuePolicyLister {
	return &sqsQueuePolicyLister{indexer: indexer}
}

// List lists all SqsQueuePolicies in the indexer.
func (s *sqsQueuePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SqsQueuePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqsQueuePolicy))
	})
	return ret, err
}

// SqsQueuePolicies returns an object that can list and get SqsQueuePolicies.
func (s *sqsQueuePolicyLister) SqsQueuePolicies(namespace string) SqsQueuePolicyNamespaceLister {
	return sqsQueuePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqsQueuePolicyNamespaceLister helps list and get SqsQueuePolicies.
type SqsQueuePolicyNamespaceLister interface {
	// List lists all SqsQueuePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SqsQueuePolicy, err error)
	// Get retrieves the SqsQueuePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SqsQueuePolicy, error)
	SqsQueuePolicyNamespaceListerExpansion
}

// sqsQueuePolicyNamespaceLister implements the SqsQueuePolicyNamespaceLister
// interface.
type sqsQueuePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqsQueuePolicies in the indexer for a given namespace.
func (s sqsQueuePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqsQueuePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqsQueuePolicy))
	})
	return ret, err
}

// Get retrieves the SqsQueuePolicy from the indexer for a given namespace and name.
func (s sqsQueuePolicyNamespaceLister) Get(name string) (*v1alpha1.SqsQueuePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqsqueuepolicy"), name)
	}
	return obj.(*v1alpha1.SqsQueuePolicy), nil
}
