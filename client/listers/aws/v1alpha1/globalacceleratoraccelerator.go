/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalacceleratorAcceleratorLister helps list GlobalacceleratorAccelerators.
type GlobalacceleratorAcceleratorLister interface {
	// List lists all GlobalacceleratorAccelerators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalacceleratorAccelerator, err error)
	// GlobalacceleratorAccelerators returns an object that can list and get GlobalacceleratorAccelerators.
	GlobalacceleratorAccelerators(namespace string) GlobalacceleratorAcceleratorNamespaceLister
	GlobalacceleratorAcceleratorListerExpansion
}

// globalacceleratorAcceleratorLister implements the GlobalacceleratorAcceleratorLister interface.
type globalacceleratorAcceleratorLister struct {
	indexer cache.Indexer
}

// NewGlobalacceleratorAcceleratorLister returns a new GlobalacceleratorAcceleratorLister.
func NewGlobalacceleratorAcceleratorLister(indexer cache.Indexer) GlobalacceleratorAcceleratorLister {
	return &globalacceleratorAcceleratorLister{indexer: indexer}
}

// List lists all GlobalacceleratorAccelerators in the indexer.
func (s *globalacceleratorAcceleratorLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalacceleratorAccelerator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalacceleratorAccelerator))
	})
	return ret, err
}

// GlobalacceleratorAccelerators returns an object that can list and get GlobalacceleratorAccelerators.
func (s *globalacceleratorAcceleratorLister) GlobalacceleratorAccelerators(namespace string) GlobalacceleratorAcceleratorNamespaceLister {
	return globalacceleratorAcceleratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalacceleratorAcceleratorNamespaceLister helps list and get GlobalacceleratorAccelerators.
type GlobalacceleratorAcceleratorNamespaceLister interface {
	// List lists all GlobalacceleratorAccelerators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalacceleratorAccelerator, err error)
	// Get retrieves the GlobalacceleratorAccelerator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GlobalacceleratorAccelerator, error)
	GlobalacceleratorAcceleratorNamespaceListerExpansion
}

// globalacceleratorAcceleratorNamespaceLister implements the GlobalacceleratorAcceleratorNamespaceLister
// interface.
type globalacceleratorAcceleratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalacceleratorAccelerators in the indexer for a given namespace.
func (s globalacceleratorAcceleratorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalacceleratorAccelerator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalacceleratorAccelerator))
	})
	return ret, err
}

// Get retrieves the GlobalacceleratorAccelerator from the indexer for a given namespace and name.
func (s globalacceleratorAcceleratorNamespaceLister) Get(name string) (*v1alpha1.GlobalacceleratorAccelerator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("globalacceleratoraccelerator"), name)
	}
	return obj.(*v1alpha1.GlobalacceleratorAccelerator), nil
}
