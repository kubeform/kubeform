/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WafIpsetLister helps list WafIpsets.
type WafIpsetLister interface {
	// List lists all WafIpsets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WafIpset, err error)
	// WafIpsets returns an object that can list and get WafIpsets.
	WafIpsets(namespace string) WafIpsetNamespaceLister
	WafIpsetListerExpansion
}

// wafIpsetLister implements the WafIpsetLister interface.
type wafIpsetLister struct {
	indexer cache.Indexer
}

// NewWafIpsetLister returns a new WafIpsetLister.
func NewWafIpsetLister(indexer cache.Indexer) WafIpsetLister {
	return &wafIpsetLister{indexer: indexer}
}

// List lists all WafIpsets in the indexer.
func (s *wafIpsetLister) List(selector labels.Selector) (ret []*v1alpha1.WafIpset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WafIpset))
	})
	return ret, err
}

// WafIpsets returns an object that can list and get WafIpsets.
func (s *wafIpsetLister) WafIpsets(namespace string) WafIpsetNamespaceLister {
	return wafIpsetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WafIpsetNamespaceLister helps list and get WafIpsets.
type WafIpsetNamespaceLister interface {
	// List lists all WafIpsets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WafIpset, err error)
	// Get retrieves the WafIpset from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WafIpset, error)
	WafIpsetNamespaceListerExpansion
}

// wafIpsetNamespaceLister implements the WafIpsetNamespaceLister
// interface.
type wafIpsetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WafIpsets in the indexer for a given namespace.
func (s wafIpsetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WafIpset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WafIpset))
	})
	return ret, err
}

// Get retrieves the WafIpset from the indexer for a given namespace and name.
func (s wafIpsetNamespaceLister) Get(name string) (*v1alpha1.WafIpset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wafipset"), name)
	}
	return obj.(*v1alpha1.WafIpset), nil
}
