/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpsworksUserProfileLister helps list OpsworksUserProfiles.
type OpsworksUserProfileLister interface {
	// List lists all OpsworksUserProfiles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OpsworksUserProfile, err error)
	// OpsworksUserProfiles returns an object that can list and get OpsworksUserProfiles.
	OpsworksUserProfiles(namespace string) OpsworksUserProfileNamespaceLister
	OpsworksUserProfileListerExpansion
}

// opsworksUserProfileLister implements the OpsworksUserProfileLister interface.
type opsworksUserProfileLister struct {
	indexer cache.Indexer
}

// NewOpsworksUserProfileLister returns a new OpsworksUserProfileLister.
func NewOpsworksUserProfileLister(indexer cache.Indexer) OpsworksUserProfileLister {
	return &opsworksUserProfileLister{indexer: indexer}
}

// List lists all OpsworksUserProfiles in the indexer.
func (s *opsworksUserProfileLister) List(selector labels.Selector) (ret []*v1alpha1.OpsworksUserProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpsworksUserProfile))
	})
	return ret, err
}

// OpsworksUserProfiles returns an object that can list and get OpsworksUserProfiles.
func (s *opsworksUserProfileLister) OpsworksUserProfiles(namespace string) OpsworksUserProfileNamespaceLister {
	return opsworksUserProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpsworksUserProfileNamespaceLister helps list and get OpsworksUserProfiles.
type OpsworksUserProfileNamespaceLister interface {
	// List lists all OpsworksUserProfiles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OpsworksUserProfile, err error)
	// Get retrieves the OpsworksUserProfile from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OpsworksUserProfile, error)
	OpsworksUserProfileNamespaceListerExpansion
}

// opsworksUserProfileNamespaceLister implements the OpsworksUserProfileNamespaceLister
// interface.
type opsworksUserProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpsworksUserProfiles in the indexer for a given namespace.
func (s opsworksUserProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpsworksUserProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpsworksUserProfile))
	})
	return ret, err
}

// Get retrieves the OpsworksUserProfile from the indexer for a given namespace and name.
func (s opsworksUserProfileNamespaceLister) Get(name string) (*v1alpha1.OpsworksUserProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("opsworksuserprofile"), name)
	}
	return obj.(*v1alpha1.OpsworksUserProfile), nil
}
