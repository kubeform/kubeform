/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PinpointApnsChannelLister helps list PinpointApnsChannels.
type PinpointApnsChannelLister interface {
	// List lists all PinpointApnsChannels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PinpointApnsChannel, err error)
	// PinpointApnsChannels returns an object that can list and get PinpointApnsChannels.
	PinpointApnsChannels(namespace string) PinpointApnsChannelNamespaceLister
	PinpointApnsChannelListerExpansion
}

// pinpointApnsChannelLister implements the PinpointApnsChannelLister interface.
type pinpointApnsChannelLister struct {
	indexer cache.Indexer
}

// NewPinpointApnsChannelLister returns a new PinpointApnsChannelLister.
func NewPinpointApnsChannelLister(indexer cache.Indexer) PinpointApnsChannelLister {
	return &pinpointApnsChannelLister{indexer: indexer}
}

// List lists all PinpointApnsChannels in the indexer.
func (s *pinpointApnsChannelLister) List(selector labels.Selector) (ret []*v1alpha1.PinpointApnsChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PinpointApnsChannel))
	})
	return ret, err
}

// PinpointApnsChannels returns an object that can list and get PinpointApnsChannels.
func (s *pinpointApnsChannelLister) PinpointApnsChannels(namespace string) PinpointApnsChannelNamespaceLister {
	return pinpointApnsChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PinpointApnsChannelNamespaceLister helps list and get PinpointApnsChannels.
type PinpointApnsChannelNamespaceLister interface {
	// List lists all PinpointApnsChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PinpointApnsChannel, err error)
	// Get retrieves the PinpointApnsChannel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PinpointApnsChannel, error)
	PinpointApnsChannelNamespaceListerExpansion
}

// pinpointApnsChannelNamespaceLister implements the PinpointApnsChannelNamespaceLister
// interface.
type pinpointApnsChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PinpointApnsChannels in the indexer for a given namespace.
func (s pinpointApnsChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PinpointApnsChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PinpointApnsChannel))
	})
	return ret, err
}

// Get retrieves the PinpointApnsChannel from the indexer for a given namespace and name.
func (s pinpointApnsChannelNamespaceLister) Get(name string) (*v1alpha1.PinpointApnsChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pinpointapnschannel"), name)
	}
	return obj.(*v1alpha1.PinpointApnsChannel), nil
}
