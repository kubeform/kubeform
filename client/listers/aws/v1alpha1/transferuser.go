/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransferUserLister helps list TransferUsers.
type TransferUserLister interface {
	// List lists all TransferUsers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TransferUser, err error)
	// TransferUsers returns an object that can list and get TransferUsers.
	TransferUsers(namespace string) TransferUserNamespaceLister
	TransferUserListerExpansion
}

// transferUserLister implements the TransferUserLister interface.
type transferUserLister struct {
	indexer cache.Indexer
}

// NewTransferUserLister returns a new TransferUserLister.
func NewTransferUserLister(indexer cache.Indexer) TransferUserLister {
	return &transferUserLister{indexer: indexer}
}

// List lists all TransferUsers in the indexer.
func (s *transferUserLister) List(selector labels.Selector) (ret []*v1alpha1.TransferUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransferUser))
	})
	return ret, err
}

// TransferUsers returns an object that can list and get TransferUsers.
func (s *transferUserLister) TransferUsers(namespace string) TransferUserNamespaceLister {
	return transferUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransferUserNamespaceLister helps list and get TransferUsers.
type TransferUserNamespaceLister interface {
	// List lists all TransferUsers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TransferUser, err error)
	// Get retrieves the TransferUser from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TransferUser, error)
	TransferUserNamespaceListerExpansion
}

// transferUserNamespaceLister implements the TransferUserNamespaceLister
// interface.
type transferUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransferUsers in the indexer for a given namespace.
func (s transferUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransferUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransferUser))
	})
	return ret, err
}

// Get retrieves the TransferUser from the indexer for a given namespace and name.
func (s transferUserNamespaceLister) Get(name string) (*v1alpha1.TransferUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transferuser"), name)
	}
	return obj.(*v1alpha1.TransferUser), nil
}
