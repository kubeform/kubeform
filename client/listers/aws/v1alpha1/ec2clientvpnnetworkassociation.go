/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ec2ClientVPNNetworkAssociationLister helps list Ec2ClientVPNNetworkAssociations.
type Ec2ClientVPNNetworkAssociationLister interface {
	// List lists all Ec2ClientVPNNetworkAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Ec2ClientVPNNetworkAssociation, err error)
	// Ec2ClientVPNNetworkAssociations returns an object that can list and get Ec2ClientVPNNetworkAssociations.
	Ec2ClientVPNNetworkAssociations(namespace string) Ec2ClientVPNNetworkAssociationNamespaceLister
	Ec2ClientVPNNetworkAssociationListerExpansion
}

// ec2ClientVPNNetworkAssociationLister implements the Ec2ClientVPNNetworkAssociationLister interface.
type ec2ClientVPNNetworkAssociationLister struct {
	indexer cache.Indexer
}

// NewEc2ClientVPNNetworkAssociationLister returns a new Ec2ClientVPNNetworkAssociationLister.
func NewEc2ClientVPNNetworkAssociationLister(indexer cache.Indexer) Ec2ClientVPNNetworkAssociationLister {
	return &ec2ClientVPNNetworkAssociationLister{indexer: indexer}
}

// List lists all Ec2ClientVPNNetworkAssociations in the indexer.
func (s *ec2ClientVPNNetworkAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.Ec2ClientVPNNetworkAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ec2ClientVPNNetworkAssociation))
	})
	return ret, err
}

// Ec2ClientVPNNetworkAssociations returns an object that can list and get Ec2ClientVPNNetworkAssociations.
func (s *ec2ClientVPNNetworkAssociationLister) Ec2ClientVPNNetworkAssociations(namespace string) Ec2ClientVPNNetworkAssociationNamespaceLister {
	return ec2ClientVPNNetworkAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ec2ClientVPNNetworkAssociationNamespaceLister helps list and get Ec2ClientVPNNetworkAssociations.
type Ec2ClientVPNNetworkAssociationNamespaceLister interface {
	// List lists all Ec2ClientVPNNetworkAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Ec2ClientVPNNetworkAssociation, err error)
	// Get retrieves the Ec2ClientVPNNetworkAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Ec2ClientVPNNetworkAssociation, error)
	Ec2ClientVPNNetworkAssociationNamespaceListerExpansion
}

// ec2ClientVPNNetworkAssociationNamespaceLister implements the Ec2ClientVPNNetworkAssociationNamespaceLister
// interface.
type ec2ClientVPNNetworkAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ec2ClientVPNNetworkAssociations in the indexer for a given namespace.
func (s ec2ClientVPNNetworkAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ec2ClientVPNNetworkAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ec2ClientVPNNetworkAssociation))
	})
	return ret, err
}

// Get retrieves the Ec2ClientVPNNetworkAssociation from the indexer for a given namespace and name.
func (s ec2ClientVPNNetworkAssociationNamespaceLister) Get(name string) (*v1alpha1.Ec2ClientVPNNetworkAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ec2clientvpnnetworkassociation"), name)
	}
	return obj.(*v1alpha1.Ec2ClientVPNNetworkAssociation), nil
}
