/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DxConnectionAssociationLister helps list DxConnectionAssociations.
type DxConnectionAssociationLister interface {
	// List lists all DxConnectionAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DxConnectionAssociation, err error)
	// DxConnectionAssociations returns an object that can list and get DxConnectionAssociations.
	DxConnectionAssociations(namespace string) DxConnectionAssociationNamespaceLister
	DxConnectionAssociationListerExpansion
}

// dxConnectionAssociationLister implements the DxConnectionAssociationLister interface.
type dxConnectionAssociationLister struct {
	indexer cache.Indexer
}

// NewDxConnectionAssociationLister returns a new DxConnectionAssociationLister.
func NewDxConnectionAssociationLister(indexer cache.Indexer) DxConnectionAssociationLister {
	return &dxConnectionAssociationLister{indexer: indexer}
}

// List lists all DxConnectionAssociations in the indexer.
func (s *dxConnectionAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.DxConnectionAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DxConnectionAssociation))
	})
	return ret, err
}

// DxConnectionAssociations returns an object that can list and get DxConnectionAssociations.
func (s *dxConnectionAssociationLister) DxConnectionAssociations(namespace string) DxConnectionAssociationNamespaceLister {
	return dxConnectionAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DxConnectionAssociationNamespaceLister helps list and get DxConnectionAssociations.
type DxConnectionAssociationNamespaceLister interface {
	// List lists all DxConnectionAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DxConnectionAssociation, err error)
	// Get retrieves the DxConnectionAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DxConnectionAssociation, error)
	DxConnectionAssociationNamespaceListerExpansion
}

// dxConnectionAssociationNamespaceLister implements the DxConnectionAssociationNamespaceLister
// interface.
type dxConnectionAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DxConnectionAssociations in the indexer for a given namespace.
func (s dxConnectionAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DxConnectionAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DxConnectionAssociation))
	})
	return ret, err
}

// Get retrieves the DxConnectionAssociation from the indexer for a given namespace and name.
func (s dxConnectionAssociationNamespaceLister) Get(name string) (*v1alpha1.DxConnectionAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dxconnectionassociation"), name)
	}
	return obj.(*v1alpha1.DxConnectionAssociation), nil
}
