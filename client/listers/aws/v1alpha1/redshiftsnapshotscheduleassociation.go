/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedshiftSnapshotScheduleAssociationLister helps list RedshiftSnapshotScheduleAssociations.
type RedshiftSnapshotScheduleAssociationLister interface {
	// List lists all RedshiftSnapshotScheduleAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotScheduleAssociation, err error)
	// RedshiftSnapshotScheduleAssociations returns an object that can list and get RedshiftSnapshotScheduleAssociations.
	RedshiftSnapshotScheduleAssociations(namespace string) RedshiftSnapshotScheduleAssociationNamespaceLister
	RedshiftSnapshotScheduleAssociationListerExpansion
}

// redshiftSnapshotScheduleAssociationLister implements the RedshiftSnapshotScheduleAssociationLister interface.
type redshiftSnapshotScheduleAssociationLister struct {
	indexer cache.Indexer
}

// NewRedshiftSnapshotScheduleAssociationLister returns a new RedshiftSnapshotScheduleAssociationLister.
func NewRedshiftSnapshotScheduleAssociationLister(indexer cache.Indexer) RedshiftSnapshotScheduleAssociationLister {
	return &redshiftSnapshotScheduleAssociationLister{indexer: indexer}
}

// List lists all RedshiftSnapshotScheduleAssociations in the indexer.
func (s *redshiftSnapshotScheduleAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotScheduleAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedshiftSnapshotScheduleAssociation))
	})
	return ret, err
}

// RedshiftSnapshotScheduleAssociations returns an object that can list and get RedshiftSnapshotScheduleAssociations.
func (s *redshiftSnapshotScheduleAssociationLister) RedshiftSnapshotScheduleAssociations(namespace string) RedshiftSnapshotScheduleAssociationNamespaceLister {
	return redshiftSnapshotScheduleAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedshiftSnapshotScheduleAssociationNamespaceLister helps list and get RedshiftSnapshotScheduleAssociations.
type RedshiftSnapshotScheduleAssociationNamespaceLister interface {
	// List lists all RedshiftSnapshotScheduleAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotScheduleAssociation, err error)
	// Get retrieves the RedshiftSnapshotScheduleAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RedshiftSnapshotScheduleAssociation, error)
	RedshiftSnapshotScheduleAssociationNamespaceListerExpansion
}

// redshiftSnapshotScheduleAssociationNamespaceLister implements the RedshiftSnapshotScheduleAssociationNamespaceLister
// interface.
type redshiftSnapshotScheduleAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedshiftSnapshotScheduleAssociations in the indexer for a given namespace.
func (s redshiftSnapshotScheduleAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotScheduleAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedshiftSnapshotScheduleAssociation))
	})
	return ret, err
}

// Get retrieves the RedshiftSnapshotScheduleAssociation from the indexer for a given namespace and name.
func (s redshiftSnapshotScheduleAssociationNamespaceLister) Get(name string) (*v1alpha1.RedshiftSnapshotScheduleAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redshiftsnapshotscheduleassociation"), name)
	}
	return obj.(*v1alpha1.RedshiftSnapshotScheduleAssociation), nil
}
