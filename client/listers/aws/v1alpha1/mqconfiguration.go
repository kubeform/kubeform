/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MqConfigurationLister helps list MqConfigurations.
type MqConfigurationLister interface {
	// List lists all MqConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MqConfiguration, err error)
	// MqConfigurations returns an object that can list and get MqConfigurations.
	MqConfigurations(namespace string) MqConfigurationNamespaceLister
	MqConfigurationListerExpansion
}

// mqConfigurationLister implements the MqConfigurationLister interface.
type mqConfigurationLister struct {
	indexer cache.Indexer
}

// NewMqConfigurationLister returns a new MqConfigurationLister.
func NewMqConfigurationLister(indexer cache.Indexer) MqConfigurationLister {
	return &mqConfigurationLister{indexer: indexer}
}

// List lists all MqConfigurations in the indexer.
func (s *mqConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.MqConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MqConfiguration))
	})
	return ret, err
}

// MqConfigurations returns an object that can list and get MqConfigurations.
func (s *mqConfigurationLister) MqConfigurations(namespace string) MqConfigurationNamespaceLister {
	return mqConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MqConfigurationNamespaceLister helps list and get MqConfigurations.
type MqConfigurationNamespaceLister interface {
	// List lists all MqConfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MqConfiguration, err error)
	// Get retrieves the MqConfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MqConfiguration, error)
	MqConfigurationNamespaceListerExpansion
}

// mqConfigurationNamespaceLister implements the MqConfigurationNamespaceLister
// interface.
type mqConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MqConfigurations in the indexer for a given namespace.
func (s mqConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MqConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MqConfiguration))
	})
	return ret, err
}

// Get retrieves the MqConfiguration from the indexer for a given namespace and name.
func (s mqConfigurationNamespaceLister) Get(name string) (*v1alpha1.MqConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mqconfiguration"), name)
	}
	return obj.(*v1alpha1.MqConfiguration), nil
}
