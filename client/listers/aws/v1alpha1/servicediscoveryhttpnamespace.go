/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// ServiceDiscoveryHTTPNamespaceLister helps list ServiceDiscoveryHTTPNamespaces.
type ServiceDiscoveryHTTPNamespaceLister interface {
	// List lists all ServiceDiscoveryHTTPNamespaces in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceDiscoveryHTTPNamespace, err error)
	// ServiceDiscoveryHTTPNamespaces returns an object that can list and get ServiceDiscoveryHTTPNamespaces.
	ServiceDiscoveryHTTPNamespaces(namespace string) ServiceDiscoveryHTTPNamespaceNamespaceLister
	ServiceDiscoveryHTTPNamespaceListerExpansion
}

// serviceDiscoveryHTTPNamespaceLister implements the ServiceDiscoveryHTTPNamespaceLister interface.
type serviceDiscoveryHTTPNamespaceLister struct {
	indexer cache.Indexer
}

// NewServiceDiscoveryHTTPNamespaceLister returns a new ServiceDiscoveryHTTPNamespaceLister.
func NewServiceDiscoveryHTTPNamespaceLister(indexer cache.Indexer) ServiceDiscoveryHTTPNamespaceLister {
	return &serviceDiscoveryHTTPNamespaceLister{indexer: indexer}
}

// List lists all ServiceDiscoveryHTTPNamespaces in the indexer.
func (s *serviceDiscoveryHTTPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceDiscoveryHTTPNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceDiscoveryHTTPNamespace))
	})
	return ret, err
}

// ServiceDiscoveryHTTPNamespaces returns an object that can list and get ServiceDiscoveryHTTPNamespaces.
func (s *serviceDiscoveryHTTPNamespaceLister) ServiceDiscoveryHTTPNamespaces(namespace string) ServiceDiscoveryHTTPNamespaceNamespaceLister {
	return serviceDiscoveryHTTPNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceDiscoveryHTTPNamespaceNamespaceLister helps list and get ServiceDiscoveryHTTPNamespaces.
type ServiceDiscoveryHTTPNamespaceNamespaceLister interface {
	// List lists all ServiceDiscoveryHTTPNamespaces in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceDiscoveryHTTPNamespace, err error)
	// Get retrieves the ServiceDiscoveryHTTPNamespace from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServiceDiscoveryHTTPNamespace, error)
	ServiceDiscoveryHTTPNamespaceNamespaceListerExpansion
}

// serviceDiscoveryHTTPNamespaceNamespaceLister implements the ServiceDiscoveryHTTPNamespaceNamespaceLister
// interface.
type serviceDiscoveryHTTPNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceDiscoveryHTTPNamespaces in the indexer for a given namespace.
func (s serviceDiscoveryHTTPNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceDiscoveryHTTPNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceDiscoveryHTTPNamespace))
	})
	return ret, err
}

// Get retrieves the ServiceDiscoveryHTTPNamespace from the indexer for a given namespace and name.
func (s serviceDiscoveryHTTPNamespaceNamespaceLister) Get(name string) (*v1alpha1.ServiceDiscoveryHTTPNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicediscoveryhttpnamespace"), name)
	}
	return obj.(*v1alpha1.ServiceDiscoveryHTTPNamespace), nil
}
