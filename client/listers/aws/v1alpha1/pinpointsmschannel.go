/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PinpointSmsChannelLister helps list PinpointSmsChannels.
type PinpointSmsChannelLister interface {
	// List lists all PinpointSmsChannels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PinpointSmsChannel, err error)
	// PinpointSmsChannels returns an object that can list and get PinpointSmsChannels.
	PinpointSmsChannels(namespace string) PinpointSmsChannelNamespaceLister
	PinpointSmsChannelListerExpansion
}

// pinpointSmsChannelLister implements the PinpointSmsChannelLister interface.
type pinpointSmsChannelLister struct {
	indexer cache.Indexer
}

// NewPinpointSmsChannelLister returns a new PinpointSmsChannelLister.
func NewPinpointSmsChannelLister(indexer cache.Indexer) PinpointSmsChannelLister {
	return &pinpointSmsChannelLister{indexer: indexer}
}

// List lists all PinpointSmsChannels in the indexer.
func (s *pinpointSmsChannelLister) List(selector labels.Selector) (ret []*v1alpha1.PinpointSmsChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PinpointSmsChannel))
	})
	return ret, err
}

// PinpointSmsChannels returns an object that can list and get PinpointSmsChannels.
func (s *pinpointSmsChannelLister) PinpointSmsChannels(namespace string) PinpointSmsChannelNamespaceLister {
	return pinpointSmsChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PinpointSmsChannelNamespaceLister helps list and get PinpointSmsChannels.
type PinpointSmsChannelNamespaceLister interface {
	// List lists all PinpointSmsChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PinpointSmsChannel, err error)
	// Get retrieves the PinpointSmsChannel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PinpointSmsChannel, error)
	PinpointSmsChannelNamespaceListerExpansion
}

// pinpointSmsChannelNamespaceLister implements the PinpointSmsChannelNamespaceLister
// interface.
type pinpointSmsChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PinpointSmsChannels in the indexer for a given namespace.
func (s pinpointSmsChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PinpointSmsChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PinpointSmsChannel))
	})
	return ret, err
}

// Get retrieves the PinpointSmsChannel from the indexer for a given namespace and name.
func (s pinpointSmsChannelNamespaceLister) Get(name string) (*v1alpha1.PinpointSmsChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pinpointsmschannel"), name)
	}
	return obj.(*v1alpha1.PinpointSmsChannel), nil
}
