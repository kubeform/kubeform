/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// ConfigConfigurationRecorderStatus_Lister helps list ConfigConfigurationRecorderStatus_s.
type ConfigConfigurationRecorderStatus_Lister interface {
	// List lists all ConfigConfigurationRecorderStatus_s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorderStatus_, err error)
	// ConfigConfigurationRecorderStatus_s returns an object that can list and get ConfigConfigurationRecorderStatus_s.
	ConfigConfigurationRecorderStatus_s(namespace string) ConfigConfigurationRecorderStatus_NamespaceLister
	ConfigConfigurationRecorderStatus_ListerExpansion
}

// configConfigurationRecorderStatus_Lister implements the ConfigConfigurationRecorderStatus_Lister interface.
type configConfigurationRecorderStatus_Lister struct {
	indexer cache.Indexer
}

// NewConfigConfigurationRecorderStatus_Lister returns a new ConfigConfigurationRecorderStatus_Lister.
func NewConfigConfigurationRecorderStatus_Lister(indexer cache.Indexer) ConfigConfigurationRecorderStatus_Lister {
	return &configConfigurationRecorderStatus_Lister{indexer: indexer}
}

// List lists all ConfigConfigurationRecorderStatus_s in the indexer.
func (s *configConfigurationRecorderStatus_Lister) List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorderStatus_, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigConfigurationRecorderStatus_))
	})
	return ret, err
}

// ConfigConfigurationRecorderStatus_s returns an object that can list and get ConfigConfigurationRecorderStatus_s.
func (s *configConfigurationRecorderStatus_Lister) ConfigConfigurationRecorderStatus_s(namespace string) ConfigConfigurationRecorderStatus_NamespaceLister {
	return configConfigurationRecorderStatus_NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigConfigurationRecorderStatus_NamespaceLister helps list and get ConfigConfigurationRecorderStatus_s.
type ConfigConfigurationRecorderStatus_NamespaceLister interface {
	// List lists all ConfigConfigurationRecorderStatus_s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorderStatus_, err error)
	// Get retrieves the ConfigConfigurationRecorderStatus_ from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigConfigurationRecorderStatus_, error)
	ConfigConfigurationRecorderStatus_NamespaceListerExpansion
}

// configConfigurationRecorderStatus_NamespaceLister implements the ConfigConfigurationRecorderStatus_NamespaceLister
// interface.
type configConfigurationRecorderStatus_NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigConfigurationRecorderStatus_s in the indexer for a given namespace.
func (s configConfigurationRecorderStatus_NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorderStatus_, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigConfigurationRecorderStatus_))
	})
	return ret, err
}

// Get retrieves the ConfigConfigurationRecorderStatus_ from the indexer for a given namespace and name.
func (s configConfigurationRecorderStatus_NamespaceLister) Get(name string) (*v1alpha1.ConfigConfigurationRecorderStatus_, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configconfigurationrecorderstatus_"), name)
	}
	return obj.(*v1alpha1.ConfigConfigurationRecorderStatus_), nil
}
