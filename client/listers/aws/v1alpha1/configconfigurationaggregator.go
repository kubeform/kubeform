/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigConfigurationAggregatorLister helps list ConfigConfigurationAggregators.
type ConfigConfigurationAggregatorLister interface {
	// List lists all ConfigConfigurationAggregators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationAggregator, err error)
	// ConfigConfigurationAggregators returns an object that can list and get ConfigConfigurationAggregators.
	ConfigConfigurationAggregators(namespace string) ConfigConfigurationAggregatorNamespaceLister
	ConfigConfigurationAggregatorListerExpansion
}

// configConfigurationAggregatorLister implements the ConfigConfigurationAggregatorLister interface.
type configConfigurationAggregatorLister struct {
	indexer cache.Indexer
}

// NewConfigConfigurationAggregatorLister returns a new ConfigConfigurationAggregatorLister.
func NewConfigConfigurationAggregatorLister(indexer cache.Indexer) ConfigConfigurationAggregatorLister {
	return &configConfigurationAggregatorLister{indexer: indexer}
}

// List lists all ConfigConfigurationAggregators in the indexer.
func (s *configConfigurationAggregatorLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationAggregator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigConfigurationAggregator))
	})
	return ret, err
}

// ConfigConfigurationAggregators returns an object that can list and get ConfigConfigurationAggregators.
func (s *configConfigurationAggregatorLister) ConfigConfigurationAggregators(namespace string) ConfigConfigurationAggregatorNamespaceLister {
	return configConfigurationAggregatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigConfigurationAggregatorNamespaceLister helps list and get ConfigConfigurationAggregators.
type ConfigConfigurationAggregatorNamespaceLister interface {
	// List lists all ConfigConfigurationAggregators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationAggregator, err error)
	// Get retrieves the ConfigConfigurationAggregator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigConfigurationAggregator, error)
	ConfigConfigurationAggregatorNamespaceListerExpansion
}

// configConfigurationAggregatorNamespaceLister implements the ConfigConfigurationAggregatorNamespaceLister
// interface.
type configConfigurationAggregatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigConfigurationAggregators in the indexer for a given namespace.
func (s configConfigurationAggregatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationAggregator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigConfigurationAggregator))
	})
	return ret, err
}

// Get retrieves the ConfigConfigurationAggregator from the indexer for a given namespace and name.
func (s configConfigurationAggregatorNamespaceLister) Get(name string) (*v1alpha1.ConfigConfigurationAggregator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configconfigurationaggregator"), name)
	}
	return obj.(*v1alpha1.ConfigConfigurationAggregator), nil
}
