/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiGatewayAuthorizerLister helps list ApiGatewayAuthorizers.
type ApiGatewayAuthorizerLister interface {
	// List lists all ApiGatewayAuthorizers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayAuthorizer, err error)
	// ApiGatewayAuthorizers returns an object that can list and get ApiGatewayAuthorizers.
	ApiGatewayAuthorizers(namespace string) ApiGatewayAuthorizerNamespaceLister
	ApiGatewayAuthorizerListerExpansion
}

// apiGatewayAuthorizerLister implements the ApiGatewayAuthorizerLister interface.
type apiGatewayAuthorizerLister struct {
	indexer cache.Indexer
}

// NewApiGatewayAuthorizerLister returns a new ApiGatewayAuthorizerLister.
func NewApiGatewayAuthorizerLister(indexer cache.Indexer) ApiGatewayAuthorizerLister {
	return &apiGatewayAuthorizerLister{indexer: indexer}
}

// List lists all ApiGatewayAuthorizers in the indexer.
func (s *apiGatewayAuthorizerLister) List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayAuthorizer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiGatewayAuthorizer))
	})
	return ret, err
}

// ApiGatewayAuthorizers returns an object that can list and get ApiGatewayAuthorizers.
func (s *apiGatewayAuthorizerLister) ApiGatewayAuthorizers(namespace string) ApiGatewayAuthorizerNamespaceLister {
	return apiGatewayAuthorizerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiGatewayAuthorizerNamespaceLister helps list and get ApiGatewayAuthorizers.
type ApiGatewayAuthorizerNamespaceLister interface {
	// List lists all ApiGatewayAuthorizers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayAuthorizer, err error)
	// Get retrieves the ApiGatewayAuthorizer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApiGatewayAuthorizer, error)
	ApiGatewayAuthorizerNamespaceListerExpansion
}

// apiGatewayAuthorizerNamespaceLister implements the ApiGatewayAuthorizerNamespaceLister
// interface.
type apiGatewayAuthorizerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiGatewayAuthorizers in the indexer for a given namespace.
func (s apiGatewayAuthorizerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiGatewayAuthorizer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiGatewayAuthorizer))
	})
	return ret, err
}

// Get retrieves the ApiGatewayAuthorizer from the indexer for a given namespace and name.
func (s apiGatewayAuthorizerNamespaceLister) Get(name string) (*v1alpha1.ApiGatewayAuthorizer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apigatewayauthorizer"), name)
	}
	return obj.(*v1alpha1.ApiGatewayAuthorizer), nil
}
