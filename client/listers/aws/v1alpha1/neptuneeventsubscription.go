/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// NeptuneEventSubscriptionLister helps list NeptuneEventSubscriptions.
type NeptuneEventSubscriptionLister interface {
	// List lists all NeptuneEventSubscriptions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NeptuneEventSubscription, err error)
	// NeptuneEventSubscriptions returns an object that can list and get NeptuneEventSubscriptions.
	NeptuneEventSubscriptions(namespace string) NeptuneEventSubscriptionNamespaceLister
	NeptuneEventSubscriptionListerExpansion
}

// neptuneEventSubscriptionLister implements the NeptuneEventSubscriptionLister interface.
type neptuneEventSubscriptionLister struct {
	indexer cache.Indexer
}

// NewNeptuneEventSubscriptionLister returns a new NeptuneEventSubscriptionLister.
func NewNeptuneEventSubscriptionLister(indexer cache.Indexer) NeptuneEventSubscriptionLister {
	return &neptuneEventSubscriptionLister{indexer: indexer}
}

// List lists all NeptuneEventSubscriptions in the indexer.
func (s *neptuneEventSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.NeptuneEventSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NeptuneEventSubscription))
	})
	return ret, err
}

// NeptuneEventSubscriptions returns an object that can list and get NeptuneEventSubscriptions.
func (s *neptuneEventSubscriptionLister) NeptuneEventSubscriptions(namespace string) NeptuneEventSubscriptionNamespaceLister {
	return neptuneEventSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NeptuneEventSubscriptionNamespaceLister helps list and get NeptuneEventSubscriptions.
type NeptuneEventSubscriptionNamespaceLister interface {
	// List lists all NeptuneEventSubscriptions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NeptuneEventSubscription, err error)
	// Get retrieves the NeptuneEventSubscription from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NeptuneEventSubscription, error)
	NeptuneEventSubscriptionNamespaceListerExpansion
}

// neptuneEventSubscriptionNamespaceLister implements the NeptuneEventSubscriptionNamespaceLister
// interface.
type neptuneEventSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NeptuneEventSubscriptions in the indexer for a given namespace.
func (s neptuneEventSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NeptuneEventSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NeptuneEventSubscription))
	})
	return ret, err
}

// Get retrieves the NeptuneEventSubscription from the indexer for a given namespace and name.
func (s neptuneEventSubscriptionNamespaceLister) Get(name string) (*v1alpha1.NeptuneEventSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("neptuneeventsubscription"), name)
	}
	return obj.(*v1alpha1.NeptuneEventSubscription), nil
}
