/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GameliftGameSessionQueueLister helps list GameliftGameSessionQueues.
type GameliftGameSessionQueueLister interface {
	// List lists all GameliftGameSessionQueues in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GameliftGameSessionQueue, err error)
	// GameliftGameSessionQueues returns an object that can list and get GameliftGameSessionQueues.
	GameliftGameSessionQueues(namespace string) GameliftGameSessionQueueNamespaceLister
	GameliftGameSessionQueueListerExpansion
}

// gameliftGameSessionQueueLister implements the GameliftGameSessionQueueLister interface.
type gameliftGameSessionQueueLister struct {
	indexer cache.Indexer
}

// NewGameliftGameSessionQueueLister returns a new GameliftGameSessionQueueLister.
func NewGameliftGameSessionQueueLister(indexer cache.Indexer) GameliftGameSessionQueueLister {
	return &gameliftGameSessionQueueLister{indexer: indexer}
}

// List lists all GameliftGameSessionQueues in the indexer.
func (s *gameliftGameSessionQueueLister) List(selector labels.Selector) (ret []*v1alpha1.GameliftGameSessionQueue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GameliftGameSessionQueue))
	})
	return ret, err
}

// GameliftGameSessionQueues returns an object that can list and get GameliftGameSessionQueues.
func (s *gameliftGameSessionQueueLister) GameliftGameSessionQueues(namespace string) GameliftGameSessionQueueNamespaceLister {
	return gameliftGameSessionQueueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GameliftGameSessionQueueNamespaceLister helps list and get GameliftGameSessionQueues.
type GameliftGameSessionQueueNamespaceLister interface {
	// List lists all GameliftGameSessionQueues in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GameliftGameSessionQueue, err error)
	// Get retrieves the GameliftGameSessionQueue from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GameliftGameSessionQueue, error)
	GameliftGameSessionQueueNamespaceListerExpansion
}

// gameliftGameSessionQueueNamespaceLister implements the GameliftGameSessionQueueNamespaceLister
// interface.
type gameliftGameSessionQueueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GameliftGameSessionQueues in the indexer for a given namespace.
func (s gameliftGameSessionQueueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GameliftGameSessionQueue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GameliftGameSessionQueue))
	})
	return ret, err
}

// Get retrieves the GameliftGameSessionQueue from the indexer for a given namespace and name.
func (s gameliftGameSessionQueueNamespaceLister) Get(name string) (*v1alpha1.GameliftGameSessionQueue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gameliftgamesessionqueue"), name)
	}
	return obj.(*v1alpha1.GameliftGameSessionQueue), nil
}
