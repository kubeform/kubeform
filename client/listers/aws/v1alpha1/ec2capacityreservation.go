/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ec2CapacityReservationLister helps list Ec2CapacityReservations.
type Ec2CapacityReservationLister interface {
	// List lists all Ec2CapacityReservations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Ec2CapacityReservation, err error)
	// Ec2CapacityReservations returns an object that can list and get Ec2CapacityReservations.
	Ec2CapacityReservations(namespace string) Ec2CapacityReservationNamespaceLister
	Ec2CapacityReservationListerExpansion
}

// ec2CapacityReservationLister implements the Ec2CapacityReservationLister interface.
type ec2CapacityReservationLister struct {
	indexer cache.Indexer
}

// NewEc2CapacityReservationLister returns a new Ec2CapacityReservationLister.
func NewEc2CapacityReservationLister(indexer cache.Indexer) Ec2CapacityReservationLister {
	return &ec2CapacityReservationLister{indexer: indexer}
}

// List lists all Ec2CapacityReservations in the indexer.
func (s *ec2CapacityReservationLister) List(selector labels.Selector) (ret []*v1alpha1.Ec2CapacityReservation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ec2CapacityReservation))
	})
	return ret, err
}

// Ec2CapacityReservations returns an object that can list and get Ec2CapacityReservations.
func (s *ec2CapacityReservationLister) Ec2CapacityReservations(namespace string) Ec2CapacityReservationNamespaceLister {
	return ec2CapacityReservationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ec2CapacityReservationNamespaceLister helps list and get Ec2CapacityReservations.
type Ec2CapacityReservationNamespaceLister interface {
	// List lists all Ec2CapacityReservations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Ec2CapacityReservation, err error)
	// Get retrieves the Ec2CapacityReservation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Ec2CapacityReservation, error)
	Ec2CapacityReservationNamespaceListerExpansion
}

// ec2CapacityReservationNamespaceLister implements the Ec2CapacityReservationNamespaceLister
// interface.
type ec2CapacityReservationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ec2CapacityReservations in the indexer for a given namespace.
func (s ec2CapacityReservationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ec2CapacityReservation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ec2CapacityReservation))
	})
	return ret, err
}

// Get retrieves the Ec2CapacityReservation from the indexer for a given namespace and name.
func (s ec2CapacityReservationNamespaceLister) Get(name string) (*v1alpha1.Ec2CapacityReservation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ec2capacityreservation"), name)
	}
	return obj.(*v1alpha1.Ec2CapacityReservation), nil
}
