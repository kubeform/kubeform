/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedshiftSnapshotScheduleLister helps list RedshiftSnapshotSchedules.
type RedshiftSnapshotScheduleLister interface {
	// List lists all RedshiftSnapshotSchedules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotSchedule, err error)
	// RedshiftSnapshotSchedules returns an object that can list and get RedshiftSnapshotSchedules.
	RedshiftSnapshotSchedules(namespace string) RedshiftSnapshotScheduleNamespaceLister
	RedshiftSnapshotScheduleListerExpansion
}

// redshiftSnapshotScheduleLister implements the RedshiftSnapshotScheduleLister interface.
type redshiftSnapshotScheduleLister struct {
	indexer cache.Indexer
}

// NewRedshiftSnapshotScheduleLister returns a new RedshiftSnapshotScheduleLister.
func NewRedshiftSnapshotScheduleLister(indexer cache.Indexer) RedshiftSnapshotScheduleLister {
	return &redshiftSnapshotScheduleLister{indexer: indexer}
}

// List lists all RedshiftSnapshotSchedules in the indexer.
func (s *redshiftSnapshotScheduleLister) List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedshiftSnapshotSchedule))
	})
	return ret, err
}

// RedshiftSnapshotSchedules returns an object that can list and get RedshiftSnapshotSchedules.
func (s *redshiftSnapshotScheduleLister) RedshiftSnapshotSchedules(namespace string) RedshiftSnapshotScheduleNamespaceLister {
	return redshiftSnapshotScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedshiftSnapshotScheduleNamespaceLister helps list and get RedshiftSnapshotSchedules.
type RedshiftSnapshotScheduleNamespaceLister interface {
	// List lists all RedshiftSnapshotSchedules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotSchedule, err error)
	// Get retrieves the RedshiftSnapshotSchedule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RedshiftSnapshotSchedule, error)
	RedshiftSnapshotScheduleNamespaceListerExpansion
}

// redshiftSnapshotScheduleNamespaceLister implements the RedshiftSnapshotScheduleNamespaceLister
// interface.
type redshiftSnapshotScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedshiftSnapshotSchedules in the indexer for a given namespace.
func (s redshiftSnapshotScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedshiftSnapshotSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedshiftSnapshotSchedule))
	})
	return ret, err
}

// Get retrieves the RedshiftSnapshotSchedule from the indexer for a given namespace and name.
func (s redshiftSnapshotScheduleNamespaceLister) Get(name string) (*v1alpha1.RedshiftSnapshotSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redshiftsnapshotschedule"), name)
	}
	return obj.(*v1alpha1.RedshiftSnapshotSchedule), nil
}
