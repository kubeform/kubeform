/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EcrRepositoryPolicyLister helps list EcrRepositoryPolicies.
type EcrRepositoryPolicyLister interface {
	// List lists all EcrRepositoryPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EcrRepositoryPolicy, err error)
	// EcrRepositoryPolicies returns an object that can list and get EcrRepositoryPolicies.
	EcrRepositoryPolicies(namespace string) EcrRepositoryPolicyNamespaceLister
	EcrRepositoryPolicyListerExpansion
}

// ecrRepositoryPolicyLister implements the EcrRepositoryPolicyLister interface.
type ecrRepositoryPolicyLister struct {
	indexer cache.Indexer
}

// NewEcrRepositoryPolicyLister returns a new EcrRepositoryPolicyLister.
func NewEcrRepositoryPolicyLister(indexer cache.Indexer) EcrRepositoryPolicyLister {
	return &ecrRepositoryPolicyLister{indexer: indexer}
}

// List lists all EcrRepositoryPolicies in the indexer.
func (s *ecrRepositoryPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.EcrRepositoryPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcrRepositoryPolicy))
	})
	return ret, err
}

// EcrRepositoryPolicies returns an object that can list and get EcrRepositoryPolicies.
func (s *ecrRepositoryPolicyLister) EcrRepositoryPolicies(namespace string) EcrRepositoryPolicyNamespaceLister {
	return ecrRepositoryPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EcrRepositoryPolicyNamespaceLister helps list and get EcrRepositoryPolicies.
type EcrRepositoryPolicyNamespaceLister interface {
	// List lists all EcrRepositoryPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EcrRepositoryPolicy, err error)
	// Get retrieves the EcrRepositoryPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EcrRepositoryPolicy, error)
	EcrRepositoryPolicyNamespaceListerExpansion
}

// ecrRepositoryPolicyNamespaceLister implements the EcrRepositoryPolicyNamespaceLister
// interface.
type ecrRepositoryPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EcrRepositoryPolicies in the indexer for a given namespace.
func (s ecrRepositoryPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EcrRepositoryPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcrRepositoryPolicy))
	})
	return ret, err
}

// Get retrieves the EcrRepositoryPolicy from the indexer for a given namespace and name.
func (s ecrRepositoryPolicyNamespaceLister) Get(name string) (*v1alpha1.EcrRepositoryPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ecrrepositorypolicy"), name)
	}
	return obj.(*v1alpha1.EcrRepositoryPolicy), nil
}
