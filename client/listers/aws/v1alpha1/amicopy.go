/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// AmiCopyLister helps list AmiCopies.
type AmiCopyLister interface {
	// List lists all AmiCopies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AmiCopy, err error)
	// AmiCopies returns an object that can list and get AmiCopies.
	AmiCopies(namespace string) AmiCopyNamespaceLister
	AmiCopyListerExpansion
}

// amiCopyLister implements the AmiCopyLister interface.
type amiCopyLister struct {
	indexer cache.Indexer
}

// NewAmiCopyLister returns a new AmiCopyLister.
func NewAmiCopyLister(indexer cache.Indexer) AmiCopyLister {
	return &amiCopyLister{indexer: indexer}
}

// List lists all AmiCopies in the indexer.
func (s *amiCopyLister) List(selector labels.Selector) (ret []*v1alpha1.AmiCopy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AmiCopy))
	})
	return ret, err
}

// AmiCopies returns an object that can list and get AmiCopies.
func (s *amiCopyLister) AmiCopies(namespace string) AmiCopyNamespaceLister {
	return amiCopyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AmiCopyNamespaceLister helps list and get AmiCopies.
type AmiCopyNamespaceLister interface {
	// List lists all AmiCopies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AmiCopy, err error)
	// Get retrieves the AmiCopy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AmiCopy, error)
	AmiCopyNamespaceListerExpansion
}

// amiCopyNamespaceLister implements the AmiCopyNamespaceLister
// interface.
type amiCopyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AmiCopies in the indexer for a given namespace.
func (s amiCopyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AmiCopy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AmiCopy))
	})
	return ret, err
}

// Get retrieves the AmiCopy from the indexer for a given namespace and name.
func (s amiCopyNamespaceLister) Get(name string) (*v1alpha1.AmiCopy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("amicopy"), name)
	}
	return obj.(*v1alpha1.AmiCopy), nil
}
