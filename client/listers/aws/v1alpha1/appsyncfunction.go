/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppsyncFunctionLister helps list AppsyncFunctions.
type AppsyncFunctionLister interface {
	// List lists all AppsyncFunctions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AppsyncFunction, err error)
	// AppsyncFunctions returns an object that can list and get AppsyncFunctions.
	AppsyncFunctions(namespace string) AppsyncFunctionNamespaceLister
	AppsyncFunctionListerExpansion
}

// appsyncFunctionLister implements the AppsyncFunctionLister interface.
type appsyncFunctionLister struct {
	indexer cache.Indexer
}

// NewAppsyncFunctionLister returns a new AppsyncFunctionLister.
func NewAppsyncFunctionLister(indexer cache.Indexer) AppsyncFunctionLister {
	return &appsyncFunctionLister{indexer: indexer}
}

// List lists all AppsyncFunctions in the indexer.
func (s *appsyncFunctionLister) List(selector labels.Selector) (ret []*v1alpha1.AppsyncFunction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppsyncFunction))
	})
	return ret, err
}

// AppsyncFunctions returns an object that can list and get AppsyncFunctions.
func (s *appsyncFunctionLister) AppsyncFunctions(namespace string) AppsyncFunctionNamespaceLister {
	return appsyncFunctionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppsyncFunctionNamespaceLister helps list and get AppsyncFunctions.
type AppsyncFunctionNamespaceLister interface {
	// List lists all AppsyncFunctions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AppsyncFunction, err error)
	// Get retrieves the AppsyncFunction from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AppsyncFunction, error)
	AppsyncFunctionNamespaceListerExpansion
}

// appsyncFunctionNamespaceLister implements the AppsyncFunctionNamespaceLister
// interface.
type appsyncFunctionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppsyncFunctions in the indexer for a given namespace.
func (s appsyncFunctionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppsyncFunction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppsyncFunction))
	})
	return ret, err
}

// Get retrieves the AppsyncFunction from the indexer for a given namespace and name.
func (s appsyncFunctionNamespaceLister) Get(name string) (*v1alpha1.AppsyncFunction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appsyncfunction"), name)
	}
	return obj.(*v1alpha1.AppsyncFunction), nil
}
