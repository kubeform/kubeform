/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NeptuneClusterInstanceLister helps list NeptuneClusterInstances.
type NeptuneClusterInstanceLister interface {
	// List lists all NeptuneClusterInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NeptuneClusterInstance, err error)
	// NeptuneClusterInstances returns an object that can list and get NeptuneClusterInstances.
	NeptuneClusterInstances(namespace string) NeptuneClusterInstanceNamespaceLister
	NeptuneClusterInstanceListerExpansion
}

// neptuneClusterInstanceLister implements the NeptuneClusterInstanceLister interface.
type neptuneClusterInstanceLister struct {
	indexer cache.Indexer
}

// NewNeptuneClusterInstanceLister returns a new NeptuneClusterInstanceLister.
func NewNeptuneClusterInstanceLister(indexer cache.Indexer) NeptuneClusterInstanceLister {
	return &neptuneClusterInstanceLister{indexer: indexer}
}

// List lists all NeptuneClusterInstances in the indexer.
func (s *neptuneClusterInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.NeptuneClusterInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NeptuneClusterInstance))
	})
	return ret, err
}

// NeptuneClusterInstances returns an object that can list and get NeptuneClusterInstances.
func (s *neptuneClusterInstanceLister) NeptuneClusterInstances(namespace string) NeptuneClusterInstanceNamespaceLister {
	return neptuneClusterInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NeptuneClusterInstanceNamespaceLister helps list and get NeptuneClusterInstances.
type NeptuneClusterInstanceNamespaceLister interface {
	// List lists all NeptuneClusterInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NeptuneClusterInstance, err error)
	// Get retrieves the NeptuneClusterInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NeptuneClusterInstance, error)
	NeptuneClusterInstanceNamespaceListerExpansion
}

// neptuneClusterInstanceNamespaceLister implements the NeptuneClusterInstanceNamespaceLister
// interface.
type neptuneClusterInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NeptuneClusterInstances in the indexer for a given namespace.
func (s neptuneClusterInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NeptuneClusterInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NeptuneClusterInstance))
	})
	return ret, err
}

// Get retrieves the NeptuneClusterInstance from the indexer for a given namespace and name.
func (s neptuneClusterInstanceNamespaceLister) Get(name string) (*v1alpha1.NeptuneClusterInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("neptuneclusterinstance"), name)
	}
	return obj.(*v1alpha1.NeptuneClusterInstance), nil
}
