/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LightsailStaticIPLister helps list LightsailStaticIPs.
type LightsailStaticIPLister interface {
	// List lists all LightsailStaticIPs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIP, err error)
	// LightsailStaticIPs returns an object that can list and get LightsailStaticIPs.
	LightsailStaticIPs(namespace string) LightsailStaticIPNamespaceLister
	LightsailStaticIPListerExpansion
}

// lightsailStaticIPLister implements the LightsailStaticIPLister interface.
type lightsailStaticIPLister struct {
	indexer cache.Indexer
}

// NewLightsailStaticIPLister returns a new LightsailStaticIPLister.
func NewLightsailStaticIPLister(indexer cache.Indexer) LightsailStaticIPLister {
	return &lightsailStaticIPLister{indexer: indexer}
}

// List lists all LightsailStaticIPs in the indexer.
func (s *lightsailStaticIPLister) List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LightsailStaticIP))
	})
	return ret, err
}

// LightsailStaticIPs returns an object that can list and get LightsailStaticIPs.
func (s *lightsailStaticIPLister) LightsailStaticIPs(namespace string) LightsailStaticIPNamespaceLister {
	return lightsailStaticIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LightsailStaticIPNamespaceLister helps list and get LightsailStaticIPs.
type LightsailStaticIPNamespaceLister interface {
	// List lists all LightsailStaticIPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIP, err error)
	// Get retrieves the LightsailStaticIP from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LightsailStaticIP, error)
	LightsailStaticIPNamespaceListerExpansion
}

// lightsailStaticIPNamespaceLister implements the LightsailStaticIPNamespaceLister
// interface.
type lightsailStaticIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LightsailStaticIPs in the indexer for a given namespace.
func (s lightsailStaticIPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LightsailStaticIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LightsailStaticIP))
	})
	return ret, err
}

// Get retrieves the LightsailStaticIP from the indexer for a given namespace and name.
func (s lightsailStaticIPNamespaceLister) Get(name string) (*v1alpha1.LightsailStaticIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lightsailstaticip"), name)
	}
	return obj.(*v1alpha1.LightsailStaticIP), nil
}
