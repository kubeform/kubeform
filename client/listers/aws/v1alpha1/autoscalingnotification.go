/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// AutoscalingNotificationLister helps list AutoscalingNotifications.
type AutoscalingNotificationLister interface {
	// List lists all AutoscalingNotifications in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AutoscalingNotification, err error)
	// AutoscalingNotifications returns an object that can list and get AutoscalingNotifications.
	AutoscalingNotifications(namespace string) AutoscalingNotificationNamespaceLister
	AutoscalingNotificationListerExpansion
}

// autoscalingNotificationLister implements the AutoscalingNotificationLister interface.
type autoscalingNotificationLister struct {
	indexer cache.Indexer
}

// NewAutoscalingNotificationLister returns a new AutoscalingNotificationLister.
func NewAutoscalingNotificationLister(indexer cache.Indexer) AutoscalingNotificationLister {
	return &autoscalingNotificationLister{indexer: indexer}
}

// List lists all AutoscalingNotifications in the indexer.
func (s *autoscalingNotificationLister) List(selector labels.Selector) (ret []*v1alpha1.AutoscalingNotification, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoscalingNotification))
	})
	return ret, err
}

// AutoscalingNotifications returns an object that can list and get AutoscalingNotifications.
func (s *autoscalingNotificationLister) AutoscalingNotifications(namespace string) AutoscalingNotificationNamespaceLister {
	return autoscalingNotificationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutoscalingNotificationNamespaceLister helps list and get AutoscalingNotifications.
type AutoscalingNotificationNamespaceLister interface {
	// List lists all AutoscalingNotifications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AutoscalingNotification, err error)
	// Get retrieves the AutoscalingNotification from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AutoscalingNotification, error)
	AutoscalingNotificationNamespaceListerExpansion
}

// autoscalingNotificationNamespaceLister implements the AutoscalingNotificationNamespaceLister
// interface.
type autoscalingNotificationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutoscalingNotifications in the indexer for a given namespace.
func (s autoscalingNotificationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutoscalingNotification, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoscalingNotification))
	})
	return ret, err
}

// Get retrieves the AutoscalingNotification from the indexer for a given namespace and name.
func (s autoscalingNotificationNamespaceLister) Get(name string) (*v1alpha1.AutoscalingNotification, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("autoscalingnotification"), name)
	}
	return obj.(*v1alpha1.AutoscalingNotification), nil
}
