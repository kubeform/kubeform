/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// CloudwatchLogDestinationPolicyLister helps list CloudwatchLogDestinationPolicies.
type CloudwatchLogDestinationPolicyLister interface {
	// List lists all CloudwatchLogDestinationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CloudwatchLogDestinationPolicy, err error)
	// CloudwatchLogDestinationPolicies returns an object that can list and get CloudwatchLogDestinationPolicies.
	CloudwatchLogDestinationPolicies(namespace string) CloudwatchLogDestinationPolicyNamespaceLister
	CloudwatchLogDestinationPolicyListerExpansion
}

// cloudwatchLogDestinationPolicyLister implements the CloudwatchLogDestinationPolicyLister interface.
type cloudwatchLogDestinationPolicyLister struct {
	indexer cache.Indexer
}

// NewCloudwatchLogDestinationPolicyLister returns a new CloudwatchLogDestinationPolicyLister.
func NewCloudwatchLogDestinationPolicyLister(indexer cache.Indexer) CloudwatchLogDestinationPolicyLister {
	return &cloudwatchLogDestinationPolicyLister{indexer: indexer}
}

// List lists all CloudwatchLogDestinationPolicies in the indexer.
func (s *cloudwatchLogDestinationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.CloudwatchLogDestinationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudwatchLogDestinationPolicy))
	})
	return ret, err
}

// CloudwatchLogDestinationPolicies returns an object that can list and get CloudwatchLogDestinationPolicies.
func (s *cloudwatchLogDestinationPolicyLister) CloudwatchLogDestinationPolicies(namespace string) CloudwatchLogDestinationPolicyNamespaceLister {
	return cloudwatchLogDestinationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudwatchLogDestinationPolicyNamespaceLister helps list and get CloudwatchLogDestinationPolicies.
type CloudwatchLogDestinationPolicyNamespaceLister interface {
	// List lists all CloudwatchLogDestinationPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CloudwatchLogDestinationPolicy, err error)
	// Get retrieves the CloudwatchLogDestinationPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CloudwatchLogDestinationPolicy, error)
	CloudwatchLogDestinationPolicyNamespaceListerExpansion
}

// cloudwatchLogDestinationPolicyNamespaceLister implements the CloudwatchLogDestinationPolicyNamespaceLister
// interface.
type cloudwatchLogDestinationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudwatchLogDestinationPolicies in the indexer for a given namespace.
func (s cloudwatchLogDestinationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudwatchLogDestinationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudwatchLogDestinationPolicy))
	})
	return ret, err
}

// Get retrieves the CloudwatchLogDestinationPolicy from the indexer for a given namespace and name.
func (s cloudwatchLogDestinationPolicyNamespaceLister) Get(name string) (*v1alpha1.CloudwatchLogDestinationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudwatchlogdestinationpolicy"), name)
	}
	return obj.(*v1alpha1.CloudwatchLogDestinationPolicy), nil
}
