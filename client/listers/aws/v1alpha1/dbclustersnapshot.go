/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DbClusterSnapshotLister helps list DbClusterSnapshots.
type DbClusterSnapshotLister interface {
	// List lists all DbClusterSnapshots in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DbClusterSnapshot, err error)
	// DbClusterSnapshots returns an object that can list and get DbClusterSnapshots.
	DbClusterSnapshots(namespace string) DbClusterSnapshotNamespaceLister
	DbClusterSnapshotListerExpansion
}

// dbClusterSnapshotLister implements the DbClusterSnapshotLister interface.
type dbClusterSnapshotLister struct {
	indexer cache.Indexer
}

// NewDbClusterSnapshotLister returns a new DbClusterSnapshotLister.
func NewDbClusterSnapshotLister(indexer cache.Indexer) DbClusterSnapshotLister {
	return &dbClusterSnapshotLister{indexer: indexer}
}

// List lists all DbClusterSnapshots in the indexer.
func (s *dbClusterSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.DbClusterSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DbClusterSnapshot))
	})
	return ret, err
}

// DbClusterSnapshots returns an object that can list and get DbClusterSnapshots.
func (s *dbClusterSnapshotLister) DbClusterSnapshots(namespace string) DbClusterSnapshotNamespaceLister {
	return dbClusterSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DbClusterSnapshotNamespaceLister helps list and get DbClusterSnapshots.
type DbClusterSnapshotNamespaceLister interface {
	// List lists all DbClusterSnapshots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DbClusterSnapshot, err error)
	// Get retrieves the DbClusterSnapshot from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DbClusterSnapshot, error)
	DbClusterSnapshotNamespaceListerExpansion
}

// dbClusterSnapshotNamespaceLister implements the DbClusterSnapshotNamespaceLister
// interface.
type dbClusterSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DbClusterSnapshots in the indexer for a given namespace.
func (s dbClusterSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DbClusterSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DbClusterSnapshot))
	})
	return ret, err
}

// Get retrieves the DbClusterSnapshot from the indexer for a given namespace and name.
func (s dbClusterSnapshotNamespaceLister) Get(name string) (*v1alpha1.DbClusterSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dbclustersnapshot"), name)
	}
	return obj.(*v1alpha1.DbClusterSnapshot), nil
}
