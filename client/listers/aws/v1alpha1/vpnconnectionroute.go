/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpnConnectionRouteLister helps list VpnConnectionRoutes.
type VpnConnectionRouteLister interface {
	// List lists all VpnConnectionRoutes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VpnConnectionRoute, err error)
	// VpnConnectionRoutes returns an object that can list and get VpnConnectionRoutes.
	VpnConnectionRoutes(namespace string) VpnConnectionRouteNamespaceLister
	VpnConnectionRouteListerExpansion
}

// vpnConnectionRouteLister implements the VpnConnectionRouteLister interface.
type vpnConnectionRouteLister struct {
	indexer cache.Indexer
}

// NewVpnConnectionRouteLister returns a new VpnConnectionRouteLister.
func NewVpnConnectionRouteLister(indexer cache.Indexer) VpnConnectionRouteLister {
	return &vpnConnectionRouteLister{indexer: indexer}
}

// List lists all VpnConnectionRoutes in the indexer.
func (s *vpnConnectionRouteLister) List(selector labels.Selector) (ret []*v1alpha1.VpnConnectionRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnConnectionRoute))
	})
	return ret, err
}

// VpnConnectionRoutes returns an object that can list and get VpnConnectionRoutes.
func (s *vpnConnectionRouteLister) VpnConnectionRoutes(namespace string) VpnConnectionRouteNamespaceLister {
	return vpnConnectionRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpnConnectionRouteNamespaceLister helps list and get VpnConnectionRoutes.
type VpnConnectionRouteNamespaceLister interface {
	// List lists all VpnConnectionRoutes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VpnConnectionRoute, err error)
	// Get retrieves the VpnConnectionRoute from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VpnConnectionRoute, error)
	VpnConnectionRouteNamespaceListerExpansion
}

// vpnConnectionRouteNamespaceLister implements the VpnConnectionRouteNamespaceLister
// interface.
type vpnConnectionRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpnConnectionRoutes in the indexer for a given namespace.
func (s vpnConnectionRouteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpnConnectionRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnConnectionRoute))
	})
	return ret, err
}

// Get retrieves the VpnConnectionRoute from the indexer for a given namespace and name.
func (s vpnConnectionRouteNamespaceLister) Get(name string) (*v1alpha1.VpnConnectionRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpnconnectionroute"), name)
	}
	return obj.(*v1alpha1.VpnConnectionRoute), nil
}
