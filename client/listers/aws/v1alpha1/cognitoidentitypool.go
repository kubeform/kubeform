/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// CognitoIdentityPoolLister helps list CognitoIdentityPools.
type CognitoIdentityPoolLister interface {
	// List lists all CognitoIdentityPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityPool, err error)
	// CognitoIdentityPools returns an object that can list and get CognitoIdentityPools.
	CognitoIdentityPools(namespace string) CognitoIdentityPoolNamespaceLister
	CognitoIdentityPoolListerExpansion
}

// cognitoIdentityPoolLister implements the CognitoIdentityPoolLister interface.
type cognitoIdentityPoolLister struct {
	indexer cache.Indexer
}

// NewCognitoIdentityPoolLister returns a new CognitoIdentityPoolLister.
func NewCognitoIdentityPoolLister(indexer cache.Indexer) CognitoIdentityPoolLister {
	return &cognitoIdentityPoolLister{indexer: indexer}
}

// List lists all CognitoIdentityPools in the indexer.
func (s *cognitoIdentityPoolLister) List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CognitoIdentityPool))
	})
	return ret, err
}

// CognitoIdentityPools returns an object that can list and get CognitoIdentityPools.
func (s *cognitoIdentityPoolLister) CognitoIdentityPools(namespace string) CognitoIdentityPoolNamespaceLister {
	return cognitoIdentityPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CognitoIdentityPoolNamespaceLister helps list and get CognitoIdentityPools.
type CognitoIdentityPoolNamespaceLister interface {
	// List lists all CognitoIdentityPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityPool, err error)
	// Get retrieves the CognitoIdentityPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CognitoIdentityPool, error)
	CognitoIdentityPoolNamespaceListerExpansion
}

// cognitoIdentityPoolNamespaceLister implements the CognitoIdentityPoolNamespaceLister
// interface.
type cognitoIdentityPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CognitoIdentityPools in the indexer for a given namespace.
func (s cognitoIdentityPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CognitoIdentityPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CognitoIdentityPool))
	})
	return ret, err
}

// Get retrieves the CognitoIdentityPool from the indexer for a given namespace and name.
func (s cognitoIdentityPoolNamespaceLister) Get(name string) (*v1alpha1.CognitoIdentityPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cognitoidentitypool"), name)
	}
	return obj.(*v1alpha1.CognitoIdentityPool), nil
}
