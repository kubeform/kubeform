/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupVaultLister helps list BackupVaults.
type BackupVaultLister interface {
	// List lists all BackupVaults in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BackupVault, err error)
	// BackupVaults returns an object that can list and get BackupVaults.
	BackupVaults(namespace string) BackupVaultNamespaceLister
	BackupVaultListerExpansion
}

// backupVaultLister implements the BackupVaultLister interface.
type backupVaultLister struct {
	indexer cache.Indexer
}

// NewBackupVaultLister returns a new BackupVaultLister.
func NewBackupVaultLister(indexer cache.Indexer) BackupVaultLister {
	return &backupVaultLister{indexer: indexer}
}

// List lists all BackupVaults in the indexer.
func (s *backupVaultLister) List(selector labels.Selector) (ret []*v1alpha1.BackupVault, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupVault))
	})
	return ret, err
}

// BackupVaults returns an object that can list and get BackupVaults.
func (s *backupVaultLister) BackupVaults(namespace string) BackupVaultNamespaceLister {
	return backupVaultNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupVaultNamespaceLister helps list and get BackupVaults.
type BackupVaultNamespaceLister interface {
	// List lists all BackupVaults in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BackupVault, err error)
	// Get retrieves the BackupVault from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BackupVault, error)
	BackupVaultNamespaceListerExpansion
}

// backupVaultNamespaceLister implements the BackupVaultNamespaceLister
// interface.
type backupVaultNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupVaults in the indexer for a given namespace.
func (s backupVaultNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupVault, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupVault))
	})
	return ret, err
}

// Get retrieves the BackupVault from the indexer for a given namespace and name.
func (s backupVaultNamespaceLister) Get(name string) (*v1alpha1.BackupVault, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backupvault"), name)
	}
	return obj.(*v1alpha1.BackupVault), nil
}
