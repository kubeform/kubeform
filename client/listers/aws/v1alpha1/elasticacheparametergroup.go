/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticacheParameterGroupLister helps list ElasticacheParameterGroups.
type ElasticacheParameterGroupLister interface {
	// List lists all ElasticacheParameterGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticacheParameterGroup, err error)
	// ElasticacheParameterGroups returns an object that can list and get ElasticacheParameterGroups.
	ElasticacheParameterGroups(namespace string) ElasticacheParameterGroupNamespaceLister
	ElasticacheParameterGroupListerExpansion
}

// elasticacheParameterGroupLister implements the ElasticacheParameterGroupLister interface.
type elasticacheParameterGroupLister struct {
	indexer cache.Indexer
}

// NewElasticacheParameterGroupLister returns a new ElasticacheParameterGroupLister.
func NewElasticacheParameterGroupLister(indexer cache.Indexer) ElasticacheParameterGroupLister {
	return &elasticacheParameterGroupLister{indexer: indexer}
}

// List lists all ElasticacheParameterGroups in the indexer.
func (s *elasticacheParameterGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticacheParameterGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticacheParameterGroup))
	})
	return ret, err
}

// ElasticacheParameterGroups returns an object that can list and get ElasticacheParameterGroups.
func (s *elasticacheParameterGroupLister) ElasticacheParameterGroups(namespace string) ElasticacheParameterGroupNamespaceLister {
	return elasticacheParameterGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticacheParameterGroupNamespaceLister helps list and get ElasticacheParameterGroups.
type ElasticacheParameterGroupNamespaceLister interface {
	// List lists all ElasticacheParameterGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticacheParameterGroup, err error)
	// Get retrieves the ElasticacheParameterGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ElasticacheParameterGroup, error)
	ElasticacheParameterGroupNamespaceListerExpansion
}

// elasticacheParameterGroupNamespaceLister implements the ElasticacheParameterGroupNamespaceLister
// interface.
type elasticacheParameterGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticacheParameterGroups in the indexer for a given namespace.
func (s elasticacheParameterGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticacheParameterGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticacheParameterGroup))
	})
	return ret, err
}

// Get retrieves the ElasticacheParameterGroup from the indexer for a given namespace and name.
func (s elasticacheParameterGroupNamespaceLister) Get(name string) (*v1alpha1.ElasticacheParameterGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticacheparametergroup"), name)
	}
	return obj.(*v1alpha1.ElasticacheParameterGroup), nil
}
