/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AmiFromInstanceLister helps list AmiFromInstances.
type AmiFromInstanceLister interface {
	// List lists all AmiFromInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AmiFromInstance, err error)
	// AmiFromInstances returns an object that can list and get AmiFromInstances.
	AmiFromInstances(namespace string) AmiFromInstanceNamespaceLister
	AmiFromInstanceListerExpansion
}

// amiFromInstanceLister implements the AmiFromInstanceLister interface.
type amiFromInstanceLister struct {
	indexer cache.Indexer
}

// NewAmiFromInstanceLister returns a new AmiFromInstanceLister.
func NewAmiFromInstanceLister(indexer cache.Indexer) AmiFromInstanceLister {
	return &amiFromInstanceLister{indexer: indexer}
}

// List lists all AmiFromInstances in the indexer.
func (s *amiFromInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.AmiFromInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AmiFromInstance))
	})
	return ret, err
}

// AmiFromInstances returns an object that can list and get AmiFromInstances.
func (s *amiFromInstanceLister) AmiFromInstances(namespace string) AmiFromInstanceNamespaceLister {
	return amiFromInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AmiFromInstanceNamespaceLister helps list and get AmiFromInstances.
type AmiFromInstanceNamespaceLister interface {
	// List lists all AmiFromInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AmiFromInstance, err error)
	// Get retrieves the AmiFromInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AmiFromInstance, error)
	AmiFromInstanceNamespaceListerExpansion
}

// amiFromInstanceNamespaceLister implements the AmiFromInstanceNamespaceLister
// interface.
type amiFromInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AmiFromInstances in the indexer for a given namespace.
func (s amiFromInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AmiFromInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AmiFromInstance))
	})
	return ret, err
}

// Get retrieves the AmiFromInstance from the indexer for a given namespace and name.
func (s amiFromInstanceNamespaceLister) Get(name string) (*v1alpha1.AmiFromInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("amifrominstance"), name)
	}
	return obj.(*v1alpha1.AmiFromInstance), nil
}
