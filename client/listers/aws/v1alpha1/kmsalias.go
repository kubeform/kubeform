/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KmsAliasLister helps list KmsAliases.
type KmsAliasLister interface {
	// List lists all KmsAliases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KmsAlias, err error)
	// KmsAliases returns an object that can list and get KmsAliases.
	KmsAliases(namespace string) KmsAliasNamespaceLister
	KmsAliasListerExpansion
}

// kmsAliasLister implements the KmsAliasLister interface.
type kmsAliasLister struct {
	indexer cache.Indexer
}

// NewKmsAliasLister returns a new KmsAliasLister.
func NewKmsAliasLister(indexer cache.Indexer) KmsAliasLister {
	return &kmsAliasLister{indexer: indexer}
}

// List lists all KmsAliases in the indexer.
func (s *kmsAliasLister) List(selector labels.Selector) (ret []*v1alpha1.KmsAlias, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KmsAlias))
	})
	return ret, err
}

// KmsAliases returns an object that can list and get KmsAliases.
func (s *kmsAliasLister) KmsAliases(namespace string) KmsAliasNamespaceLister {
	return kmsAliasNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KmsAliasNamespaceLister helps list and get KmsAliases.
type KmsAliasNamespaceLister interface {
	// List lists all KmsAliases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KmsAlias, err error)
	// Get retrieves the KmsAlias from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KmsAlias, error)
	KmsAliasNamespaceListerExpansion
}

// kmsAliasNamespaceLister implements the KmsAliasNamespaceLister
// interface.
type kmsAliasNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KmsAliases in the indexer for a given namespace.
func (s kmsAliasNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KmsAlias, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KmsAlias))
	})
	return ret, err
}

// Get retrieves the KmsAlias from the indexer for a given namespace and name.
func (s kmsAliasNamespaceLister) Get(name string) (*v1alpha1.KmsAlias, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kmsalias"), name)
	}
	return obj.(*v1alpha1.KmsAlias), nil
}
