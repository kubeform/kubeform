/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SagemakerModelLister helps list SagemakerModels.
type SagemakerModelLister interface {
	// List lists all SagemakerModels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SagemakerModel, err error)
	// SagemakerModels returns an object that can list and get SagemakerModels.
	SagemakerModels(namespace string) SagemakerModelNamespaceLister
	SagemakerModelListerExpansion
}

// sagemakerModelLister implements the SagemakerModelLister interface.
type sagemakerModelLister struct {
	indexer cache.Indexer
}

// NewSagemakerModelLister returns a new SagemakerModelLister.
func NewSagemakerModelLister(indexer cache.Indexer) SagemakerModelLister {
	return &sagemakerModelLister{indexer: indexer}
}

// List lists all SagemakerModels in the indexer.
func (s *sagemakerModelLister) List(selector labels.Selector) (ret []*v1alpha1.SagemakerModel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SagemakerModel))
	})
	return ret, err
}

// SagemakerModels returns an object that can list and get SagemakerModels.
func (s *sagemakerModelLister) SagemakerModels(namespace string) SagemakerModelNamespaceLister {
	return sagemakerModelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SagemakerModelNamespaceLister helps list and get SagemakerModels.
type SagemakerModelNamespaceLister interface {
	// List lists all SagemakerModels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SagemakerModel, err error)
	// Get retrieves the SagemakerModel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SagemakerModel, error)
	SagemakerModelNamespaceListerExpansion
}

// sagemakerModelNamespaceLister implements the SagemakerModelNamespaceLister
// interface.
type sagemakerModelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SagemakerModels in the indexer for a given namespace.
func (s sagemakerModelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SagemakerModel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SagemakerModel))
	})
	return ret, err
}

// Get retrieves the SagemakerModel from the indexer for a given namespace and name.
func (s sagemakerModelNamespaceLister) Get(name string) (*v1alpha1.SagemakerModel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sagemakermodel"), name)
	}
	return obj.(*v1alpha1.SagemakerModel), nil
}
