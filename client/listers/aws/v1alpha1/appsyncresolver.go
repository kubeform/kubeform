/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppsyncResolverLister helps list AppsyncResolvers.
type AppsyncResolverLister interface {
	// List lists all AppsyncResolvers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AppsyncResolver, err error)
	// AppsyncResolvers returns an object that can list and get AppsyncResolvers.
	AppsyncResolvers(namespace string) AppsyncResolverNamespaceLister
	AppsyncResolverListerExpansion
}

// appsyncResolverLister implements the AppsyncResolverLister interface.
type appsyncResolverLister struct {
	indexer cache.Indexer
}

// NewAppsyncResolverLister returns a new AppsyncResolverLister.
func NewAppsyncResolverLister(indexer cache.Indexer) AppsyncResolverLister {
	return &appsyncResolverLister{indexer: indexer}
}

// List lists all AppsyncResolvers in the indexer.
func (s *appsyncResolverLister) List(selector labels.Selector) (ret []*v1alpha1.AppsyncResolver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppsyncResolver))
	})
	return ret, err
}

// AppsyncResolvers returns an object that can list and get AppsyncResolvers.
func (s *appsyncResolverLister) AppsyncResolvers(namespace string) AppsyncResolverNamespaceLister {
	return appsyncResolverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppsyncResolverNamespaceLister helps list and get AppsyncResolvers.
type AppsyncResolverNamespaceLister interface {
	// List lists all AppsyncResolvers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AppsyncResolver, err error)
	// Get retrieves the AppsyncResolver from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AppsyncResolver, error)
	AppsyncResolverNamespaceListerExpansion
}

// appsyncResolverNamespaceLister implements the AppsyncResolverNamespaceLister
// interface.
type appsyncResolverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppsyncResolvers in the indexer for a given namespace.
func (s appsyncResolverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppsyncResolver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppsyncResolver))
	})
	return ret, err
}

// Get retrieves the AppsyncResolver from the indexer for a given namespace and name.
func (s appsyncResolverNamespaceLister) Get(name string) (*v1alpha1.AppsyncResolver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appsyncresolver"), name)
	}
	return obj.(*v1alpha1.AppsyncResolver), nil
}
