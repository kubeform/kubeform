/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigConfigurationRecorderLister helps list ConfigConfigurationRecorders.
type ConfigConfigurationRecorderLister interface {
	// List lists all ConfigConfigurationRecorders in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorder, err error)
	// ConfigConfigurationRecorders returns an object that can list and get ConfigConfigurationRecorders.
	ConfigConfigurationRecorders(namespace string) ConfigConfigurationRecorderNamespaceLister
	ConfigConfigurationRecorderListerExpansion
}

// configConfigurationRecorderLister implements the ConfigConfigurationRecorderLister interface.
type configConfigurationRecorderLister struct {
	indexer cache.Indexer
}

// NewConfigConfigurationRecorderLister returns a new ConfigConfigurationRecorderLister.
func NewConfigConfigurationRecorderLister(indexer cache.Indexer) ConfigConfigurationRecorderLister {
	return &configConfigurationRecorderLister{indexer: indexer}
}

// List lists all ConfigConfigurationRecorders in the indexer.
func (s *configConfigurationRecorderLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigConfigurationRecorder))
	})
	return ret, err
}

// ConfigConfigurationRecorders returns an object that can list and get ConfigConfigurationRecorders.
func (s *configConfigurationRecorderLister) ConfigConfigurationRecorders(namespace string) ConfigConfigurationRecorderNamespaceLister {
	return configConfigurationRecorderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigConfigurationRecorderNamespaceLister helps list and get ConfigConfigurationRecorders.
type ConfigConfigurationRecorderNamespaceLister interface {
	// List lists all ConfigConfigurationRecorders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorder, err error)
	// Get retrieves the ConfigConfigurationRecorder from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigConfigurationRecorder, error)
	ConfigConfigurationRecorderNamespaceListerExpansion
}

// configConfigurationRecorderNamespaceLister implements the ConfigConfigurationRecorderNamespaceLister
// interface.
type configConfigurationRecorderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigConfigurationRecorders in the indexer for a given namespace.
func (s configConfigurationRecorderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigConfigurationRecorder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigConfigurationRecorder))
	})
	return ret, err
}

// Get retrieves the ConfigConfigurationRecorder from the indexer for a given namespace and name.
func (s configConfigurationRecorderNamespaceLister) Get(name string) (*v1alpha1.ConfigConfigurationRecorder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configconfigurationrecorder"), name)
	}
	return obj.(*v1alpha1.ConfigConfigurationRecorder), nil
}
