/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/digitalocean/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DropletSnapshotLister helps list DropletSnapshots.
type DropletSnapshotLister interface {
	// List lists all DropletSnapshots in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DropletSnapshot, err error)
	// DropletSnapshots returns an object that can list and get DropletSnapshots.
	DropletSnapshots(namespace string) DropletSnapshotNamespaceLister
	DropletSnapshotListerExpansion
}

// dropletSnapshotLister implements the DropletSnapshotLister interface.
type dropletSnapshotLister struct {
	indexer cache.Indexer
}

// NewDropletSnapshotLister returns a new DropletSnapshotLister.
func NewDropletSnapshotLister(indexer cache.Indexer) DropletSnapshotLister {
	return &dropletSnapshotLister{indexer: indexer}
}

// List lists all DropletSnapshots in the indexer.
func (s *dropletSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.DropletSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DropletSnapshot))
	})
	return ret, err
}

// DropletSnapshots returns an object that can list and get DropletSnapshots.
func (s *dropletSnapshotLister) DropletSnapshots(namespace string) DropletSnapshotNamespaceLister {
	return dropletSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DropletSnapshotNamespaceLister helps list and get DropletSnapshots.
type DropletSnapshotNamespaceLister interface {
	// List lists all DropletSnapshots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DropletSnapshot, err error)
	// Get retrieves the DropletSnapshot from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DropletSnapshot, error)
	DropletSnapshotNamespaceListerExpansion
}

// dropletSnapshotNamespaceLister implements the DropletSnapshotNamespaceLister
// interface.
type dropletSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DropletSnapshots in the indexer for a given namespace.
func (s dropletSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DropletSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DropletSnapshot))
	})
	return ret, err
}

// Get retrieves the DropletSnapshot from the indexer for a given namespace and name.
func (s dropletSnapshotNamespaceLister) Get(name string) (*v1alpha1.DropletSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dropletsnapshot"), name)
	}
	return obj.(*v1alpha1.DropletSnapshot), nil
}
