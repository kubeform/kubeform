/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/digitalocean/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseFirewallLister helps list DatabaseFirewalls.
type DatabaseFirewallLister interface {
	// List lists all DatabaseFirewalls in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseFirewall, err error)
	// DatabaseFirewalls returns an object that can list and get DatabaseFirewalls.
	DatabaseFirewalls(namespace string) DatabaseFirewallNamespaceLister
	DatabaseFirewallListerExpansion
}

// databaseFirewallLister implements the DatabaseFirewallLister interface.
type databaseFirewallLister struct {
	indexer cache.Indexer
}

// NewDatabaseFirewallLister returns a new DatabaseFirewallLister.
func NewDatabaseFirewallLister(indexer cache.Indexer) DatabaseFirewallLister {
	return &databaseFirewallLister{indexer: indexer}
}

// List lists all DatabaseFirewalls in the indexer.
func (s *databaseFirewallLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseFirewall, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseFirewall))
	})
	return ret, err
}

// DatabaseFirewalls returns an object that can list and get DatabaseFirewalls.
func (s *databaseFirewallLister) DatabaseFirewalls(namespace string) DatabaseFirewallNamespaceLister {
	return databaseFirewallNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseFirewallNamespaceLister helps list and get DatabaseFirewalls.
type DatabaseFirewallNamespaceLister interface {
	// List lists all DatabaseFirewalls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseFirewall, err error)
	// Get retrieves the DatabaseFirewall from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatabaseFirewall, error)
	DatabaseFirewallNamespaceListerExpansion
}

// databaseFirewallNamespaceLister implements the DatabaseFirewallNamespaceLister
// interface.
type databaseFirewallNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseFirewalls in the indexer for a given namespace.
func (s databaseFirewallNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseFirewall, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseFirewall))
	})
	return ret, err
}

// Get retrieves the DatabaseFirewall from the indexer for a given namespace and name.
func (s databaseFirewallNamespaceLister) Get(name string) (*v1alpha1.DatabaseFirewall, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databasefirewall"), name)
	}
	return obj.(*v1alpha1.DatabaseFirewall), nil
}
