/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/digitalocean/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseConnectionPoolLister helps list DatabaseConnectionPools.
type DatabaseConnectionPoolLister interface {
	// List lists all DatabaseConnectionPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseConnectionPool, err error)
	// DatabaseConnectionPools returns an object that can list and get DatabaseConnectionPools.
	DatabaseConnectionPools(namespace string) DatabaseConnectionPoolNamespaceLister
	DatabaseConnectionPoolListerExpansion
}

// databaseConnectionPoolLister implements the DatabaseConnectionPoolLister interface.
type databaseConnectionPoolLister struct {
	indexer cache.Indexer
}

// NewDatabaseConnectionPoolLister returns a new DatabaseConnectionPoolLister.
func NewDatabaseConnectionPoolLister(indexer cache.Indexer) DatabaseConnectionPoolLister {
	return &databaseConnectionPoolLister{indexer: indexer}
}

// List lists all DatabaseConnectionPools in the indexer.
func (s *databaseConnectionPoolLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseConnectionPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseConnectionPool))
	})
	return ret, err
}

// DatabaseConnectionPools returns an object that can list and get DatabaseConnectionPools.
func (s *databaseConnectionPoolLister) DatabaseConnectionPools(namespace string) DatabaseConnectionPoolNamespaceLister {
	return databaseConnectionPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseConnectionPoolNamespaceLister helps list and get DatabaseConnectionPools.
type DatabaseConnectionPoolNamespaceLister interface {
	// List lists all DatabaseConnectionPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseConnectionPool, err error)
	// Get retrieves the DatabaseConnectionPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatabaseConnectionPool, error)
	DatabaseConnectionPoolNamespaceListerExpansion
}

// databaseConnectionPoolNamespaceLister implements the DatabaseConnectionPoolNamespaceLister
// interface.
type databaseConnectionPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseConnectionPools in the indexer for a given namespace.
func (s databaseConnectionPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseConnectionPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseConnectionPool))
	})
	return ret, err
}

// Get retrieves the DatabaseConnectionPool from the indexer for a given namespace and name.
func (s databaseConnectionPoolNamespaceLister) Get(name string) (*v1alpha1.DatabaseConnectionPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaseconnectionpool"), name)
	}
	return obj.(*v1alpha1.DatabaseConnectionPool), nil
}
