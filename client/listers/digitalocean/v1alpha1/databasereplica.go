/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/kubeform/apis/digitalocean/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseReplicaLister helps list DatabaseReplicas.
type DatabaseReplicaLister interface {
	// List lists all DatabaseReplicas in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseReplica, err error)
	// DatabaseReplicas returns an object that can list and get DatabaseReplicas.
	DatabaseReplicas(namespace string) DatabaseReplicaNamespaceLister
	DatabaseReplicaListerExpansion
}

// databaseReplicaLister implements the DatabaseReplicaLister interface.
type databaseReplicaLister struct {
	indexer cache.Indexer
}

// NewDatabaseReplicaLister returns a new DatabaseReplicaLister.
func NewDatabaseReplicaLister(indexer cache.Indexer) DatabaseReplicaLister {
	return &databaseReplicaLister{indexer: indexer}
}

// List lists all DatabaseReplicas in the indexer.
func (s *databaseReplicaLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseReplica, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseReplica))
	})
	return ret, err
}

// DatabaseReplicas returns an object that can list and get DatabaseReplicas.
func (s *databaseReplicaLister) DatabaseReplicas(namespace string) DatabaseReplicaNamespaceLister {
	return databaseReplicaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseReplicaNamespaceLister helps list and get DatabaseReplicas.
type DatabaseReplicaNamespaceLister interface {
	// List lists all DatabaseReplicas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseReplica, err error)
	// Get retrieves the DatabaseReplica from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatabaseReplica, error)
	DatabaseReplicaNamespaceListerExpansion
}

// databaseReplicaNamespaceLister implements the DatabaseReplicaNamespaceLister
// interface.
type databaseReplicaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseReplicas in the indexer for a given namespace.
func (s databaseReplicaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseReplica, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseReplica))
	})
	return ret, err
}

// Get retrieves the DatabaseReplica from the indexer for a given namespace and name.
func (s databaseReplicaNamespaceLister) Get(name string) (*v1alpha1.DatabaseReplica, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databasereplica"), name)
	}
	return obj.(*v1alpha1.DatabaseReplica), nil
}
