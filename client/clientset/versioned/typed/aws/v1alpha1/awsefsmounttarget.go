/*
Copyright 2019 The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
	scheme "kubeform.dev/kubeform/client/clientset/versioned/scheme"
)

// AwsEfsMountTargetsGetter has a method to return a AwsEfsMountTargetInterface.
// A group's client should implement this interface.
type AwsEfsMountTargetsGetter interface {
	AwsEfsMountTargets() AwsEfsMountTargetInterface
}

// AwsEfsMountTargetInterface has methods to work with AwsEfsMountTarget resources.
type AwsEfsMountTargetInterface interface {
	Create(*v1alpha1.AwsEfsMountTarget) (*v1alpha1.AwsEfsMountTarget, error)
	Update(*v1alpha1.AwsEfsMountTarget) (*v1alpha1.AwsEfsMountTarget, error)
	UpdateStatus(*v1alpha1.AwsEfsMountTarget) (*v1alpha1.AwsEfsMountTarget, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AwsEfsMountTarget, error)
	List(opts v1.ListOptions) (*v1alpha1.AwsEfsMountTargetList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsEfsMountTarget, err error)
	AwsEfsMountTargetExpansion
}

// awsEfsMountTargets implements AwsEfsMountTargetInterface
type awsEfsMountTargets struct {
	client rest.Interface
}

// newAwsEfsMountTargets returns a AwsEfsMountTargets
func newAwsEfsMountTargets(c *AwsV1alpha1Client) *awsEfsMountTargets {
	return &awsEfsMountTargets{
		client: c.RESTClient(),
	}
}

// Get takes name of the awsEfsMountTarget, and returns the corresponding awsEfsMountTarget object, and an error if there is any.
func (c *awsEfsMountTargets) Get(name string, options v1.GetOptions) (result *v1alpha1.AwsEfsMountTarget, err error) {
	result = &v1alpha1.AwsEfsMountTarget{}
	err = c.client.Get().
		Resource("awsefsmounttargets").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AwsEfsMountTargets that match those selectors.
func (c *awsEfsMountTargets) List(opts v1.ListOptions) (result *v1alpha1.AwsEfsMountTargetList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.AwsEfsMountTargetList{}
	err = c.client.Get().
		Resource("awsefsmounttargets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested awsEfsMountTargets.
func (c *awsEfsMountTargets) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("awsefsmounttargets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a awsEfsMountTarget and creates it.  Returns the server's representation of the awsEfsMountTarget, and an error, if there is any.
func (c *awsEfsMountTargets) Create(awsEfsMountTarget *v1alpha1.AwsEfsMountTarget) (result *v1alpha1.AwsEfsMountTarget, err error) {
	result = &v1alpha1.AwsEfsMountTarget{}
	err = c.client.Post().
		Resource("awsefsmounttargets").
		Body(awsEfsMountTarget).
		Do().
		Into(result)
	return
}

// Update takes the representation of a awsEfsMountTarget and updates it. Returns the server's representation of the awsEfsMountTarget, and an error, if there is any.
func (c *awsEfsMountTargets) Update(awsEfsMountTarget *v1alpha1.AwsEfsMountTarget) (result *v1alpha1.AwsEfsMountTarget, err error) {
	result = &v1alpha1.AwsEfsMountTarget{}
	err = c.client.Put().
		Resource("awsefsmounttargets").
		Name(awsEfsMountTarget.Name).
		Body(awsEfsMountTarget).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *awsEfsMountTargets) UpdateStatus(awsEfsMountTarget *v1alpha1.AwsEfsMountTarget) (result *v1alpha1.AwsEfsMountTarget, err error) {
	result = &v1alpha1.AwsEfsMountTarget{}
	err = c.client.Put().
		Resource("awsefsmounttargets").
		Name(awsEfsMountTarget.Name).
		SubResource("status").
		Body(awsEfsMountTarget).
		Do().
		Into(result)
	return
}

// Delete takes name of the awsEfsMountTarget and deletes it. Returns an error if one occurs.
func (c *awsEfsMountTargets) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("awsefsmounttargets").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *awsEfsMountTargets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("awsefsmounttargets").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched awsEfsMountTarget.
func (c *awsEfsMountTargets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsEfsMountTarget, err error) {
	result = &v1alpha1.AwsEfsMountTarget{}
	err = c.client.Patch(pt).
		Resource("awsefsmounttargets").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
