/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
	scheme "kubeform.dev/kubeform/client/clientset/versioned/scheme"
)

// AwsAppCookieStickinessPoliciesGetter has a method to return a AwsAppCookieStickinessPolicyInterface.
// A group's client should implement this interface.
type AwsAppCookieStickinessPoliciesGetter interface {
	AwsAppCookieStickinessPolicies() AwsAppCookieStickinessPolicyInterface
}

// AwsAppCookieStickinessPolicyInterface has methods to work with AwsAppCookieStickinessPolicy resources.
type AwsAppCookieStickinessPolicyInterface interface {
	Create(*v1alpha1.AwsAppCookieStickinessPolicy) (*v1alpha1.AwsAppCookieStickinessPolicy, error)
	Update(*v1alpha1.AwsAppCookieStickinessPolicy) (*v1alpha1.AwsAppCookieStickinessPolicy, error)
	UpdateStatus(*v1alpha1.AwsAppCookieStickinessPolicy) (*v1alpha1.AwsAppCookieStickinessPolicy, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AwsAppCookieStickinessPolicy, error)
	List(opts v1.ListOptions) (*v1alpha1.AwsAppCookieStickinessPolicyList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsAppCookieStickinessPolicy, err error)
	AwsAppCookieStickinessPolicyExpansion
}

// awsAppCookieStickinessPolicies implements AwsAppCookieStickinessPolicyInterface
type awsAppCookieStickinessPolicies struct {
	client rest.Interface
}

// newAwsAppCookieStickinessPolicies returns a AwsAppCookieStickinessPolicies
func newAwsAppCookieStickinessPolicies(c *AwsV1alpha1Client) *awsAppCookieStickinessPolicies {
	return &awsAppCookieStickinessPolicies{
		client: c.RESTClient(),
	}
}

// Get takes name of the awsAppCookieStickinessPolicy, and returns the corresponding awsAppCookieStickinessPolicy object, and an error if there is any.
func (c *awsAppCookieStickinessPolicies) Get(name string, options v1.GetOptions) (result *v1alpha1.AwsAppCookieStickinessPolicy, err error) {
	result = &v1alpha1.AwsAppCookieStickinessPolicy{}
	err = c.client.Get().
		Resource("awsappcookiestickinesspolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AwsAppCookieStickinessPolicies that match those selectors.
func (c *awsAppCookieStickinessPolicies) List(opts v1.ListOptions) (result *v1alpha1.AwsAppCookieStickinessPolicyList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.AwsAppCookieStickinessPolicyList{}
	err = c.client.Get().
		Resource("awsappcookiestickinesspolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested awsAppCookieStickinessPolicies.
func (c *awsAppCookieStickinessPolicies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("awsappcookiestickinesspolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a awsAppCookieStickinessPolicy and creates it.  Returns the server's representation of the awsAppCookieStickinessPolicy, and an error, if there is any.
func (c *awsAppCookieStickinessPolicies) Create(awsAppCookieStickinessPolicy *v1alpha1.AwsAppCookieStickinessPolicy) (result *v1alpha1.AwsAppCookieStickinessPolicy, err error) {
	result = &v1alpha1.AwsAppCookieStickinessPolicy{}
	err = c.client.Post().
		Resource("awsappcookiestickinesspolicies").
		Body(awsAppCookieStickinessPolicy).
		Do().
		Into(result)
	return
}

// Update takes the representation of a awsAppCookieStickinessPolicy and updates it. Returns the server's representation of the awsAppCookieStickinessPolicy, and an error, if there is any.
func (c *awsAppCookieStickinessPolicies) Update(awsAppCookieStickinessPolicy *v1alpha1.AwsAppCookieStickinessPolicy) (result *v1alpha1.AwsAppCookieStickinessPolicy, err error) {
	result = &v1alpha1.AwsAppCookieStickinessPolicy{}
	err = c.client.Put().
		Resource("awsappcookiestickinesspolicies").
		Name(awsAppCookieStickinessPolicy.Name).
		Body(awsAppCookieStickinessPolicy).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *awsAppCookieStickinessPolicies) UpdateStatus(awsAppCookieStickinessPolicy *v1alpha1.AwsAppCookieStickinessPolicy) (result *v1alpha1.AwsAppCookieStickinessPolicy, err error) {
	result = &v1alpha1.AwsAppCookieStickinessPolicy{}
	err = c.client.Put().
		Resource("awsappcookiestickinesspolicies").
		Name(awsAppCookieStickinessPolicy.Name).
		SubResource("status").
		Body(awsAppCookieStickinessPolicy).
		Do().
		Into(result)
	return
}

// Delete takes name of the awsAppCookieStickinessPolicy and deletes it. Returns an error if one occurs.
func (c *awsAppCookieStickinessPolicies) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("awsappcookiestickinesspolicies").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *awsAppCookieStickinessPolicies) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("awsappcookiestickinesspolicies").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched awsAppCookieStickinessPolicy.
func (c *awsAppCookieStickinessPolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsAppCookieStickinessPolicy, err error) {
	result = &v1alpha1.AwsAppCookieStickinessPolicy{}
	err = c.client.Patch(pt).
		Resource("awsappcookiestickinesspolicies").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
