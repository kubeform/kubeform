/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
	scheme "kubeform.dev/kubeform/client/clientset/versioned/scheme"
)

// AwsConfigConfigurationRecorderStatusesGetter has a method to return a AwsConfigConfigurationRecorderStatusInterface.
// A group's client should implement this interface.
type AwsConfigConfigurationRecorderStatusesGetter interface {
	AwsConfigConfigurationRecorderStatuses() AwsConfigConfigurationRecorderStatusInterface
}

// AwsConfigConfigurationRecorderStatusInterface has methods to work with AwsConfigConfigurationRecorderStatus resources.
type AwsConfigConfigurationRecorderStatusInterface interface {
	Create(*v1alpha1.AwsConfigConfigurationRecorderStatus) (*v1alpha1.AwsConfigConfigurationRecorderStatus, error)
	Update(*v1alpha1.AwsConfigConfigurationRecorderStatus) (*v1alpha1.AwsConfigConfigurationRecorderStatus, error)
	UpdateStatus(*v1alpha1.AwsConfigConfigurationRecorderStatus) (*v1alpha1.AwsConfigConfigurationRecorderStatus, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AwsConfigConfigurationRecorderStatus, error)
	List(opts v1.ListOptions) (*v1alpha1.AwsConfigConfigurationRecorderStatusList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsConfigConfigurationRecorderStatus, err error)
	AwsConfigConfigurationRecorderStatusExpansion
}

// awsConfigConfigurationRecorderStatuses implements AwsConfigConfigurationRecorderStatusInterface
type awsConfigConfigurationRecorderStatuses struct {
	client rest.Interface
}

// newAwsConfigConfigurationRecorderStatuses returns a AwsConfigConfigurationRecorderStatuses
func newAwsConfigConfigurationRecorderStatuses(c *AwsV1alpha1Client) *awsConfigConfigurationRecorderStatuses {
	return &awsConfigConfigurationRecorderStatuses{
		client: c.RESTClient(),
	}
}

// Get takes name of the awsConfigConfigurationRecorderStatus, and returns the corresponding awsConfigConfigurationRecorderStatus object, and an error if there is any.
func (c *awsConfigConfigurationRecorderStatuses) Get(name string, options v1.GetOptions) (result *v1alpha1.AwsConfigConfigurationRecorderStatus, err error) {
	result = &v1alpha1.AwsConfigConfigurationRecorderStatus{}
	err = c.client.Get().
		Resource("awsconfigconfigurationrecorderstatuses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AwsConfigConfigurationRecorderStatuses that match those selectors.
func (c *awsConfigConfigurationRecorderStatuses) List(opts v1.ListOptions) (result *v1alpha1.AwsConfigConfigurationRecorderStatusList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.AwsConfigConfigurationRecorderStatusList{}
	err = c.client.Get().
		Resource("awsconfigconfigurationrecorderstatuses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested awsConfigConfigurationRecorderStatuses.
func (c *awsConfigConfigurationRecorderStatuses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("awsconfigconfigurationrecorderstatuses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a awsConfigConfigurationRecorderStatus and creates it.  Returns the server's representation of the awsConfigConfigurationRecorderStatus, and an error, if there is any.
func (c *awsConfigConfigurationRecorderStatuses) Create(awsConfigConfigurationRecorderStatus *v1alpha1.AwsConfigConfigurationRecorderStatus) (result *v1alpha1.AwsConfigConfigurationRecorderStatus, err error) {
	result = &v1alpha1.AwsConfigConfigurationRecorderStatus{}
	err = c.client.Post().
		Resource("awsconfigconfigurationrecorderstatuses").
		Body(awsConfigConfigurationRecorderStatus).
		Do().
		Into(result)
	return
}

// Update takes the representation of a awsConfigConfigurationRecorderStatus and updates it. Returns the server's representation of the awsConfigConfigurationRecorderStatus, and an error, if there is any.
func (c *awsConfigConfigurationRecorderStatuses) Update(awsConfigConfigurationRecorderStatus *v1alpha1.AwsConfigConfigurationRecorderStatus) (result *v1alpha1.AwsConfigConfigurationRecorderStatus, err error) {
	result = &v1alpha1.AwsConfigConfigurationRecorderStatus{}
	err = c.client.Put().
		Resource("awsconfigconfigurationrecorderstatuses").
		Name(awsConfigConfigurationRecorderStatus.Name).
		Body(awsConfigConfigurationRecorderStatus).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *awsConfigConfigurationRecorderStatuses) UpdateStatus(awsConfigConfigurationRecorderStatus *v1alpha1.AwsConfigConfigurationRecorderStatus) (result *v1alpha1.AwsConfigConfigurationRecorderStatus, err error) {
	result = &v1alpha1.AwsConfigConfigurationRecorderStatus{}
	err = c.client.Put().
		Resource("awsconfigconfigurationrecorderstatuses").
		Name(awsConfigConfigurationRecorderStatus.Name).
		SubResource("status").
		Body(awsConfigConfigurationRecorderStatus).
		Do().
		Into(result)
	return
}

// Delete takes name of the awsConfigConfigurationRecorderStatus and deletes it. Returns an error if one occurs.
func (c *awsConfigConfigurationRecorderStatuses) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("awsconfigconfigurationrecorderstatuses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *awsConfigConfigurationRecorderStatuses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("awsconfigconfigurationrecorderstatuses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched awsConfigConfigurationRecorderStatus.
func (c *awsConfigConfigurationRecorderStatuses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsConfigConfigurationRecorderStatus, err error) {
	result = &v1alpha1.AwsConfigConfigurationRecorderStatus{}
	err = c.client.Patch(pt).
		Resource("awsconfigconfigurationrecorderstatuses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
