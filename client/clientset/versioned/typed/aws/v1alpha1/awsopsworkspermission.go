/*
Copyright 2019 The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
	scheme "kubeform.dev/kubeform/client/clientset/versioned/scheme"
)

// AwsOpsworksPermissionsGetter has a method to return a AwsOpsworksPermissionInterface.
// A group's client should implement this interface.
type AwsOpsworksPermissionsGetter interface {
	AwsOpsworksPermissions() AwsOpsworksPermissionInterface
}

// AwsOpsworksPermissionInterface has methods to work with AwsOpsworksPermission resources.
type AwsOpsworksPermissionInterface interface {
	Create(*v1alpha1.AwsOpsworksPermission) (*v1alpha1.AwsOpsworksPermission, error)
	Update(*v1alpha1.AwsOpsworksPermission) (*v1alpha1.AwsOpsworksPermission, error)
	UpdateStatus(*v1alpha1.AwsOpsworksPermission) (*v1alpha1.AwsOpsworksPermission, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AwsOpsworksPermission, error)
	List(opts v1.ListOptions) (*v1alpha1.AwsOpsworksPermissionList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsOpsworksPermission, err error)
	AwsOpsworksPermissionExpansion
}

// awsOpsworksPermissions implements AwsOpsworksPermissionInterface
type awsOpsworksPermissions struct {
	client rest.Interface
}

// newAwsOpsworksPermissions returns a AwsOpsworksPermissions
func newAwsOpsworksPermissions(c *AwsV1alpha1Client) *awsOpsworksPermissions {
	return &awsOpsworksPermissions{
		client: c.RESTClient(),
	}
}

// Get takes name of the awsOpsworksPermission, and returns the corresponding awsOpsworksPermission object, and an error if there is any.
func (c *awsOpsworksPermissions) Get(name string, options v1.GetOptions) (result *v1alpha1.AwsOpsworksPermission, err error) {
	result = &v1alpha1.AwsOpsworksPermission{}
	err = c.client.Get().
		Resource("awsopsworkspermissions").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AwsOpsworksPermissions that match those selectors.
func (c *awsOpsworksPermissions) List(opts v1.ListOptions) (result *v1alpha1.AwsOpsworksPermissionList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.AwsOpsworksPermissionList{}
	err = c.client.Get().
		Resource("awsopsworkspermissions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested awsOpsworksPermissions.
func (c *awsOpsworksPermissions) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("awsopsworkspermissions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a awsOpsworksPermission and creates it.  Returns the server's representation of the awsOpsworksPermission, and an error, if there is any.
func (c *awsOpsworksPermissions) Create(awsOpsworksPermission *v1alpha1.AwsOpsworksPermission) (result *v1alpha1.AwsOpsworksPermission, err error) {
	result = &v1alpha1.AwsOpsworksPermission{}
	err = c.client.Post().
		Resource("awsopsworkspermissions").
		Body(awsOpsworksPermission).
		Do().
		Into(result)
	return
}

// Update takes the representation of a awsOpsworksPermission and updates it. Returns the server's representation of the awsOpsworksPermission, and an error, if there is any.
func (c *awsOpsworksPermissions) Update(awsOpsworksPermission *v1alpha1.AwsOpsworksPermission) (result *v1alpha1.AwsOpsworksPermission, err error) {
	result = &v1alpha1.AwsOpsworksPermission{}
	err = c.client.Put().
		Resource("awsopsworkspermissions").
		Name(awsOpsworksPermission.Name).
		Body(awsOpsworksPermission).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *awsOpsworksPermissions) UpdateStatus(awsOpsworksPermission *v1alpha1.AwsOpsworksPermission) (result *v1alpha1.AwsOpsworksPermission, err error) {
	result = &v1alpha1.AwsOpsworksPermission{}
	err = c.client.Put().
		Resource("awsopsworkspermissions").
		Name(awsOpsworksPermission.Name).
		SubResource("status").
		Body(awsOpsworksPermission).
		Do().
		Into(result)
	return
}

// Delete takes name of the awsOpsworksPermission and deletes it. Returns an error if one occurs.
func (c *awsOpsworksPermissions) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("awsopsworkspermissions").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *awsOpsworksPermissions) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("awsopsworkspermissions").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched awsOpsworksPermission.
func (c *awsOpsworksPermissions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsOpsworksPermission, err error) {
	result = &v1alpha1.AwsOpsworksPermission{}
	err = c.client.Patch(pt).
		Resource("awsopsworkspermissions").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
