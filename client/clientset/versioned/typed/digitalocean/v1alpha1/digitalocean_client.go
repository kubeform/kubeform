/*
Copyright 2019 The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeform.dev/kubeform/apis/digitalocean/v1alpha1"
	"kubeform.dev/kubeform/client/clientset/versioned/scheme"
)

type DigitaloceanV1alpha1Interface interface {
	RESTClient() rest.Interface
	DigitaloceanCdnsGetter
	DigitaloceanCertificatesGetter
	DigitaloceanDatabaseClustersGetter
	DigitaloceanDomainsGetter
	DigitaloceanDropletsGetter
	DigitaloceanDropletSnapshotsGetter
	DigitaloceanFirewallsGetter
	DigitaloceanFloatingIpsGetter
	DigitaloceanFloatingIpAssignmentsGetter
	DigitaloceanKubernetesClustersGetter
	DigitaloceanKubernetesNodePoolsGetter
	DigitaloceanLoadbalancersGetter
	DigitaloceanProjectsGetter
	DigitaloceanRecordsGetter
	DigitaloceanSpacesBucketsGetter
	DigitaloceanSshKeysGetter
	DigitaloceanTagsGetter
	DigitaloceanVolumesGetter
	DigitaloceanVolumeAttachmentsGetter
	DigitaloceanVolumeSnapshotsGetter
}

// DigitaloceanV1alpha1Client is used to interact with features provided by the digitalocean.kubeform.com group.
type DigitaloceanV1alpha1Client struct {
	restClient rest.Interface
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanCdns() DigitaloceanCdnInterface {
	return newDigitaloceanCdns(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanCertificates() DigitaloceanCertificateInterface {
	return newDigitaloceanCertificates(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanDatabaseClusters() DigitaloceanDatabaseClusterInterface {
	return newDigitaloceanDatabaseClusters(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanDomains() DigitaloceanDomainInterface {
	return newDigitaloceanDomains(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanDroplets() DigitaloceanDropletInterface {
	return newDigitaloceanDroplets(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanDropletSnapshots() DigitaloceanDropletSnapshotInterface {
	return newDigitaloceanDropletSnapshots(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanFirewalls() DigitaloceanFirewallInterface {
	return newDigitaloceanFirewalls(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanFloatingIps() DigitaloceanFloatingIpInterface {
	return newDigitaloceanFloatingIps(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanFloatingIpAssignments() DigitaloceanFloatingIpAssignmentInterface {
	return newDigitaloceanFloatingIpAssignments(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanKubernetesClusters() DigitaloceanKubernetesClusterInterface {
	return newDigitaloceanKubernetesClusters(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanKubernetesNodePools() DigitaloceanKubernetesNodePoolInterface {
	return newDigitaloceanKubernetesNodePools(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanLoadbalancers() DigitaloceanLoadbalancerInterface {
	return newDigitaloceanLoadbalancers(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanProjects() DigitaloceanProjectInterface {
	return newDigitaloceanProjects(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanRecords() DigitaloceanRecordInterface {
	return newDigitaloceanRecords(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanSpacesBuckets() DigitaloceanSpacesBucketInterface {
	return newDigitaloceanSpacesBuckets(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanSshKeys() DigitaloceanSshKeyInterface {
	return newDigitaloceanSshKeys(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanTags() DigitaloceanTagInterface {
	return newDigitaloceanTags(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanVolumes() DigitaloceanVolumeInterface {
	return newDigitaloceanVolumes(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanVolumeAttachments() DigitaloceanVolumeAttachmentInterface {
	return newDigitaloceanVolumeAttachments(c)
}

func (c *DigitaloceanV1alpha1Client) DigitaloceanVolumeSnapshots() DigitaloceanVolumeSnapshotInterface {
	return newDigitaloceanVolumeSnapshots(c)
}

// NewForConfig creates a new DigitaloceanV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*DigitaloceanV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &DigitaloceanV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new DigitaloceanV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *DigitaloceanV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new DigitaloceanV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *DigitaloceanV1alpha1Client {
	return &DigitaloceanV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *DigitaloceanV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
