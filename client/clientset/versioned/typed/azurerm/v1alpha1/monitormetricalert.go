/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
	scheme "kubeform.dev/kubeform/client/clientset/versioned/scheme"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MonitorMetricAlertsGetter has a method to return a MonitorMetricAlertInterface.
// A group's client should implement this interface.
type MonitorMetricAlertsGetter interface {
	MonitorMetricAlerts(namespace string) MonitorMetricAlertInterface
}

// MonitorMetricAlertInterface has methods to work with MonitorMetricAlert resources.
type MonitorMetricAlertInterface interface {
	Create(*v1alpha1.MonitorMetricAlert) (*v1alpha1.MonitorMetricAlert, error)
	Update(*v1alpha1.MonitorMetricAlert) (*v1alpha1.MonitorMetricAlert, error)
	UpdateStatus(*v1alpha1.MonitorMetricAlert) (*v1alpha1.MonitorMetricAlert, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.MonitorMetricAlert, error)
	List(opts v1.ListOptions) (*v1alpha1.MonitorMetricAlertList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MonitorMetricAlert, err error)
	MonitorMetricAlertExpansion
}

// monitorMetricAlerts implements MonitorMetricAlertInterface
type monitorMetricAlerts struct {
	client rest.Interface
	ns     string
}

// newMonitorMetricAlerts returns a MonitorMetricAlerts
func newMonitorMetricAlerts(c *AzurermV1alpha1Client, namespace string) *monitorMetricAlerts {
	return &monitorMetricAlerts{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the monitorMetricAlert, and returns the corresponding monitorMetricAlert object, and an error if there is any.
func (c *monitorMetricAlerts) Get(name string, options v1.GetOptions) (result *v1alpha1.MonitorMetricAlert, err error) {
	result = &v1alpha1.MonitorMetricAlert{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MonitorMetricAlerts that match those selectors.
func (c *monitorMetricAlerts) List(opts v1.ListOptions) (result *v1alpha1.MonitorMetricAlertList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.MonitorMetricAlertList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested monitorMetricAlerts.
func (c *monitorMetricAlerts) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a monitorMetricAlert and creates it.  Returns the server's representation of the monitorMetricAlert, and an error, if there is any.
func (c *monitorMetricAlerts) Create(monitorMetricAlert *v1alpha1.MonitorMetricAlert) (result *v1alpha1.MonitorMetricAlert, err error) {
	result = &v1alpha1.MonitorMetricAlert{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		Body(monitorMetricAlert).
		Do().
		Into(result)
	return
}

// Update takes the representation of a monitorMetricAlert and updates it. Returns the server's representation of the monitorMetricAlert, and an error, if there is any.
func (c *monitorMetricAlerts) Update(monitorMetricAlert *v1alpha1.MonitorMetricAlert) (result *v1alpha1.MonitorMetricAlert, err error) {
	result = &v1alpha1.MonitorMetricAlert{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		Name(monitorMetricAlert.Name).
		Body(monitorMetricAlert).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *monitorMetricAlerts) UpdateStatus(monitorMetricAlert *v1alpha1.MonitorMetricAlert) (result *v1alpha1.MonitorMetricAlert, err error) {
	result = &v1alpha1.MonitorMetricAlert{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		Name(monitorMetricAlert.Name).
		SubResource("status").
		Body(monitorMetricAlert).
		Do().
		Into(result)
	return
}

// Delete takes name of the monitorMetricAlert and deletes it. Returns an error if one occurs.
func (c *monitorMetricAlerts) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *monitorMetricAlerts) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("monitormetricalerts").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched monitorMetricAlert.
func (c *monitorMetricAlerts) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MonitorMetricAlert, err error) {
	result = &v1alpha1.MonitorMetricAlert{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("monitormetricalerts").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
