/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// FakeApiManagementProperties implements ApiManagementPropertyInterface
type FakeApiManagementProperties struct {
	Fake *FakeAzurermV1alpha1
}

var apimanagementpropertiesResource = schema.GroupVersionResource{Group: "azurerm.kubeform.com", Version: "v1alpha1", Resource: "apimanagementproperties"}

var apimanagementpropertiesKind = schema.GroupVersionKind{Group: "azurerm.kubeform.com", Version: "v1alpha1", Kind: "ApiManagementProperty"}

// Get takes name of the apiManagementProperty, and returns the corresponding apiManagementProperty object, and an error if there is any.
func (c *FakeApiManagementProperties) Get(name string, options v1.GetOptions) (result *v1alpha1.ApiManagementProperty, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(apimanagementpropertiesResource, name), &v1alpha1.ApiManagementProperty{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ApiManagementProperty), err
}

// List takes label and field selectors, and returns the list of ApiManagementProperties that match those selectors.
func (c *FakeApiManagementProperties) List(opts v1.ListOptions) (result *v1alpha1.ApiManagementPropertyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(apimanagementpropertiesResource, apimanagementpropertiesKind, opts), &v1alpha1.ApiManagementPropertyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ApiManagementPropertyList{ListMeta: obj.(*v1alpha1.ApiManagementPropertyList).ListMeta}
	for _, item := range obj.(*v1alpha1.ApiManagementPropertyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested apiManagementProperties.
func (c *FakeApiManagementProperties) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(apimanagementpropertiesResource, opts))
}

// Create takes the representation of a apiManagementProperty and creates it.  Returns the server's representation of the apiManagementProperty, and an error, if there is any.
func (c *FakeApiManagementProperties) Create(apiManagementProperty *v1alpha1.ApiManagementProperty) (result *v1alpha1.ApiManagementProperty, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(apimanagementpropertiesResource, apiManagementProperty), &v1alpha1.ApiManagementProperty{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ApiManagementProperty), err
}

// Update takes the representation of a apiManagementProperty and updates it. Returns the server's representation of the apiManagementProperty, and an error, if there is any.
func (c *FakeApiManagementProperties) Update(apiManagementProperty *v1alpha1.ApiManagementProperty) (result *v1alpha1.ApiManagementProperty, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(apimanagementpropertiesResource, apiManagementProperty), &v1alpha1.ApiManagementProperty{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ApiManagementProperty), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeApiManagementProperties) UpdateStatus(apiManagementProperty *v1alpha1.ApiManagementProperty) (*v1alpha1.ApiManagementProperty, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(apimanagementpropertiesResource, "status", apiManagementProperty), &v1alpha1.ApiManagementProperty{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ApiManagementProperty), err
}

// Delete takes name of the apiManagementProperty and deletes it. Returns an error if one occurs.
func (c *FakeApiManagementProperties) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(apimanagementpropertiesResource, name), &v1alpha1.ApiManagementProperty{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeApiManagementProperties) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(apimanagementpropertiesResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ApiManagementPropertyList{})
	return err
}

// Patch applies the patch and returns the patched apiManagementProperty.
func (c *FakeApiManagementProperties) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ApiManagementProperty, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(apimanagementpropertiesResource, name, pt, data, subresources...), &v1alpha1.ApiManagementProperty{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ApiManagementProperty), err
}
