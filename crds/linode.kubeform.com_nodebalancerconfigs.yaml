apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: kubeform
  name: nodebalancerconfigs.linode.kubeform.com
spec:
  additionalPrinterColumns:
  - JSONPath: .status.phase
    name: Phase
    type: string
  group: linode.kubeform.com
  names:
    kind: NodebalancerConfig
    listKind: NodebalancerConfigList
    plural: nodebalancerconfigs
    singular: nodebalancerconfig
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            algorithm:
              description: 'What algorithm this NodeBalancer should use for routing
                traffic to backends: roundrobin, leastconn, source'
              type: string
            check:
              description: The type of check to perform against backends to ensure
                they are serving requests. This is used to determine if backends are
                up or down. If none no check is performed. connection requires only
                a connection to the backend to succeed. http and http_body rely on
                the backend serving HTTP, and that the response returned matches what
                is expected.
              type: string
            checkAttempts:
              description: How many times to attempt a check before considering a
                backend to be down. (1-30)
              format: int64
              type: integer
            checkBody:
              description: This value must be present in the response body of the
                check in order for it to pass. If this value is not present in the
                response body of a check request, the backend is considered to be
                down
              type: string
            checkInterval:
              description: How often, in seconds, to check that backends are up and
                serving requests.
              format: int64
              type: integer
            checkPassive:
              description: If true, any response from this backend with a 5xx status
                code will be enough for it to be considered unhealthy and taken out
                of rotation.
              type: boolean
            checkPath:
              description: The URL path to check on each backend. If the backend does
                not respond to this request it is considered to be down.
              type: string
            checkTimeout:
              description: How long, in seconds, to wait for a check attempt before
                considering it failed. (1-30)
              format: int64
              type: integer
            cipherSuite:
              description: What ciphers to use for SSL connections served by this
                NodeBalancer. `legacy` is considered insecure and should only be used
                if necessary.
              type: string
            id:
              type: string
            nodeStatus:
              additionalProperties:
                properties:
                  statusDown:
                    description: The number of backends considered to be 'DOWN' and
                      unhealthy. These are not in rotation, and not serving requests.
                    format: int64
                    type: integer
                  statusUp:
                    description: The number of backends considered to be 'UP' and
                      healthy, and that are serving requests.
                    format: int64
                    type: integer
                type: object
              type: object
            nodebalancerID:
              description: The ID of the NodeBalancer to access.
              format: int64
              type: integer
            port:
              description: The TCP port this Config is for. These values must be unique
                across configs on a single NodeBalancer (you can't have two configs
                for port 80, for example). While some ports imply some protocols,
                no enforcement is done and you may configure your NodeBalancer however
                is useful to you. For example, while port 443 is generally used for
                HTTPS, you do not need SSL configured to have a NodeBalancer listening
                on port 443.
              format: int64
              type: integer
            protocol:
              description: The protocol this port is configured to serve. If this
                is set to https you must include an ssl_cert and an ssl_key.
              type: string
            providerRef:
              description: LocalObjectReference contains enough information to let
                you locate the referenced object inside the same namespace.
              properties:
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?'
                  type: string
              type: object
            remoteBackend:
              description: Backend specifies the configuration of the terraform backend
              properties:
                ref:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                type:
                  type: string
              type: object
            secretRef:
              description: LocalObjectReference contains enough information to let
                you locate the referenced object inside the same namespace.
              properties:
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?'
                  type: string
              type: object
            sslCert:
              description: The certificate this port is serving. This is not returned.
                If set, this field will come back as `<REDACTED>`. Please use the
                ssl_commonname and ssl_fingerprint to identify the certificate.
              type: string
            sslCommonname:
              description: The common name for the SSL certification this port is
                serving if this port is not configured to use SSL.
              type: string
            sslFingerprint:
              description: The fingerprint for the SSL certification this port is
                serving if this port is not configured to use SSL.
              type: string
            stickiness:
              description: 'Controls how session stickiness is handled on this port:
                ''none'', ''table'', ''http_cookie'''
              type: string
          required:
          - nodebalancerID
          - providerRef
          type: object
        status:
          properties:
            observedGeneration:
              description: Resource generation, which is updated on mutation by the
                API Server.
              format: int64
              type: integer
            output:
              properties:
                algorithm:
                  description: 'What algorithm this NodeBalancer should use for routing
                    traffic to backends: roundrobin, leastconn, source'
                  type: string
                check:
                  description: The type of check to perform against backends to ensure
                    they are serving requests. This is used to determine if backends
                    are up or down. If none no check is performed. connection requires
                    only a connection to the backend to succeed. http and http_body
                    rely on the backend serving HTTP, and that the response returned
                    matches what is expected.
                  type: string
                checkAttempts:
                  description: How many times to attempt a check before considering
                    a backend to be down. (1-30)
                  format: int64
                  type: integer
                checkBody:
                  description: This value must be present in the response body of
                    the check in order for it to pass. If this value is not present
                    in the response body of a check request, the backend is considered
                    to be down
                  type: string
                checkInterval:
                  description: How often, in seconds, to check that backends are up
                    and serving requests.
                  format: int64
                  type: integer
                checkPassive:
                  description: If true, any response from this backend with a 5xx
                    status code will be enough for it to be considered unhealthy and
                    taken out of rotation.
                  type: boolean
                checkPath:
                  description: The URL path to check on each backend. If the backend
                    does not respond to this request it is considered to be down.
                  type: string
                checkTimeout:
                  description: How long, in seconds, to wait for a check attempt before
                    considering it failed. (1-30)
                  format: int64
                  type: integer
                cipherSuite:
                  description: What ciphers to use for SSL connections served by this
                    NodeBalancer. `legacy` is considered insecure and should only
                    be used if necessary.
                  type: string
                id:
                  type: string
                nodeStatus:
                  additionalProperties:
                    properties:
                      statusDown:
                        description: The number of backends considered to be 'DOWN'
                          and unhealthy. These are not in rotation, and not serving
                          requests.
                        format: int64
                        type: integer
                      statusUp:
                        description: The number of backends considered to be 'UP'
                          and healthy, and that are serving requests.
                        format: int64
                        type: integer
                    type: object
                  type: object
                nodebalancerID:
                  description: The ID of the NodeBalancer to access.
                  format: int64
                  type: integer
                port:
                  description: The TCP port this Config is for. These values must
                    be unique across configs on a single NodeBalancer (you can't have
                    two configs for port 80, for example). While some ports imply
                    some protocols, no enforcement is done and you may configure your
                    NodeBalancer however is useful to you. For example, while port
                    443 is generally used for HTTPS, you do not need SSL configured
                    to have a NodeBalancer listening on port 443.
                  format: int64
                  type: integer
                protocol:
                  description: The protocol this port is configured to serve. If this
                    is set to https you must include an ssl_cert and an ssl_key.
                  type: string
                providerRef:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                remoteBackend:
                  description: Backend specifies the configuration of the terraform
                    backend
                  properties:
                    ref:
                      description: LocalObjectReference contains enough information
                        to let you locate the referenced object inside the same namespace.
                      properties:
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                      type: object
                    type:
                      type: string
                  type: object
                secretRef:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                sslCert:
                  description: The certificate this port is serving. This is not returned.
                    If set, this field will come back as `<REDACTED>`. Please use
                    the ssl_commonname and ssl_fingerprint to identify the certificate.
                  type: string
                sslCommonname:
                  description: The common name for the SSL certification this port
                    is serving if this port is not configured to use SSL.
                  type: string
                sslFingerprint:
                  description: The fingerprint for the SSL certification this port
                    is serving if this port is not configured to use SSL.
                  type: string
                stickiness:
                  description: 'Controls how session stickiness is handled on this
                    port: ''none'', ''table'', ''http_cookie'''
                  type: string
              required:
              - nodebalancerID
              - providerRef
              type: object
            phase:
              type: string
            state:
              properties:
                lineage:
                  type: string
                serial:
                  format: int64
                  type: integer
                terraform_version:
                  type: string
                version:
                  format: int64
                  type: integer
              required:
              - lineage
              - serial
              - terraform_version
              - version
              type: object
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
